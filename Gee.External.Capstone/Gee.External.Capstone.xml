<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Gee.External.Capstone</name>
    </assembly>
    <members>
        <member name="T:Gee.External.Capstone.Arm64.Arm64AtOperation">
            <summary>
                ARM64 Address Translation (AT) Operation.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64AtOperation.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, AT operation.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.Arm64BarrierOperation">
            <summary>
                ARM64 Barrier Operation.
            </summary>
            <remarks>
                Represents barrier operations supported by the DMB, DSB, and ISB instructions.
            </remarks>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64BarrierOperation.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, barrier operation.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.Arm64ConditionCode">
            <summary>
                ARM64 Condition Code.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64ConditionCode.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, condition code.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.Arm64DcOperation">
            <summary>
                ARM64 Data Cache (DC) Operation.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64DcOperation.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, DC operation.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.Arm64DisassembleMode">
            <summary>
                ARM64 Disassemble Mode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64DisassembleMode.Arm">
            <summary>
                Indicates binary code should be disassembled in 32-bit ARM mode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64DisassembleMode.BigEndian">
            <summary>
                Indicates binary code should be disassembled in big-endian mode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64DisassembleMode.LittleEndian">
            <summary>
                Indicates binary code should be disassembled in little-endian mode.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.Arm64ExtendOperation">
            <summary>
                ARM64 Extend Operation.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64ExtendOperation.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, extend operation.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.Arm64IcOperation">
            <summary>
                ARM64 Instruction Cache (IC) Operation.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64IcOperation.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, IC operation.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.Arm64Instruction">
            <summary>
                ARM64 Instruction.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.Arm64.Arm64Instruction.Create(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Create an ARM64 Instruction.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="hInstruction">
                An instruction handle.
            </param>
            <returns>
                An ARM instruction.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.Arm64.Arm64Instruction.#ctor(Gee.External.Capstone.Arm64.Arm64InstructionBuilder)">
            <summary>
                Create an ARM64 Instruction.
            </summary>
            <param name="builder">
                A builder to initialize the object with.
            </param>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.Arm64InstructionBuilder">
            <summary>
                ARM64 Instruction Builder.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.Arm64.Arm64InstructionBuilder.Create">
            <summary>
                Create an ARM Instruction.
            </summary>
            <returns>
                An ARM instruction.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.Arm64.Arm64InstructionBuilder.CreateDetails(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Create Instruction's Details.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="hInstruction">
                An instruction handle.
            </param>
            <returns>
                The instruction's details.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.Arm64.Arm64InstructionBuilder.CreateId(System.Int32)">
            <summary>
                Create Instruction's Unique Identifier.
            </summary>
            <param name="id">
                An instruction's unique identifier.
            </param>
            <returns>
                The instruction's unique identifier.
            </returns>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.Arm64InstructionDetail">
            <summary>
                ARM64 Instruction Detail.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64InstructionDetail.ConditionCode">
            <summary>
                Get Condition Code.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64InstructionDetail.Operands">
            <summary>
                Get Instruction's Operands.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64InstructionDetail.UpdateFlags">
            <summary>
                Get Update Flags Flag.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64InstructionDetail.WriteBack">
            <summary>
                Get Write Back Flag.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.Arm64.Arm64InstructionDetail.Create(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Create an ARM64 Instruction Detail.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="hInstruction">
                An instruction handle.
            </param>
            <returns>
                An ARM64 instruction detail.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.Arm64.Arm64InstructionDetail.#ctor(Gee.External.Capstone.Arm64.Arm64InstructionDetailBuilder)">
            <summary>
                Create an ARM64 Instruction Detail.
            </summary>
            <param name="builder">
                A builder to initialize the object with.
            </param>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.Arm64InstructionDetailBuilder">
            <summary>
                ARM64 Instruction Detail Builder.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64InstructionDetailBuilder.ConditionCode">
            <summary>
                Get and Set Condition Code.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64InstructionDetailBuilder.Operands">
            <summary>
                Get and Set Instruction's Operands.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64InstructionDetailBuilder.UpdateFlags">
            <summary>
                Get and Set Update Flags Flag.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64InstructionDetailBuilder.WriteBack">
            <summary>
                Get and Set Write Back Flag.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.Arm64.Arm64InstructionDetailBuilder.Build(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Build an Instruction Detail.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="hInstruction">
                An instruction handle.
            </param>
        </member>
        <member name="M:Gee.External.Capstone.Arm64.Arm64InstructionDetailBuilder.Create">
            <summary>
                Create an ARM64 Instruction Detail.
            </summary>
            <returns>
                An ARM64 instruction detail.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.Arm64.Arm64InstructionDetailBuilder.CreateInstructionGroup(Gee.External.Capstone.CapstoneDisassembler,System.Byte)">
            <summary>
                Create an Instruction Group.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="instructionGroupId">
                An instruction group's unique identifier.
            </param>
            <returns>
                An ARM64 instruction group.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.Arm64.Arm64InstructionDetailBuilder.CreateRegister(Gee.External.Capstone.CapstoneDisassembler,System.Int16)">
            <summary>
                Create a Register.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="registerId">
                A register's unique identifier.
            </param>
            <returns>
                An ARM64 register.
            </returns>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.Arm64InstructionGroup">
            <summary>
                ARM64 Instruction Group.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.Arm64.Arm64InstructionGroup.Create(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.Arm64.Arm64InstructionGroupId)">
            <summary>
                Create an ARM64 Instruction Group.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="id">
                The instruction group's unique identifier.
            </param>
            <returns>
                An ARM64 instruction group.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.Arm64.Arm64InstructionGroup.#ctor(Gee.External.Capstone.Arm64.Arm64InstructionGroupId,System.String)">
            <summary>
                Create an ARM64 Instruction Group.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.Arm64InstructionGroupId">
            <summary>
                ARM64 Instruction Group Unique Identifier.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64InstructionGroupId.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, instruction group.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.Arm64InstructionId">
            <summary>
                ARM64 Instruction Unique Identifier.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64InstructionId.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, instruction.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.Arm64MemoryOperandValue">
            <summary>
                ARM64 Memory Operand Value.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64MemoryOperandValue.Base">
            <summary>
                Get Base Register.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64MemoryOperandValue.Displacement">
            <summary>
                Get Displacement Value.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64MemoryOperandValue.Index">
            <summary>
                Get Index Register.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.Arm64.Arm64MemoryOperandValue.Create(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.Arm64.NativeArm64MemoryOperandValue@)">
            <summary>
                Create an ARM64 Memory Operand Value.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="nativeMemoryOperandValue">
                A native ARM64 memory operand value.
            </param>
            <returns>
                An ARM64 memory operand value.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.Arm64.Arm64MemoryOperandValue.#ctor(Gee.External.Capstone.Arm64.Arm64MemoryOperandValueBuilder)">
            <summary>
                Create an ARM64 Memory Operand Value.
            </summary>
            <param name="builder">
                A builder to initialize the object with.
            </param>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.Arm64MemoryOperandValueBuilder">
            <summary>
                ARM64 Memory Operand Value Builder.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64MemoryOperandValueBuilder.Base">
            <summary>
                Get and Set Base Register.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64MemoryOperandValueBuilder.Displacement">
            <summary>
                Get and Set Displacement Value.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64MemoryOperandValueBuilder.Index">
            <summary>
                Get and Set Index Register.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.Arm64.Arm64MemoryOperandValueBuilder.Build(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.Arm64.NativeArm64MemoryOperandValue@)">
            <summary>
                Build an X86 Memory Operand Value Builder.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="nativeMemoryOperandValue">
                A native ARM64 memory operand value.
            </param>
            <returns>
                This builder.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.Arm64.Arm64MemoryOperandValueBuilder.Create">
            <summary>
                Create an ARM64 Memory Operand Value.
            </summary>
            <returns>
                An ARM64 memory operand value.
            </returns>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.Arm64MrsSystemRegister">
            <summary>
                ARM64 MRS System Register.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64MrsSystemRegister.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, system register.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.Arm64MsrSystemRegister">
            <summary>
                ARM64 MSR System Register.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64MsrSystemRegister.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, MSR register.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.Arm64Operand">
            <summary>
                ARM64 Operand.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64Operand._accessType">
            <summary>
                Operand's Access Type.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64Operand._atOperation">
            <summary>
                Address Translation (AT) Operation.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64Operand._dcOperation">
            <summary>
                Data Cache (DC) Operation.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64Operand._floatingPoint">
            <summary>
                Floating Point Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64Operand._icOperation">
            <summary>
                Instruction Cache (IC) Operation.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64Operand._immediate">
            <summary>
                Immediate Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64Operand._memory">
            <summary>
                Memory Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64Operand._mrsRegister">
            <summary>
                MRS Register Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64Operand._msrRegister">
            <summary>
                MSR Register Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64Operand._prefetchOperation">
            <summary>
                Prefetch Operation.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64Operand._pStateField">
            <summary>
                Processor State (PSTATE) Field.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64Operand._register">
            <summary>
                Register Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64Operand._shiftValue">
            <summary>
                Shift Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64Operand._tlbiOperation">
            <summary>
                Translation Lookaside Buffer (TLBI) Operation.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64Operand.AccessType">
            <summary>
                Get Operand's Access Type.
            </summary>
            <exception cref="T:System.NotSupportedException">
                Thrown if diet mode is enabled.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64Operand.AtOperation">
            <summary>
                Get Address Translation (AT) Operation.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the operand's type is not equal to <see cref="F:Gee.External.Capstone.Arm64.Arm64OperandType.AtOperation" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64Operand.BarrierOperation">
            <summary>
                Get Barrier Operation.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64Operand.DcOperation">
            <summary>
                Get Data Cache (DC) Operation.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the operand's type is not equal to <see cref="F:Gee.External.Capstone.Arm64.Arm64OperandType.DcOperation" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64Operand.ExtendOperation">
            <summary>
                Get Extend Operation.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64Operand.FloatingPoint">
            <summary>
                Get Floating Point Value.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the operand's type is not equal to <see cref="F:Gee.External.Capstone.Arm64.Arm64OperandType.FloatingPoint" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64Operand.IcOperation">
            <summary>
                Get Instruction Cache (IC) Operation.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the operand's type is not equal to <see cref="F:Gee.External.Capstone.Arm64.Arm64OperandType.IcOperation" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64Operand.Immediate">
            <summary>
                Get Immediate Value.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the operand's type is not equal to <see cref="F:Gee.External.Capstone.Arm64.Arm64OperandType.Immediate" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64Operand.IsDietModeEnabled">
            <summary>
                Determine if Diet Mode is Enabled.
            </summary>
            <value>
                A boolean true if diet mode is enabled. A boolean false otherwise.
            </value>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64Operand.Memory">
            <summary>
                Get Memory Value.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the operand's type is not equal to <see cref="F:Gee.External.Capstone.Arm64.Arm64OperandType.Memory" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64Operand.MrsRegister">
            <summary>
                Get MRS Register Value.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the operand's type is not equal to <see cref="F:Gee.External.Capstone.Arm64.Arm64OperandType.MrsRegister" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64Operand.MsrRegister">
            <summary>
                Get MSR Register Value.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the operand's type is not equal to <see cref="F:Gee.External.Capstone.Arm64.Arm64OperandType.MrsRegister" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64Operand.PrefetchOperation">
            <summary>
                Get Prefetch Operation.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the operand's type is not equal to <see cref="F:Gee.External.Capstone.Arm64.Arm64OperandType.PrefetchOperation" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64Operand.PStateField">
            <summary>
                Get Processor State (PSTATE) Field.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the operand's type is not equal to <see cref="F:Gee.External.Capstone.Arm64.Arm64OperandType.PStateField" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64Operand.Register">
            <summary>
                Get Register Value.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the operand's type is not equal to <see cref="F:Gee.External.Capstone.Arm64.Arm64OperandType.Register" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64Operand.ShiftOperation">
            <summary>
                Get Shift Operation.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64Operand.ShiftValue">
            <summary>
                Get Shift Value.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the shift operation is equal to <see cref="F:Gee.External.Capstone.Arm64.Arm64ShiftOperation.Invalid" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64Operand.TlbiOperation">
            <summary>
                Get Translation Lookaside Buffer (TLBI) Operation.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64Operand.Type">
            <summary>
                Get Operand's Type.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64Operand.VectorArrangementSpecifier">
            <summary>
                Get Vector Arrangement Specifier.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64Operand.VectorElementSizeSpecifier">
            <summary>
                Get Vector Element Size Specifier.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64Operand.VectorIndex">
            <summary>
                Get Vector Index.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.Arm64.Arm64Operand.Create(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.Arm64.Arm64InstructionId,Gee.External.Capstone.Arm64.NativeArm64InstructionDetail@)">
            <summary>
                Create ARM64 Operands.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="instructionId">
                An instruction's unique identifier.
            </param>
            <param name="nativeInstructionDetail">
                A native ARM64 instruction detail.
            </param>
            <returns>
                An array of ARM64 operands.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.Arm64.Arm64Operand.Create(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.Arm64.Arm64InstructionId,Gee.External.Capstone.Arm64.NativeArm64Operand@)">
            <summary>
                Create an ARM64 Operand.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="instructionId">
                An instruction's unique identifier.
            </param>
            <param name="nativeOperand">
                A native ARM64 operand.
            </param>
            <returns>
                An ARM64 operand.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.Arm64.Arm64Operand.#ctor(Gee.External.Capstone.Arm64.Arm64OperandBuilder)">
            <summary>
                Create an ARM64 Operand.
            </summary>
            <param name="builder">
                A builder to initialize the object with.
            </param>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.Arm64OperandBuilder">
            <summary>
                ARM64 Operand Builder.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64OperandBuilder.AccessType">
            <summary>
                Get and Set Operand's Access Type.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64OperandBuilder.AtOperation">
            <summary>
                Get and Set Address Translation (AT) Operation.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64OperandBuilder.BarrierOperation">
            <summary>
                Get and Set Barrier Operation.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64OperandBuilder.DcOperation">
            <summary>
                Get and Set Data Cache (DC) Operation.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64OperandBuilder.ExtendOperation">
            <summary>
                Get and Set Extend Operation.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64OperandBuilder.FloatingPoint">
            <summary>
                Get and Set Floating Point Value.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64OperandBuilder.IcOperation">
            <summary>
                Get and Set Instruction Cache (IC) Operation.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64OperandBuilder.Immediate">
            <summary>
                Get and Set Immediate Value.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64OperandBuilder.Memory">
            <summary>
                Get and Set Memory Value.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64OperandBuilder.MrsRegister">
            <summary>
                Get and Set MRS Register Value.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64OperandBuilder.MsrRegister">
            <summary>
                Get and Set MSR Register Value.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64OperandBuilder.PrefetchOperation">
            <summary>
                Get and Set Prefetch Operation.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64OperandBuilder.PStateField">
            <summary>
                Get and Set Processor State (PSTATE) Field.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64OperandBuilder.Register">
            <summary>
                Get and Set Register Value.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64OperandBuilder.ShiftOperation">
            <summary>
                Get and Set Shift Operation.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64OperandBuilder.ShiftValue">
            <summary>
                Get and Set Shift Value.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64OperandBuilder.TlbiOperation">
            <summary>
                Get and Set Translation Lookaside Buffer (TLBI) Operation.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64OperandBuilder.Type">
            <summary>
                Get and Set Operand's Type.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64OperandBuilder.VectorArrangementSpecifier">
            <summary>
                Get and Set Vector Arrangement Specifier.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64OperandBuilder.VectorElementSizeSpecifier">
            <summary>
                Get and Set Vector Element Size Specifier.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64OperandBuilder.VectorIndex">
            <summary>
                Get and Set Vector Index.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.Arm64.Arm64OperandBuilder.Build(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.Arm64.Arm64InstructionId,Gee.External.Capstone.Arm64.NativeArm64Operand@)">
            <summary>
                Build an ARM64 Operand.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="instructionId">
                An instruction's unique identifier.
            </param>
            <param name="nativeOperand">
                A native ARM64 operand.
            </param>
            <returns>
                This builder.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.Arm64.Arm64OperandBuilder.Create">
            <summary>
                Create an ARM64 Operand.
            </summary>
            <returns>
                An ARM64 operand.
            </returns>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.Arm64OperandType">
            <summary>
                ARM64 Operand Type.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64OperandType.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, operand type.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64OperandType.AtOperation">
            <summary>
                Indicates an Address Translation (AT) operation.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64OperandType.DcOperation">
            <summary>
                Indicates a Data Cache (DC) operation.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64OperandType.IcOperation">
            <summary>
                Indicates an Instruction Cache (IC) operation.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64OperandType.TlbiOperation">
            <summary>
                Indicates a Translation Lookaside Buffer (TLBI) operation.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.Arm64PrefetchOperation">
            <summary>
                ARM64 Prefetch Operation.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64PrefetchOperation.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, prefetch operation.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.Arm64PStateField">
            <summary>
                ARM64 Processor State (PSTATE) Field.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64PStateField.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, PSTATE field.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.Arm64Register">
            <summary>
                ARM64 Register.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.Arm64.Arm64Register.TryCreate(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.Arm64.Arm64RegisterId)">
            <summary>
                Create an ARM64 Register.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="id">
                The register's unique identifier.
            </param>
            <returns>
                An ARM64 register.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.Arm64.Arm64Register.#ctor(Gee.External.Capstone.Arm64.Arm64RegisterId,System.String)">
            <summary>
                Create an ARM64 Register.
            </summary>
            <param name="id">
                The register's unique identifier.
            </param>
            <param name="name">
                The register's name.
            </param>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.Arm64RegisterId">
            <summary>
                ARM64 Register Unique Identifier.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64RegisterId.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, register.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.Arm64ShiftOperation">
            <summary>
                ARM64 Shift Operation.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64ShiftOperation.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, shift operation.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.Arm64TlbiOperation">
            <summary>
                ARM64 Translation Lookaside Buffer (TLBI) Operation.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64TlbiOperation.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, TLBI operation.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.Arm64VectorArrangementSpecifier">
            <summary>
                ARM64 Vector Arrangement Specifier.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64VectorArrangementSpecifier.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, vector arrangement specifier.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.Arm64VectorElementSizeSpecifier">
            <summary>
                ARM64 Vector Element Size Specifier.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64VectorElementSizeSpecifier.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, vector element size specifier.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.CapstoneArm64Disassembler">
            <summary>
                ARM64 Capstone Disassembler.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.Arm64.CapstoneArm64Disassembler.#ctor(Gee.External.Capstone.Arm64.Arm64DisassembleMode)">
            <summary>
                Create an ARM64 Disassembler.
            </summary>
            <param name="disassembleMode"></param>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.NativeArm64InstructionDetail">
            <summary>
                Native ARM64 Instruction Detail.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.NativeArm64InstructionDetail.ConditionCode">
            <summary>
                Condition Code.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.NativeArm64InstructionDetail.UpdateFlags">
            <summary>
                Update Flags Flag.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.NativeArm64InstructionDetail.WriteBack">
            <summary>
                Write Back Flag.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.NativeArm64InstructionDetail.OperandCount">
            <summary>
                Instruction's Operand Count.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.NativeArm64InstructionDetail.Operands">
            <summary>
                Instruction's Operands.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.NativeArm64MemoryOperandValue">
            <summary>
                Native ARM64 Memory Operand Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.NativeArm64MemoryOperandValue.Base">
            <summary>
                Base Register.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.NativeArm64MemoryOperandValue.Index">
            <summary>
                Index Register.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.NativeArm64MemoryOperandValue.Displacement">
            <summary>
                Displacement Value.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.NativeArm64Operand">
            <summary>
                Native ARM64 Operand.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.NativeArm64Operand.VectorIndex">
            <summary>
                Vector Index.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.NativeArm64Operand.VectorArrangementSpecifier">
            <summary>
                Vector Arrangement Specifier.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.NativeArm64Operand.VectorElementSizeSpecifier">
            <summary>
                Vector Element Size Specifier.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.NativeArm64Operand.Shift">
            <summary>
                Shift.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.NativeArm64Operand.ExtendOperation">
            <summary>
                Extend Operation.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.NativeArm64Operand.Type">
            <summary>
                Operand's Type.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.NativeArm64Operand.Value">
            <summary>
                Operand's Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.NativeArm64Operand.AccessType">
            <summary>
                Operand's Access Type.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.NativeArm64OperandShift">
            <summary>
                Native ARM64 Operand Shift.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.NativeArm64OperandShift.Operation">
            <summary>
                Shift Operation.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.NativeArm64OperandShift.Value">
            <summary>
                Shift Value.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.NativeArm64OperandValue">
            <summary>
                Native ARM64 Operand Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.NativeArm64OperandValue.Register">
            <summary>
                Register.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.NativeArm64OperandValue.Immediate">
            <summary>
                Immediate Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.NativeArm64OperandValue.FloatingPoint">
            <summary>
                Floating Point Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.NativeArm64OperandValue.Memory">
            <summary>
                Memory Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.NativeArm64OperandValue.PStateField">
            <summary>
                Processor State (PSTATE) Field.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.NativeArm64OperandValue.SystemOperation">
            <summary>
                System Register.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.NativeArm64OperandValue.PrefetchOperation">
            <summary>
                Prefetch Operation.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.NativeArm64OperandValue.BarrierOperation">
            <summary>
                Barrier Operation.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm.ArmConditionCode">
            <summary>
                ARM Condition Code.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.ArmConditionCode.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, condition code.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm.ArmCpsFlag">
            <summary>
                ARM CPS Flag Type.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.ArmCpsFlag.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, CPS flag type.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm.ArmCpsMode">
            <summary>
                ARM CPS Mode Type.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.ArmCpsMode.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, CPS mode type.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm.ArmDisassembleMode">
            <summary>
                ARM Disassemble Mode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.ArmDisassembleMode.Arm">
            <summary>
                Indicates binary code should be disassembled in 32-bit ARM mode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.ArmDisassembleMode.BigEndian">
            <summary>
                Indicates binary code should be disassembled in big-endian mode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.ArmDisassembleMode.LittleEndian">
            <summary>
                Indicates binary code should be disassembled in little-endian mode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.ArmDisassembleMode.CortexM">
            <summary>
                Indicates binary code should be disassembled with support for the ARM Cortex-M processor cores.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.ArmDisassembleMode.Thumb">
            <summary>
                Indicates binary code should be disassembled with support for the ARM Thumb and ARM Thumb-2
                instruction sets.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.ArmDisassembleMode.V8">
            <summary>
                Indicates binary code should be disassembled with support for the ARMv8 instruction set.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm.ArmInstruction">
            <summary>
                ARM Instruction.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.Arm.ArmInstruction.Create(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Create an ARM Instruction.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="hInstruction">
                An instruction handle.
            </param>
            <returns>
                An ARM instruction.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.Arm.ArmInstruction.#ctor(Gee.External.Capstone.Arm.ArmInstructionBuilder)">
            <summary>
                Create an ARM Instruction.
            </summary>
            <param name="builder">
                A builder to initialize the object with.
            </param>
        </member>
        <member name="T:Gee.External.Capstone.Arm.ArmInstructionBuilder">
            <summary>
                ARM Instruction Builder.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.Arm.ArmInstructionBuilder.Create">
            <summary>
                Create an ARM Instruction.
            </summary>
            <returns>
                An ARM instruction.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.Arm.ArmInstructionBuilder.CreateDetails(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Create Instruction's Details.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="hInstruction">
                An instruction handle.
            </param>
            <returns>
                The instruction's details.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.Arm.ArmInstructionBuilder.CreateId(System.Int32)">
            <summary>
                Create Instruction's Unique Identifier.
            </summary>
            <param name="id">
                An instruction's unique identifier.
            </param>
            <returns>
                The instruction's unique identifier.
            </returns>
        </member>
        <member name="T:Gee.External.Capstone.Arm.ArmInstructionDetail">
            <summary>
                ARM Instruction Detail.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmInstructionDetail.ConditionCode">
            <summary>
                Get Condition Code.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmInstructionDetail.CpsFlag">
            <summary>
                Get CPS Flag.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmInstructionDetail.CpsMode">
            <summary>
                Get CPS Mode.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmInstructionDetail.IsUserMode">
            <summary>
                Get User Mode Flag.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmInstructionDetail.MemoryBarrierOperation">
            <summary>
                Get Memory Barrier Operation.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmInstructionDetail.Operands">
            <summary>
                Get Instruction's Operands.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmInstructionDetail.UpdateFlags">
            <summary>
                Get Update Flags Flag.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmInstructionDetail.VectorDataType">
            <summary>
                Get Vector Data Type.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmInstructionDetail.VectorSize">
            <summary>
                Get Vector Size.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmInstructionDetail.WriteBack">
            <summary>
                Get Write Back Flag.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.Arm.ArmInstructionDetail.Create(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Create an ARM Instruction Detail.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="hInstruction">
                An instruction handle.
            </param>
            <returns>
                An ARM instruction detail.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.Arm.ArmInstructionDetail.#ctor(Gee.External.Capstone.Arm.ArmInstructionDetailBuilder)">
            <summary>
                Create an ARM Instruction Detail.
            </summary>
            <param name="builder">
                A builder to initialize the object with.
            </param>
        </member>
        <member name="T:Gee.External.Capstone.Arm.ArmInstructionDetailBuilder">
            <summary>
                ARM Instruction Detail Builder.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmInstructionDetailBuilder.ConditionCode">
            <summary>
                Get and Set Condition Code.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmInstructionDetailBuilder.CpsFlag">
            <summary>
                Get and Set CPS Flag.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmInstructionDetailBuilder.CpsMode">
            <summary>
                Get and Set CPS Mode.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmInstructionDetailBuilder.IsUserMode">
            <summary>
                Get and Set User Mode Flag.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmInstructionDetailBuilder.MemoryBarrierOperation">
            <summary>
                Get and Set Memory Barrier Operation.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmInstructionDetailBuilder.Operands">
            <summary>
                Get and Set Instruction's Operands.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmInstructionDetailBuilder.UpdateFlags">
            <summary>
                Get and Set Update Flags Flag.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmInstructionDetailBuilder.VectorDataType">
            <summary>
                Get and Set Vector Data Type.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmInstructionDetailBuilder.VectorSize">
            <summary>
                Get and Set Vector Size.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmInstructionDetailBuilder.WriteBack">
            <summary>
                Get and Set Write Back Flag.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.Arm.ArmInstructionDetailBuilder.Build(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Build an Instruction Detail.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="hInstruction">
                An instruction handle.
            </param>
        </member>
        <member name="M:Gee.External.Capstone.Arm.ArmInstructionDetailBuilder.Create">
            <summary>
                Create an ARM Instruction Detail.
            </summary>
            <returns>
                An ARM instruction detail.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.Arm.ArmInstructionDetailBuilder.CreateInstructionGroup(Gee.External.Capstone.CapstoneDisassembler,System.Byte)">
            <summary>
                Create an Instruction Group.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="instructionGroupId">
                An instruction group's unique identifier.
            </param>
            <returns>
                An ARM instruction group.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.Arm.ArmInstructionDetailBuilder.CreateRegister(Gee.External.Capstone.CapstoneDisassembler,System.Int16)">
            <summary>
                Create a Register.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="registerId">
                A register's unique identifier.
            </param>
            <returns>
                An ARM register.
            </returns>
        </member>
        <member name="T:Gee.External.Capstone.Arm.ArmInstructionGroup">
            <summary>
                ARM Instruction Group.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.Arm.ArmInstructionGroup.Create(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.Arm.ArmInstructionGroupId)">
            <summary>
                Create an ARM Instruction Group.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="id">
                The instruction group's unique identifier.
            </param>
            <returns>
                An ARM instruction group.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.Arm.ArmInstructionGroup.#ctor(Gee.External.Capstone.Arm.ArmInstructionGroupId,System.String)">
            <summary>
                Create an ARM Instruction Group.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm.ArmInstructionGroupId">
            <summary>
                ARM Instruction Group Unique Identifier.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.ArmInstructionGroupId.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, instruction group.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm.ArmInstructionId">
            <summary>
                ARM Instruction Unique Identifier.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.ArmInstructionId.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, instruction.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm.ArmMemoryBarrierOperation">
            <summary>
                ARM Memory Barrier Operation.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.ArmMemoryBarrierOperation.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, memory barrier operation.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm.ArmMemoryOperandValue">
            <summary>
                ARM Memory Operand Value.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmMemoryOperandValue.Base">
            <summary>
                Get Base Register.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmMemoryOperandValue.Displacement">
            <summary>
                Get Displacement Value.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmMemoryOperandValue.Index">
            <summary>
                Get Index Register.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmMemoryOperandValue.LeftShit">
            <summary>
                Get Index Register's Left Shift Value.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmMemoryOperandValue.Scale">
            <summary>
                Get Index Register's Scale.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.Arm.ArmMemoryOperandValue.Create(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.Arm.NativeArmMemoryOperandValue@)">
            <summary>
                Create an ARM Memory Operand Value.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="nativeMemoryOperandValue">
                A native ARM memory operand value.
            </param>
            <returns>
                An ARM memory operand value.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.Arm.ArmMemoryOperandValue.#ctor(Gee.External.Capstone.Arm.ArmMemoryOperandValueBuilder)">
            <summary>
                Create an ARM Memory Operand Value.
            </summary>
            <param name="builder">
                A builder to initialize the object with.
            </param>
        </member>
        <member name="T:Gee.External.Capstone.Arm.ArmMemoryOperandValueBuilder">
            <summary>
                ARM Memory Operand Value Builder.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmMemoryOperandValueBuilder.Base">
            <summary>
                Get and Set Base Register.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmMemoryOperandValueBuilder.Displacement">
            <summary>
                Get and Set Displacement Value.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmMemoryOperandValueBuilder.Index">
            <summary>
                Get and Set Index Register.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmMemoryOperandValueBuilder.LeftShit">
            <summary>
                Get and Set Index Register's Left Shift Value.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmMemoryOperandValueBuilder.Scale">
            <summary>
                Get and Set Index Register's Scale.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.Arm.ArmMemoryOperandValueBuilder.Build(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.Arm.NativeArmMemoryOperandValue@)">
            <summary>
                Build an ARM Memory Operand Value Builder.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="nativeMemoryOperandValue">
                A native ARM memory operand value.
            </param>
            <returns>
                This builder.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.Arm.ArmMemoryOperandValueBuilder.Create">
            <summary>
                Create an ARM Memory Operand Value.
            </summary>
            <returns>
                An ARM memory operand value.
            </returns>
        </member>
        <member name="T:Gee.External.Capstone.Arm.ArmOperand">
            <summary>
                ARM Operand.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.ArmOperand._accessType">
            <summary>
                Operand's Access Type.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.ArmOperand._floatingPoint">
            <summary>
                Floating Point Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.ArmOperand._immediate">
            <summary>
                Immediate Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.ArmOperand._memory">
            <summary>
                Memory Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.ArmOperand._register">
            <summary>
                Register Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.ArmOperand._setEndOperation">
            <summary>
                SETEND Operation.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.ArmOperand._shiftConstant">
            <summary>
                Shift Constant.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.ArmOperand._shiftRegister">
            <summary>
                Shift Register.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.ArmOperand._systemRegister">
            <summary>
                System Register Value.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmOperand.AccessType">
            <summary>
                Get Operand's Access Type.
            </summary>
            <exception cref="T:System.NotSupportedException">
                Thrown if diet mode is enabled.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmOperand.FloatingPoint">
            <summary>
                Get Floating Point Value.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the operand's type is not equal to <see cref="F:Gee.External.Capstone.Arm.ArmOperandType.FloatingPoint" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmOperand.Immediate">
            <summary>
                Get Immediate Value.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the operand's type is not equal to <see cref="F:Gee.External.Capstone.Arm.ArmOperandType.Immediate" /> or, if the
                operand's type is not equal to <see cref="F:Gee.External.Capstone.Arm.ArmOperandType.CImmediate" />, or if the operand's type is
                not equal to <see cref="F:Gee.External.Capstone.Arm.ArmOperandType.PImmediate" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmOperand.IsSubtracted">
            <summary>
                Get Operand's Subtracted Flag.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmOperand.Memory">
            <summary>
                Get Memory Value.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the operand's type is not equal to <see cref="F:Gee.External.Capstone.Arm.ArmOperandType.Memory" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmOperand.NeonLane">
            <summary>
                Get Neon Lane Value.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmOperand.Register">
            <summary>
                Get Register Value.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the operand's type is not equal to <see cref="F:Gee.External.Capstone.Arm.ArmOperandType.Register" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmOperand.SetEndOperation">
            <summary>
                Get SETEND Operation.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the operand's type is not equal to <see cref="F:Gee.External.Capstone.Arm.ArmOperandType.SetEndOperation" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmOperand.ShiftConstant">
            <summary>
                Get Shift Constant.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the shift operation is equal to <see cref="F:Gee.External.Capstone.Arm.ArmShiftOperation.Invalid" />, or if the shift
                operation is not less than <see cref="F:Gee.External.Capstone.Arm.ArmShiftOperation.ARM_SFT_ASR_REG" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmOperand.ShiftOperation">
            <summary>
                Get Shift Operation.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmOperand.ShiftRegister">
            <summary>
                Get Shift Register.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the shift operation is equal to <see cref="F:Gee.External.Capstone.Arm.ArmShiftOperation.Invalid" />, or if the shift
                operation is less than <see cref="F:Gee.External.Capstone.Arm.ArmShiftOperation.ARM_SFT_ASR_REG" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmOperand.SystemRegister">
            <summary>
                Get System Register.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the operand's type is not equal to <see cref="F:Gee.External.Capstone.Arm.ArmOperandType.SystemRegister" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmOperand.Type">
            <summary>
                Get Operand's Type.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmOperand.VectorIndex">
            <summary>
                Get Vector Index.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.Arm.ArmOperand.Create(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.Arm.NativeArmInstructionDetail@)">
            <summary>
                Create ARM Operands.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="nativeInstructionDetail">
                A native ARM instruction detail.
            </param>
            <returns>
                An array of ARM operands.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.Arm.ArmOperand.Create(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.Arm.NativeArmOperand@)">
            <summary>
                Create an ARM Operand.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="nativeOperand">
                A native ARM operand.
            </param>
            <returns>
                An ARM operand.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.Arm.ArmOperand.#ctor(Gee.External.Capstone.Arm.ArmOperandBuilder)">
            <summary>
                Create an ARM Operand.
            </summary>
            <param name="builder">
                A builder to initialize the object with.
            </param>
        </member>
        <member name="T:Gee.External.Capstone.Arm.ArmOperandBuilder">
            <summary>
                ARM Operand Builder.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmOperandBuilder.AccessType">
            <summary>
                Get and Set Operand's Access Type.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmOperandBuilder.FloatingPoint">
            <summary>
                Get and Set Floating Point Value.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmOperandBuilder.Immediate">
            <summary>
                Get and Set Immediate Value.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmOperandBuilder.IsSubtracted">
            <summary>
                Get and Set Operand's Subtracted Flag.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmOperandBuilder.Memory">
            <summary>
                Get and Set Memory Value.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmOperandBuilder.NeonLane">
            <summary>
                Get and Set Neon Lane Value.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmOperandBuilder.Register">
            <summary>
                Get and Set Register.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmOperandBuilder.SetEndOperation">
            <summary>
                Get and Set SETEND Operation.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmOperandBuilder.ShiftConstant">
            <summary>
                Get and Set Shift Constant.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmOperandBuilder.ShiftOperation">
            <summary>
                Get and Set Shift Operation.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmOperandBuilder.ShiftRegister">
            <summary>
                Get and Set Shift Register.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmOperandBuilder.SystemRegister">
            <summary>
                Get and Set System Register.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmOperandBuilder.Type">
            <summary>
                Get and Set Operand's Type.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmOperandBuilder.VectorIndex">
            <summary>
                Get and Set Vector Index.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.Arm.ArmOperandBuilder.Build(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.Arm.NativeArmOperand@)">
            <summary>
                Build an ARM Operand.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="nativeOperand">
                A native ARM operand.
            </param>
            <returns>
                This builder.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.Arm.ArmOperandBuilder.Create">
            <summary>
                Create an ARM Operand.
            </summary>
            <returns>
                An ARM operand.
            </returns>
        </member>
        <member name="T:Gee.External.Capstone.Arm.ArmOperandType">
            <summary>
                ARM Operand Type.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.ArmOperandType.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, operand type.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm.ArmRegister">
            <summary>
                ARM Register.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.Arm.ArmRegister.TryCreate(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.Arm.ArmRegisterId)">
            <summary>
                Create an ARM Register.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="id">
                The register's unique identifier.
            </param>
            <returns>
                An ARM register.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.Arm.ArmRegister.#ctor(Gee.External.Capstone.Arm.ArmRegisterId,System.String)">
            <summary>
                Create an ARM Register.
            </summary>
            <param name="id">
                The register's unique identifier.
            </param>
            <param name="name">
                The register's name.
            </param>
        </member>
        <member name="T:Gee.External.Capstone.Arm.ArmRegisterId">
            <summary>
                ARM Register Unique Identifier.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.ArmRegisterId.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, register.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm.ArmSetEndOperation">
            <summary>
                ARM SETEND Type.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.ArmSetEndOperation.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, SETEND type.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm.ArmShiftOperation">
            <summary>
                ARM Shift Operation.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.ArmShiftOperation.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, shift operation.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm.ArmSystemRegister">
            <summary>
                ARM System Register.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.ArmSystemRegister.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, system register.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm.ArmVectorDataType">
            <summary>
                ARM Vector Data Type.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.ArmVectorDataType.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, vector data type.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm.NativeArmInstructionDetail">
            <summary>
                Native ARM Instruction Detail.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.NativeArmInstructionDetail.IsUserMode">
            <summary>
                User Mode Flag.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.NativeArmInstructionDetail.VectorSize">
            <summary>
                Vector Size.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.NativeArmInstructionDetail.VectorDataType">
            <summary>
                Vector Data Type.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.NativeArmInstructionDetail.CpsMode">
            <summary>
                CPS Mode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.NativeArmInstructionDetail.CpsFlag">
            <summary>
                CPS Flag.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.NativeArmInstructionDetail.ConditionCode">
            <summary>
                Condition Code.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.NativeArmInstructionDetail.UpdateFlags">
            <summary>
                Update Flags Flag.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.NativeArmInstructionDetail.WriteBack">
            <summary>
                Write Back Flag.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.NativeArmInstructionDetail.MemoryBarrier">
            <summary>
                Memory Barrier Operation.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.NativeArmInstructionDetail.OperandCount">
            <summary>
                Instruction's Operand Count.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.NativeArmInstructionDetail.Operands">
            <summary>
                Instruction's Operands.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm.NativeArmMemoryOperandValue">
            <summary>
                Native ARM Memory Operand Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.NativeArmMemoryOperandValue.Base">
            <summary>
                Base Register.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.NativeArmMemoryOperandValue.Index">
            <summary>
                Index Register.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.NativeArmMemoryOperandValue.Scale">
            <summary>
                Index Register's Scale.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.NativeArmMemoryOperandValue.Displacement">
            <summary>
                Displacement Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.NativeArmMemoryOperandValue.LeftShift">
            <summary>
                Index Register's Left Shift Value.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm.NativeArmOperand">
            <summary>
                Native ARM Operand.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.NativeArmOperand.VectorIndex">
            <summary>
                Vector Index.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.NativeArmOperand.Shift">
            <summary>
                Shift.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.NativeArmOperand.Type">
            <summary>
                Operand's Type.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.NativeArmOperand.Value">
            <summary>
                Operand's Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.NativeArmOperand.IsSubtracted">
            <summary>
                Operand's Subtracted Flag.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.NativeArmOperand.AccessType">
            <summary>
                Operand's Access Type.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.NativeArmOperand.NeonLane">
            <summary>
                Neon Lane Value.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm.NativeArmOperandShift">
            <summary>
                Native ARM Operand Shift.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.NativeArmOperandShift.Operation">
            <summary>
                Shift Operation.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.NativeArmOperandShift.Value">
            <summary>
                Shift Value.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm.NativeArmOperandValue">
            <summary>
                Native ARM Operand Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.NativeArmOperandValue.Register">
            <summary>
                Register.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.NativeArmOperandValue.Immediate">
            <summary>
                Immediate Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.NativeArmOperandValue.FloatingPoint">
            <summary>
                Floating Point Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.NativeArmOperandValue.Memory">
            <summary>
                Memory Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.NativeArmOperandValue.SetEndOperation">
            <summary>
                SETEND Operation.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.CapstoneDisassembler">
            <summary>
                Capstone Disassembler.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.CapstoneDisassembler.IsArm64Supported">
            <summary>
                Determine if the ARM64 Architecture is Supported.
            </summary>
            <value>
                A boolean true if the ARM64 architecture is supported. A boolean false otherwise.
            </value>
        </member>
        <member name="P:Gee.External.Capstone.CapstoneDisassembler.IsArmSupported">
            <summary>
                Determine if the ARM Architecture is Supported.
            </summary>
            <value>
                A boolean true if the ARM architecture is supported. A boolean false otherwise.
            </value>
        </member>
        <member name="P:Gee.External.Capstone.CapstoneDisassembler.IsDietModeEnabled">
            <summary>
                Determine if Diet Mode is Enabled.
            </summary>
            <value>
                A boolean true if diet mode is enabled. A boolean false otherwise.
            </value>
        </member>
        <member name="P:Gee.External.Capstone.CapstoneDisassembler.IsEvmSupported">
            <summary>
                Determine if the Ethereum EVM Architecture is Supported.
            </summary>
            <value>
                A boolean true if the Ethereum EVM architecture is supported. A boolean false otherwise.
            </value>
        </member>
        <member name="P:Gee.External.Capstone.CapstoneDisassembler.IsM680XSupported">
            <summary>
                Determine if the M680X Architecture is Supported.
            </summary>
            <value>
                A boolean true if the M680X architecture is supported. A boolean false otherwise.
            </value>
        </member>
        <member name="P:Gee.External.Capstone.CapstoneDisassembler.IsM68KSupported">
            <summary>
                Determine if the M68K Architecture is Supported.
            </summary>
            <value>
                A boolean true if the M68K architecture is supported. A boolean false otherwise.
            </value>
        </member>
        <member name="P:Gee.External.Capstone.CapstoneDisassembler.IsMipsSupported">
            <summary>
                Determine if the MIPS Architecture is Supported.
            </summary>
            <value>
                A boolean true if the MIPS architecture is supported. A boolean false otherwise.
            </value>
        </member>
        <member name="P:Gee.External.Capstone.CapstoneDisassembler.IsPowerPcSupported">
            <summary>
                Determine if the PowerPC Architecture is Supported.
            </summary>
            <value>
                A boolean true if the PowerPC architecture is supported. A boolean false otherwise.
            </value>
        </member>
        <member name="P:Gee.External.Capstone.CapstoneDisassembler.IsSparcSupported">
            <summary>
                Determine if the SPARC Architecture is Supported.
            </summary>
            <value>
                A boolean true if the SPARC architecture is supported. A boolean false otherwise.
            </value>
        </member>
        <member name="P:Gee.External.Capstone.CapstoneDisassembler.IsSystemZSupported">
            <summary>
                Determine if the SystemZ Architecture is Supported.
            </summary>
            <value>
                A boolean true if the SystemZ architecture is supported. A boolean false otherwise.
            </value>
        </member>
        <member name="P:Gee.External.Capstone.CapstoneDisassembler.IsTms320C64XSupported">
            <summary>
                Determine if the Tms320C64X Architecture is Supported.
            </summary>
            <value>
                A boolean true if the Tms320C64X architecture is supported. A boolean false otherwise.
            </value>
        </member>
        <member name="P:Gee.External.Capstone.CapstoneDisassembler.IsX86ReduceModeEnabled">
            <summary>
                Determine if X86 Reduce Mode is Enabled.
            </summary>
            <value>
                A boolean true if X86 reduce mode is enabled. A boolean false otherwise.
            </value>
        </member>
        <member name="P:Gee.External.Capstone.CapstoneDisassembler.IsX86Supported">
            <summary>
                Determine if the X86 Architecture is Supported.
            </summary>
            <value>
                A boolean true if the X86 architecture is supported. A boolean false otherwise.
            </value>
        </member>
        <member name="P:Gee.External.Capstone.CapstoneDisassembler.IsXCoreSupported">
            <summary>
                Determine if the XCore Architecture is Supported.
            </summary>
            <value>
                A boolean true if the XCore architecture is supported. A boolean false otherwise.
            </value>
        </member>
        <member name="P:Gee.External.Capstone.CapstoneDisassembler.DisassembleArchitecture">
            <summary>
                Get Disassemble Architecture.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.CapstoneDisassembler.EnableInstructionDetails">
            <summary>
                Enable or Disable Instruction Details.
            </summary>
            <exception cref="T:Gee.External.Capstone.CapstoneException">
                Thrown if the instruction details option could not be set.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.CapstoneDisassembler.EnableSkipDataMode">
            <summary>
                Enable or Disable Skip Data Mode.
            </summary>
            <exception cref="T:Gee.External.Capstone.CapstoneException">
                Thrown if the Skip Data Mode option could not be set.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.CapstoneDisassembler.Handle">
            <summary>
                Get Disassembler's Handle.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.CapstoneDisassembler.InvalidInstructionMnemonic">
            <summary>
                Get and Set Invalid Instruction Mnemonic.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.CapstoneDisassembler.CreateArm64Disassembler(Gee.External.Capstone.Arm64.Arm64DisassembleMode)">
            <summary>
                Create an ARM64 Disassembler.
            </summary>
            <param name="disassembleMode">
                The hardware mode for the disassembler to use.
            </param>
            <returns>
                A ARM disassembler.
            </returns>
            <exception cref="T:Gee.External.Capstone.CapstoneException">
                Thrown if a disassembler could not be created.
            </exception>
            <exception cref="T:System.ArgumentException">
                Thrown if the disassemble mode is invalid or unsupported by the disassemble architecture.
            </exception>
            <exception cref="T:System.OutOfMemoryException">
                Thrown if sufficient memory cannot be allocated to perform the operation as a rare indication that the
                system is under heavy load.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.CapstoneDisassembler.CreateArmDisassembler(Gee.External.Capstone.Arm.ArmDisassembleMode)">
            <summary>
                Create an ARM Disassembler.
            </summary>
            <param name="disassembleMode">
                The hardware mode for the disassembler to use.
            </param>
            <returns>
                A ARM disassembler.
            </returns>
            <exception cref="T:Gee.External.Capstone.CapstoneException">
                Thrown if a disassembler could not be created.
            </exception>
            <exception cref="T:System.ArgumentException">
                Thrown if the disassemble mode is invalid or unsupported by the disassemble architecture.
            </exception>
            <exception cref="T:System.OutOfMemoryException">
                Thrown if sufficient memory cannot be allocated to perform the operation as a rare indication that the
                system is under heavy load.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.CapstoneDisassembler.CreateX86Disassembler(Gee.External.Capstone.X86.X86DisassembleMode)">
            <summary>
                Create an X86 Disassembler.
            </summary>
            <param name="disassembleMode">
                The hardware mode for the disassembler to use.
            </param>
            <returns>
                An X86 disassembler.
            </returns>
            <exception cref="T:Gee.External.Capstone.CapstoneException">
                Thrown if a disassembler could not be created.
            </exception>
            <exception cref="T:System.ArgumentException">
                Thrown if the disassemble mode is invalid or unsupported by the disassemble architecture.
            </exception>
            <exception cref="T:System.OutOfMemoryException">
                Thrown if sufficient memory cannot be allocated to perform the operation as a rare indication that the
                system is under heavy load.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.CapstoneDisassembler.ThrowIfDietModeIsEnabled">
            <summary>
                Throw an Exception if Diet Mode is Enabled.
            </summary>
            <exception cref="T:System.NotSupportedException">
                Thrown if diet mode is enabled.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.CapstoneDisassembler.ThrowIfValueIsNullReference``1(System.String,``0)">
            <summary>
                Throw an Exception if a Value is a Null Reference.
            </summary>
            <typeparam name="T">
                The type of the value.
            </typeparam>
            <param name="name">
                The name of the parameter the value was passed as an argument to.
            </param>
            <param name="value">
                The value.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if the value is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.CapstoneDisassembler.Dispose">
            <summary>
                Dispose Object.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.CapstoneDisassembler`8">
            <summary>
                Capstone Disassembler.
            </summary>
            <typeparam name="TDisassembleMode">
                The type of the hardware mode for the disassembler to use.
            </typeparam>
            <typeparam name="TInstruction">
                The type of the disassembled instructions.
            </typeparam>
            <typeparam name="TInstructionDetail">
                The type of the instructions' details.
            </typeparam>
            <typeparam name="TInstructionGroup">
                The type of the instructions' architecture specific instruction groups.
            </typeparam>
            <typeparam name="TInstructionGroupId">
                The type of the instructions' architecture specific instruction group unique identifiers.
            </typeparam>
            <typeparam name="TInstructionId">
                The type of the instructions' unique identifiers.
            </typeparam>
            <typeparam name="TRegister">
                The type of the instructions' architecture specific registers.
            </typeparam>
            <typeparam name="TRegisterId">
                The type of the instructions' architecture specific register unique identifiers.
            </typeparam>
        </member>
        <member name="F:Gee.External.Capstone.CapstoneDisassembler`8._disassembleArchitecture">
            <summary>
                Disassemble Architecture.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.CapstoneDisassembler`8._disassembleMode">
            <summary>
                Disassemble Mode. 
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.CapstoneDisassembler`8._disassembleSyntax">
            <summary>
                Disassemble Syntax. 
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.CapstoneDisassembler`8._enableInstructionDetails">
            <summary>
                Enable Instruction Details Flag.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.CapstoneDisassembler`8._enableSkipDataMode">
            <summary>
                Enable Skip Data Mode Flag.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.CapstoneDisassembler`8._handle">
            <summary>
                Disassembler's Handle.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.CapstoneDisassembler`8._invalidInstructionMnemonic">
            <summary>
                Invalid Instruction Mnemonic.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.CapstoneDisassembler`8.DisassembleArchitecture">
            <summary>
                Get Disassemble Architecture.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.CapstoneDisassembler`8.DisassembleMode">
            <summary>
                Get Disassemble Mode. 
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.CapstoneDisassembler`8.DisassembleSyntax">
            <summary>
                Get and Set Disassemble Syntax.
            </summary>
            <exception cref="T:Gee.External.Capstone.CapstoneException">
                Thrown if the disassemble syntax option could not be set.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler is disposed.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.CapstoneDisassembler`8.EnableInstructionDetails">
            <summary>
                Enable or Disable Instruction Details.
            </summary>
            <exception cref="T:Gee.External.Capstone.CapstoneException">
                Thrown if the instruction details option could not be set.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler is disposed.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.CapstoneDisassembler`8.EnableSkipDataMode">
            <summary>
                Enable or Disable Skip Data Mode.
            </summary>
            <exception cref="T:Gee.External.Capstone.CapstoneException">
                Thrown if the skip data mode option could not be set.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler is disposed.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.CapstoneDisassembler`8.Handle">
            <summary>
                Get Disassembler's Handle.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.CapstoneDisassembler`8.InvalidInstructionMnemonic">
            <summary>
                Get and Set Invalid Instruction Mnemonic.
            </summary>
            <exception cref="T:System.ArgumentNullException">
                Thrown if the value is a null reference.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.CapstoneDisassembler`8.SkipDataCallback">
            <summary>
                Get and Set Skip Data Callback.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.CapstoneDisassembler`8.#ctor(Gee.External.Capstone.DisassembleArchitecture,`0)">
            <summary>
                Create a Disassembler.
            </summary>
            <param name="disassembleArchitecture">
                The hardware architecture for the disassembler to use.
            </param>
            <param name="disassembleMode">
                The hardware mode for the disassembler to use.
            </param>
            <exception cref="T:Gee.External.Capstone.CapstoneException">
                Thrown if a disassembler could not be created.
            </exception>
            <exception cref="T:System.ArgumentException">
                Thrown if the disassemble architecture is invalid, or if the disassemble mode is invalid or
                unsupported by the disassemble architecture.
            </exception>
            <exception cref="T:System.OutOfMemoryException">
                Thrown if sufficient memory cannot be allocated to perform the operation as a rare indication that the
                system is under heavy load.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.CapstoneDisassembler`8.CreateInstruction(Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Create an Instruction.
            </summary>
            <param name="hInstruction">
                An instruction handle.
            </param>
            <returns>
                An instruction.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.CapstoneDisassembler`8.Disassemble(System.Byte[])">
            <summary>
                Disassemble Binary Code.
            </summary>
            <param name="binaryCode">
                An array of bytes representing the binary code to disassemble.
            </param>
            <returns>
                A an array of disassembled instructions.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if the array of bytes is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.CapstoneDisassembler`8.Dispose">
            <summary>
                Dispose Object.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.CapstoneDisassembler`8.GetInstructionGroupName(`4)">
            <summary>
                Get an Instruction Group's Name.
            </summary>
            <param name="instructionGroupId">
                An instruction group's unique identifier.
            </param>
            <returns>
                The instruction group's name.
            </returns>
            <exception cref="T:System.ArgumentException">
                Thrown if the instruction group's unique identifier is invalid.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler is disposed.
            </exception>
            <exception cref="T:System.NotSupportedException">
                Thrown if diet mode is enabled.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.CapstoneDisassembler`8.GetRegisterName(`7)">
            <summary>
                Get a Register's Name.
            </summary>
            <param name="registerId">
                A register's unique identifier.
            </param>
            <returns>
                The register's name.
            </returns>
            <exception cref="T:System.ArgumentException">
                Thrown if the register's unique identifier is invalid.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler is disposed.
            </exception>
            <exception cref="T:System.NotSupportedException">
                Thrown if diet mode is enabled.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.CapstoneDisassembler`8.Iterate(System.Byte[])">
            <summary>
                Disassemble Binary Code Iteratively.
            </summary>
            <param name="binaryCode">
                An array of bytes representing the binary code to disassemble.
            </param>
            <returns>
                A deferred collection of disassembled instructions.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if the array of bytes is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.CapstoneDisassembler`8.ResetInstructionMnemonic(`5)">
            <summary>
                Reset an Instruction's Mnemonic.
            </summary>
            <param name="instructionId">
                An instruction unique identifier.
            </param>
            <exception cref="T:Gee.External.Capstone.CapstoneException">
                Thrown if the instruction mnemonic could not be reset.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.CapstoneDisassembler`8.SetInstructionMnemonic(`5,System.String)">
            <summary>
                Set an Instruction's Mnemonic.
            </summary>
            <param name="instructionId">
                An instruction's unique identifier.
            </param>
            <param name="instructionMnemonic">
                A mnemonic to associate with the instruction.
            </param>
            <exception cref="T:Gee.External.Capstone.CapstoneException">
                Thrown if the instruction mnemonic could not be set.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if the instruction mnemonic is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.CapstoneDisassembler`8.ThrowIfDisassemblerIsDisposed">
            <summary>
                Throw an Exception if Disassembler is Disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler is disposed.
            </exception>
        </member>
        <member name="T:Gee.External.Capstone.CapstoneException">
            <summary>
                Capstone Exception.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.CapstoneException.#ctor(System.String)">
            <summary>
                Create a Capstone Exception.
            </summary>
            <param name="detailMessage">
                A detail message describing the reason the exception was thrown.
            </param>
        </member>
        <member name="M:Gee.External.Capstone.CapstoneException.#ctor(System.String,System.Exception)">
            <summary>
                Create a Capstone Exception.
            </summary>
            <param name="detailMessage">
                A detail message describing the reason the exception was thrown.
            </param>
            <param name="innerException">
                An exception that is the cause of this exception being thrown.
            </param>
        </member>
        <member name="T:Gee.External.Capstone.DisassembleArchitecture">
            <summary>
                Disassemble Architecture.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.DisassembleArchitecture.Arm">
            <summary>
                ARM Architecture.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.DisassembleArchitecture.Arm64">
            <summary>
                ARM64 Architecture.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.DisassembleArchitecture.Mips">
            <summary>
               MIPS Architecture.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.DisassembleArchitecture.X86">
            <summary>
                X86 Architecture.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.DisassembleArchitecture.PowerPc">
            <summary>
                PowerPC Architecture.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.DisassembleArchitecture.Sparc">
            <summary>
                Sparc Architecture.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.DisassembleArchitecture.SystemZ">
            <summary>
                SystemZ Architecture.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.DisassembleArchitecture.XCore">
            <summary>
                XCore Architecture.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.DisassembleArchitecture.M68K">
            <summary>
                68K Architecture.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.DisassembleArchitecture.Tms320C64X">
            <summary>
                TMS320C64x Architecture.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.DisassembleArchitecture.M680X">
            <summary>
                680X Architecture.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.DisassembleArchitecture.Evm">
            <summary>
                Ethereum EVM Architecture.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.DisassembleSyntax">
            <summary>
                Disassemble Syntax.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Gee.External.Capstone.DisassembleSyntax.Att" -->
        <member name="F:Gee.External.Capstone.DisassembleSyntax.Intel">
            <summary>
                Indicates a disassembler should use Intel syntax for generated assembly code.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.DisassembleSyntax.Masm">
            <summary>
                Indicates a disassembler should use MASM syntax for generated assembly code.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Instruction`7">
            <summary>
                Instruction.
            </summary>
            <typeparam name="TSelf">
                This type.
            </typeparam>
            <typeparam name="TDetail">
                The type of the instruction's details.
            </typeparam>
            <typeparam name="TGroup">
                The type of the instruction's architecture specific instruction groups.
            </typeparam>
            <typeparam name="TGroupId">
                The type of the instruction's architecture specific instruction group unique identifiers.
            </typeparam>
            <typeparam name="TId">
                The type of the instruction's unique identifier.
            </typeparam>
            <typeparam name="TRegister">
                The type of the instruction's architecture specific registers.
            </typeparam>
            <typeparam name="TRegisterId">
                The type of the instruction's architecture specific register unique identifiers.
            </typeparam>
        </member>
        <member name="F:Gee.External.Capstone.Instruction`7._mnemonic">
            <summary>
                Instruction's Mnemonic.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Instruction`7._operand">
            <summary>
                Instruction's Operand Text.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Instruction`7.Address">
            <summary>
                Get Instruction's Address.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Instruction`7.Bytes">
            <summary>
                Get Instruction's Machine Bytes.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Instruction`7.Details">
            <summary>
                Get Instruction's Details.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Instruction`7.Id">
            <summary>
                Get Instruction's Unique Identifier.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Instruction`7.IsDietModeEnabled">
            <summary>
                Determine if Diet Mode is Enabled.
            </summary>
            <value>
                A boolean true if diet mode is enabled. A boolean false otherwise.
            </value>
        </member>
        <member name="P:Gee.External.Capstone.Instruction`7.Mnemonic">
            <summary>
                Get Instruction's Mnemonic.
            </summary>
            <exception cref="T:System.NotSupportedException">
                Thrown if diet mode is enabled.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.Instruction`7.Operand">
            <summary>
                Get Instruction's Operand Text.
            </summary>
            <exception cref="T:System.NotSupportedException">
                Thrown if diet mode is enabled.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.Instruction`7.#ctor(Gee.External.Capstone.InstructionBuilder{`1,`2,`3,`0,`4,`5,`6})">
            <summary>
                Create an Instruction.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.Instruction`7.BelongsToGroup(System.String)">
            <summary>
                Determine if Instruction Belongs to an Instruction Group.
            </summary>
            <param name="instructionGroupName">
                An instruction group's name.
            </param>
            <returns>
                A boolean true if the instruction belongs to the instruction group. A boolean false otherwise.
            </returns>
            <exception cref="T:System.NotSupportedException">
                Thrown if diet mode is enabled.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.Instruction`7.BelongsToGroup(`3)">
            <summary>
                Determine if Instruction Belongs to an Instruction Group.
            </summary>
            <param name="instructionGroupId">
                An instruction group's unique identifier.
            </param>
            <returns>
                A boolean true if the instruction belongs to the instruction group. A boolean false otherwise.
            </returns>
            <exception cref="T:System.NotSupportedException">
                Thrown if diet mode is enabled.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.Instruction`7.IsRegisterExplicitlyRead(System.String)">
            <summary>
                Determine if a Register Was Explicitly Read.
            </summary>
            <param name="registerName">
                A register's name.
            </param>
            <returns>
                A boolean true if the register was explicitly read by the instruction. A boolean false otherwise.
            </returns>
            <exception cref="T:System.NotSupportedException">
                Thrown if diet mode is enabled.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.Instruction`7.IsRegisterExplicitlyRead(`6)">
            <summary>
                Determine if a Register Was Explicitly Read.
            </summary>
            <param name="registerId">
                A register's unique identifier.
            </param>
            <returns>
                A boolean true if the register was explicitly read by the instruction. A boolean false otherwise.
            </returns>
            <exception cref="T:System.NotSupportedException">
                Thrown if diet mode is enabled.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.Instruction`7.IsRegisterExplicitlyWritten(System.String)">
            <summary>
                Determine if a Register Was Explicitly Modified.
            </summary>
            <param name="registerName">
                A register's name.
            </param>
            <returns>
                A boolean true if the register was explicitly modified by the instruction. A boolean false otherwise.
            </returns>
            <exception cref="T:System.NotSupportedException">
                Thrown if diet mode is enabled.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.Instruction`7.IsRegisterExplicitlyWritten(`6)">
            <summary>
                Determine if a Register Was Explicitly Modified.
            </summary>
            <param name="registerId">
                A register's unique identifier.
            </param>
            <returns>
                A boolean true if the register was explicitly modified by the instruction. A boolean false otherwise.
            </returns>
            <exception cref="T:System.NotSupportedException">
                Thrown if diet mode is enabled.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.Instruction`7.IsRegisterImplicitlyRead(System.String)">
            <summary>
                Determine if a Register Was Implicitly Read.
            </summary>
            <param name="registerName">
                A register's name.
            </param>
            <returns>
                A boolean true if the register was implicitly read by the instruction. A boolean false otherwise.
            </returns>
            <exception cref="T:System.NotSupportedException">
                Thrown if diet mode is enabled.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.Instruction`7.IsRegisterImplicitlyRead(`6)">
            <summary>
                Determine if a Register Was Implicitly Read.
            </summary>
            <param name="registerId">
                A register's unique identifier.
            </param>
            <returns>
                A boolean true if the register was implicitly read by the instruction. A boolean false otherwise.
            </returns>
            <exception cref="T:System.NotSupportedException">
                Thrown if diet mode is enabled.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.Instruction`7.IsRegisterImplicitlyWritten(System.String)">
            <summary>
                Determine if a Register Was Implicitly Modified.
            </summary>
            <param name="registerName">
                A register's name.
            </param>
            <returns>
                A boolean true if the register was implicitly modified by the instruction. A boolean false otherwise.
            </returns>
            <exception cref="T:System.NotSupportedException">
                Thrown if diet mode is enabled.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.Instruction`7.IsRegisterImplicitlyWritten(`6)">
            <summary>
                Determine if a Register Was Implicitly Modified.
            </summary>
            <param name="registerId">
                A register's unique identifier.
            </param>
            <returns>
                A boolean true if the register was implicitly modified by the instruction. A boolean false otherwise.
            </returns>
            <exception cref="T:System.NotSupportedException">
                Thrown if diet mode is enabled.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.Instruction`7.IsRegisterRead(System.String)">
            <summary>
                Determine if a Register Was Read Explicitly or Implicitly.
            </summary>
            <param name="registerName">
                A register's name.
            </param>
            <returns>
                A boolean true if the register was explicitly or implicitly read by the instruction. A boolean false
                otherwise.
            </returns>
            <exception cref="T:System.NotSupportedException">
                Thrown if diet mode is enabled.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.Instruction`7.IsRegisterRead(`6)">
            <summary>
                Determine if a Register Was Read Explicitly or Implicitly.
            </summary>
            <param name="registerId">
                A register's unique identifier.
            </param>
            <returns>
                A boolean true if the register was explicitly or implicitly read by the instruction. A boolean false
                otherwise.
            </returns>
            <exception cref="T:System.NotSupportedException">
                Thrown if diet mode is enabled.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.Instruction`7.IsRegisterWritten(System.String)">
            <summary>
                Determine if a Register Was Modified Explicitly or Implicitly.
            </summary>
            <param name="registerName">
                A register's name.
            </param>
            <returns>
                A boolean true if the register was explicitly or implicitly modified by the instruction. A boolean
                false otherwise.
            </returns>
            <exception cref="T:System.NotSupportedException">
                Thrown if diet mode is enabled.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.Instruction`7.IsRegisterWritten(`6)">
            <summary>
                Determine if a Register Was Modified Explicitly or Implicitly.
            </summary>
            <param name="registerId">
                A register's unique identifier.
            </param>
            <returns>
                A boolean true if the register was explicitly or implicitly modified by the instruction. A boolean
                false otherwise.
            </returns>
            <exception cref="T:System.NotSupportedException">
                Thrown if diet mode is enabled.
            </exception>
        </member>
        <member name="T:Gee.External.Capstone.InstructionBuilder`7">
            <summary>
                Instruction Builder.
            </summary>
            <typeparam name="TDetail">
                The type of the instruction's details.
            </typeparam>
            <typeparam name="TGroup">
                The type of the instruction's architecture specific instruction groups.
            </typeparam>
            <typeparam name="TGroupId">
                The type of the instruction's architecture specific instruction group unique identifiers.
            </typeparam>
            <typeparam name="TInstruction">
                The type of the instruction.
            </typeparam>
            <typeparam name="TId">
                The type of the instruction's unique identifier.
            </typeparam>
            <typeparam name="TRegister">
                The type of the instruction's architecture specific registers.
            </typeparam>
            <typeparam name="TRegisterId">
                The type of the instruction's architecture specific register unique identifiers.
            </typeparam>
        </member>
        <member name="P:Gee.External.Capstone.InstructionBuilder`7.Address">
            <summary>
                Get and Set Instruction's Address.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.InstructionBuilder`7.Bytes">
            <summary>
                Get and Set Instruction's Machine Bytes.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.InstructionBuilder`7.Details">
            <summary>
                Get and Set Instruction's Details.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.InstructionBuilder`7.Id">
            <summary>
                Get and Set Instruction's Unique Identifier.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.InstructionBuilder`7.Mnemonic">
            <summary>
                Get and Set Instruction's Mnemonic Text.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.InstructionBuilder`7.Operand">
            <summary>
                Get and Set Instruction's Operand Text.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.InstructionBuilder`7.#ctor">
            <summary>
                Create an Instruction Builder.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.InstructionBuilder`7.Build(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Build an Instruction.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="hInstruction">
                An instruction handle.
            </param>
        </member>
        <member name="M:Gee.External.Capstone.InstructionBuilder`7.CreateDetails(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Create Instruction's Details.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="hInstruction">
                An instruction handle.
            </param>
            <returns>
                The instruction's details.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.InstructionBuilder`7.CreateId(System.Int32)">
            <summary>
                Create Instruction's Unique Identifier.
            </summary>
            <param name="id">
                An instruction's unique identifier.
            </param>
            <returns>
                The instruction's unique identifier.
            </returns>
        </member>
        <member name="T:Gee.External.Capstone.InstructionDetail`7">
            <summary>
                Disassembled Instruction Detail.
            </summary>
            <typeparam name="TSelf">
                This type.
            </typeparam>
            <typeparam name="TGroup">
                The type of the instruction's architecture specific instruction groups.
            </typeparam>
            <typeparam name="TGroupId">
                The type of the instruction's architecture specific instruction group unique identifiers.
            </typeparam>
            <typeparam name="TInstruction">
                The type of the instruction.
            </typeparam>
            <typeparam name="TInstructionId">
                The type of the instruction's unique identifier.
            </typeparam>
            <typeparam name="TRegister">
                The type of the instruction's architecture specific registers.
            </typeparam>
            <typeparam name="TRegisterId">
                The type of the instruction's architecture specific register unique identifiers.
            </typeparam>
        </member>
        <member name="F:Gee.External.Capstone.InstructionDetail`7._allReadRegisters">
            <summary>
                Read Registers.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.InstructionDetail`7._allWrittenRegisters">
            <summary>
                Written Registers.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.InstructionDetail`7._explicitlyReadRegisters">
            <summary>
                Instruction's Explicitly Read Registers.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.InstructionDetail`7._explicitlyWrittenRegisters">
            <summary>
                Instruction's Explicitly Written Registers.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.InstructionDetail`7._groups">
            <summary>
                Instruction's Groups.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.InstructionDetail`7._implicitlyReadRegisters">
            <summary>
                Instruction's Implicitly Read Registers.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.InstructionDetail`7._implicitlyWrittenRegisters">
            <summary>
                Instruction's Implicitly Written Registers.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.InstructionDetail`7.AllReadRegisters">
            <summary>
                Get All Read Registers.
            </summary>
            <exception cref="T:System.NotSupportedException">
                Thrown if diet mode is enabled.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.InstructionDetail`7.AllWrittenRegisters">
            <summary>
                Get All Written Registers.
            </summary>
            <exception cref="T:System.NotSupportedException">
                Thrown if diet mode is enabled.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.InstructionDetail`7.ExplicitlyReadRegisters">
            <summary>
                Get Instruction's Explicitly Read Registers.
            </summary>
            <exception cref="T:System.NotSupportedException">
                Thrown if diet mode is enabled.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.InstructionDetail`7.ExplicitlyWrittenRegisters">
            <summary>
                Get Instruction's Explicitly Written Registers.
            </summary>
            <exception cref="T:System.NotSupportedException">
                Thrown if diet mode is enabled.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.InstructionDetail`7.Groups">
            <summary>
                Get Instruction's Groups.
            </summary>
            <exception cref="T:System.NotSupportedException">
                Thrown if diet mode is enabled.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.InstructionDetail`7.ImplicitlyReadRegisters">
            <summary>
                Get Instruction's Implicitly Read Registers.
            </summary>
            <exception cref="T:System.NotSupportedException">
                Thrown if diet mode is enabled.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.InstructionDetail`7.ImplicitlyWrittenRegisters">
            <summary>
                Get Instruction's Implicitly Written Registers.
            </summary>
            <exception cref="T:System.NotSupportedException">
                Thrown if diet mode is enabled.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.InstructionDetail`7.IsDietModeEnabled">
            <summary>
                Determine if Diet Mode is Enabled.
            </summary>
            <value>
                A boolean true if diet mode is enabled. A boolean false otherwise.
            </value>
        </member>
        <member name="M:Gee.External.Capstone.InstructionDetail`7.#ctor(Gee.External.Capstone.InstructionDetailBuilder{`0,`1,`2,`3,`4,`5,`6})">
            <summary>
                Create an Instruction Detail.
            </summary>
            <param name="builder">
                A builder to initialize the object with.
            </param>
        </member>
        <member name="M:Gee.External.Capstone.InstructionDetail`7.BelongsToGroup(System.String)">
            <summary>
                Determine if Instruction Belongs to an Instruction Group.
            </summary>
            <param name="instructionGroupName">
                An instruction group's name.
            </param>
            <returns>
                A boolean true if the instruction belongs to the instruction group. A boolean false otherwise.
            </returns>
            <exception cref="T:System.NotSupportedException">
                Thrown if diet mode is enabled.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.InstructionDetail`7.BelongsToGroup(`2)">
            <summary>
                Determine if Instruction Belongs to an Instruction Group.
            </summary>
            <param name="instructionGroupId">
                An instruction group's unique identifier.
            </param>
            <returns>
                A boolean true if the instruction belongs to the instruction group. A boolean false otherwise.
            </returns>
            <exception cref="T:System.NotSupportedException">
                Thrown if diet mode is enabled.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.InstructionDetail`7.IsRegisterExplicitlyRead(System.String)">
            <summary>
                Determine if a Register Was Explicitly Read.
            </summary>
            <param name="registerName">
                A register's name.
            </param>
            <returns>
                A boolean true if the register was explicitly read by the instruction. A boolean false otherwise.
            </returns>
            <exception cref="T:System.NotSupportedException">
                Thrown if diet mode is enabled.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.InstructionDetail`7.IsRegisterExplicitlyRead(`6)">
            <summary>
                Determine if a Register Was Explicitly Read.
            </summary>
            <param name="registerId">
                A register's unique identifier.
            </param>
            <returns>
                A boolean true if the register was explicitly read by the instruction. A boolean false otherwise.
            </returns>
            <exception cref="T:System.NotSupportedException">
                Thrown if diet mode is enabled.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.InstructionDetail`7.IsRegisterExplicitlyWritten(System.String)">
            <summary>
                Determine if a Register Was Explicitly Modified.
            </summary>
            <param name="registerName">
                A register's name.
            </param>
            <returns>
                A boolean true if the register was explicitly modified by the instruction. A boolean false otherwise.
            </returns>
            <exception cref="T:System.NotSupportedException">
                Thrown if diet mode is enabled.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.InstructionDetail`7.IsRegisterExplicitlyWritten(`6)">
            <summary>
                Determine if a Register Was Explicitly Modified.
            </summary>
            <param name="registerId">
                A register's unique identifier.
            </param>
            <returns>
                A boolean true if the register was explicitly modified by the instruction. A boolean false otherwise.
            </returns>
            <exception cref="T:System.NotSupportedException">
                Thrown if diet mode is enabled.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.InstructionDetail`7.IsRegisterImplicitlyRead(System.String)">
            <summary>
                Determine if a Register Was Implicitly Read.
            </summary>
            <param name="registerName">
                A register's name.
            </param>
            <returns>
                A boolean true if the register was implicitly read by the instruction. A boolean false otherwise.
            </returns>
            <exception cref="T:System.NotSupportedException">
                Thrown if diet mode is enabled.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.InstructionDetail`7.IsRegisterImplicitlyRead(`6)">
            <summary>
                Determine if a Register Was Implicitly Read.
            </summary>
            <param name="registerId">
                A register's unique identifier.
            </param>
            <returns>
                A boolean true if the register was implicitly read by the instruction. A boolean false otherwise.
            </returns>
            <exception cref="T:System.NotSupportedException">
                Thrown if diet mode is enabled.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.InstructionDetail`7.IsRegisterImplicitlyWritten(System.String)">
            <summary>
                Determine if a Register Was Implicitly Modified.
            </summary>
            <param name="registerName">
                A register's name.
            </param>
            <returns>
                A boolean true if the register was implicitly modified by the instruction. A boolean false otherwise.
            </returns>
            <exception cref="T:System.NotSupportedException">
                Thrown if diet mode is enabled.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.InstructionDetail`7.IsRegisterImplicitlyWritten(`6)">
            <summary>
                Determine if a Register Was Implicitly Modified.
            </summary>
            <param name="registerId">
                A register's unique identifier.
            </param>
            <returns>
                A boolean true if the register was implicitly modified by the instruction. A boolean false otherwise.
            </returns>
            <exception cref="T:System.NotSupportedException">
                Thrown if diet mode is enabled.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.InstructionDetail`7.IsRegisterRead(System.String)">
            <summary>
                Determine if a Register Was Read Explicitly or Implicitly.
            </summary>
            <param name="registerName">
                A register's name.
            </param>
            <returns>
                A boolean true if the register was explicitly or implicitly read by the instruction. A boolean false
                otherwise.
            </returns>
            <exception cref="T:System.NotSupportedException">
                Thrown if diet mode is enabled.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.InstructionDetail`7.IsRegisterRead(`6)">
            <summary>
                Determine if a Register Was Read Explicitly or Implicitly.
            </summary>
            <param name="registerId">
                A register's unique identifier.
            </param>
            <returns>
                A boolean true if the register was explicitly or implicitly read by the instruction. A boolean false
                otherwise.
            </returns>
            <exception cref="T:System.NotSupportedException">
                Thrown if diet mode is enabled.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.InstructionDetail`7.IsRegisterWritten(System.String)">
            <summary>
                Determine if a Register Was Modified Explicitly or Implicitly.
            </summary>
            <param name="registerName">
                A register's name.
            </param>
            <returns>
                A boolean true if the register was explicitly or implicitly modified by the instruction. A boolean
                false otherwise.
            </returns>
            <exception cref="T:System.NotSupportedException">
                Thrown if diet mode is enabled.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.InstructionDetail`7.IsRegisterWritten(`6)">
            <summary>
                Determine if a Register Was Modified Explicitly or Implicitly.
            </summary>
            <param name="registerId">
                A register's unique identifier.
            </param>
            <returns>
                A boolean true if the register was explicitly or implicitly modified by the instruction. A boolean
                false otherwise.
            </returns>
            <exception cref="T:System.NotSupportedException">
                Thrown if diet mode is enabled.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.InstructionDetail`7.OnExplicitlyReadRegistersLazyInitialization">
            <summary>
                On Instruction's Explicitly Read Registers Lazy Initialization.
            </summary>
            <returns>
                The instruction's explicitly read registers.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.InstructionDetail`7.OnExplicitlyWrittenRegistersLazyInitialization">
            <summary>
                On Instruction's Explicitly Written Registers Lazy Initialization.
            </summary>
            <returns>
                The instruction's explicitly written registers.
            </returns>
        </member>
        <member name="T:Gee.External.Capstone.InstructionDetailBuilder`7">
            <summary>
                Instruction Detail Builder.
            </summary>
            <typeparam name="TDetail">
                The type of the instruction's details.
            </typeparam>
            <typeparam name="TGroup">
                The type of the instruction's architecture specific instruction groups.
            </typeparam>
            <typeparam name="TGroupId">
                The type of the instruction's architecture specific instruction group unique identifiers.
            </typeparam>
            <typeparam name="TInstruction">
                The type of the instruction.
            </typeparam>
            <typeparam name="TInstructionId">
                The type of the instruction's unique identifier.
            </typeparam>
            <typeparam name="TRegister">
                The type of the instruction's architecture specific registers.
            </typeparam>
            <typeparam name="TRegisterId">
                The type of the instruction's architecture specific register unique identifiers.
            </typeparam>
        </member>
        <member name="P:Gee.External.Capstone.InstructionDetailBuilder`7.AllReadRegisters">
            <summary>
                Get and Set All Read Registers.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.InstructionDetailBuilder`7.AllWrittenRegisters">
            <summary>
                Get and Set All Written Registers.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.InstructionDetailBuilder`7.Groups">
            <summary>
                Get and Set Instruction's Groups.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.InstructionDetailBuilder`7.ImplicitlyReadRegisters">
            <summary>
                Get and Set Instruction's Implicitly Read Registers.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.InstructionDetailBuilder`7.ImplicitlyWrittenRegisters">
            <summary>
                Get and Set Instruction's Implicitly Written Registers.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.InstructionDetailBuilder`7.Build(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Build an Instruction Detail.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="hInstruction">
                An instruction handle.
            </param>
        </member>
        <member name="M:Gee.External.Capstone.InstructionDetailBuilder`7.CreateInstructionGroup(Gee.External.Capstone.CapstoneDisassembler,System.Byte)">
            <summary>
                Create an Instruction Group.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="instructionGroupId">
                An instruction group's unique identifier.
            </param>
            <returns>
                An instruction group.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.InstructionDetailBuilder`7.CreateRegister(Gee.External.Capstone.CapstoneDisassembler,System.Int16)">
            <summary>
                Create a Register.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="registerId">
                A register's unique identifier.
            </param>
            <returns>
                A register.
            </returns>
        </member>
        <member name="T:Gee.External.Capstone.InstructionGroup`1">
            <summary>
                Instruction Group.
            </summary>
            <typeparam name="TId">
                The type of the instruction group's unique identifiers.
            </typeparam>
        </member>
        <member name="F:Gee.External.Capstone.InstructionGroup`1._id">
            <summary>
                Instruction Group's Unique Identifier.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.InstructionGroup`1._name">
            <summary>
                Instruction Group's Name.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.InstructionGroup`1.Id">
            <summary>
                Get Instruction Group's Unique Identifier.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.InstructionGroup`1.IsDietModeEnabled">
            <summary>
                Determine if Diet Mode is Enabled.
            </summary>
            <value>
                A boolean true if diet mode is enabled. A boolean false otherwise.
            </value>
        </member>
        <member name="P:Gee.External.Capstone.InstructionGroup`1.Name">
            <summary>
                Get Instruction Group's Name.
            </summary>
            <exception cref="T:System.NotSupportedException">
                Thrown if diet mode is enabled.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.InstructionGroup`1.#ctor(`0,System.String)">
            <summary>
                Create an Instruction Group.
            </summary>
            <param name="id">
                The instruction group's unique identifier.
            </param>
            <param name="name">
                The instruction group's name.
            </param>
        </member>
        <member name="M:Gee.External.Capstone.InstructionGroup`1.Equals(System.Object)">
            <summary>
                Determine if This Object is Equal to Another Object.
            </summary>
            <param name="object">
                An object to compare to. Should not be a null reference.
            </param>
            <returns>
                A boolean true if this object is equal to the object. A boolean false otherwise.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.InstructionGroup`1.GetHashCode">
            <summary>
                Get Object's Hash Code.
            </summary>
            <returns>
                The object's hash code.
            </returns>
        </member>
        <member name="T:Gee.External.Capstone.MarshalExtension">
            <summary>
                Marshal Extension.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.MarshalExtension.AllocHGlobal``1">
            <summary>
                Allocate Memory For a Structure.
            </summary>
            <typeparam name="T">
                The structure's type.
            </typeparam>
            <returns>
                A pointer to the allocated memory.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.MarshalExtension.AllocHGlobal``1(System.Int32)">
            <summary>
                Allocate Memory For a Structure.
            </summary>
            <param name="size">
                The collection's size.
            </param>
            <typeparam name="T">
                The structure's type.
            </typeparam>
            <returns>
                A pointer to the allocated memory.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.MarshalExtension.FreePtrToStructure``1(System.IntPtr)">
            <summary>
                Marshal a Pointer to a Structure and Free Memory.
            </summary>
            <typeparam name="T">
                The destination structure's type.
            </typeparam>
            <param name="p">
                The pointer to marshal.
            </param>
            <returns>
                The destination structure.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.MarshalExtension.PtrToStructure``1(System.IntPtr)">
            <summary>
                Marshal a Pointer to a Structure.
            </summary>
            <typeparam name="T">
                The destination structure's type.
            </typeparam>
            <param name="p">
                The pointer to marshal.
            </param>
            <returns>
                The destination structure.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.MarshalExtension.PtrToStructure``1(System.IntPtr,System.Int32)">
            <summary>
                Marshal a Pointer to a Collection of Structures.
            </summary>
            <typeparam name="T">
                The collection's type.
            </typeparam>
            <param name="p">
                A pointer to a collection. The pointer should be initialized to the collection's starting address.
            </param>
            <param name="size">
                The collection's size.
            </param>
            <returns>
                The destination collection.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.MarshalExtension.SizeOf``1">
            <summary>
                Get a Type's Size.
            </summary>
            <typeparam name="T">
                The type.
            </typeparam>
            <returns>
                The type's size, in bytes.
            </returns>
        </member>
        <member name="T:Gee.External.Capstone.NativeCapstone">
            <summary>
                Native Capstone.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeCapstone.MagicInstructionArchitectureDetailsFieldOffset">
            <summary>
                Magic Instruction Architecture Details Field Offset.
            </summary>
            <remarks>
                <para>
                    Represents the offset, in bytes, of <c>NativeInstructionDetail.X86|Arm64|...</c>. In the Capstone
                    API, those fields are defined by a nested anonymous union defined by <c>cs_detail</c>. A
                    poor-man's analysis of <c>cs_detail</c> has indicated that all fields defined by it are aligned
                    along 8 byte boundaries. As such, poor-man's pointer arithmetic has concluded that
                    <c>NativeInstructionDetail.X86|Arm64|...</c> are accessible at this offset.
                </para>
                <para>
                    It seems the .NET Marshaller marshals <c>cs_detail</c> to <c>NativeInstructionDetail</c>
                    perfectly except for <c>NativeInstructionDetail.X86|Arm64|...</c>! Those fields are always set to
                    garbage data, indicating the .NET Marshaller is marshaling them from incorrect memory locations.
                    We've no idea why! As such, <c>NativeInstructionDetail.X86|Arm64|...</c> are not defined by the
                    Capstone.NET API and are instead read manually from this offset.
                </para>
            </remarks>
        </member>
        <member name="M:Gee.External.Capstone.NativeCapstone.CreateDisassembler(Gee.External.Capstone.DisassembleArchitecture,Gee.External.Capstone.NativeDisassembleMode)">
            <summary>
                Create a Disassembler.
            </summary>
            <param name="disassembleArchitecture">
                The hardware architecture for the disassembler to use.
            </param>
            <param name="disassembleMode">
                The hardware mode for the disassembler to use.
            </param>
            <returns>
                A disassembler handle.
            </returns>
            <exception cref="T:Gee.External.Capstone.CapstoneException">
                Thrown if a disassembler could not be created.
            </exception>
            <exception cref="T:System.ArgumentException">
                Thrown if the disassemble architecture is invalid, or if the disassemble mode is invalid or
                unsupported by the disassemble architecture.
            </exception>
            <exception cref="T:System.OutOfMemoryException">
                Thrown if sufficient memory cannot be allocated to perform the operation as a rare indication that the
                system is under heavy load.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.NativeCapstone.CreateInstruction(Gee.External.Capstone.NativeDisassemblerHandle)">
            <summary>
                Create an Instruction..
            </summary>
            <param name="hDisassembler">
                A disassembler handle.
            </param>
            <returns>
                An instruction handle.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler handle is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.NativeCapstone.GetAccessedRegisters(Gee.External.Capstone.NativeDisassemblerHandle,Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Get an Instruction's Accessed Registers.
            </summary>
            <param name="hDisassembler">
                A disassembler handle.
            </param>
            <param name="hInstruction">
                An instruction handle.
            </param>
            <returns>
                A 2-tuple, where the first item is an array of the instruction's read registers and the second item is
                an array of the instruction's written registers.
            </returns>
            <exception cref="T:Gee.External.Capstone.CapstoneException">
                Thrown if the instruction's accessed registers could not be retrieved.
            </exception>
            <exception cref="T:System.ArgumentException">
                Thrown if the disassembler handle is invalid.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the instruction was disassembled when Instruction Details Mode was disabled, or if the
                instruction was disassembled when Skip Data Mode was enabled.
            </exception>
            <exception cref="T:System.NotSupportedException">
                Thrown if Diet Mode is enabled, or if the disassembler's hardware architecture does not support the
                operation.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler handle is disposed, or if the instruction handle is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.NativeCapstone.GetInstruction(Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Get an Instruction.
            </summary>
            <param name="hInstruction">
                An instruction handle.
            </param>
            <returns>
                An instruction.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.NativeCapstone.GetInstructionDetail(Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Get an Instruction's Details.
            </summary>
            <param name="hInstruction">
                An instruction handle.
            </param>
            <returns>
                The instruction's details. A null reference indicates the instruction was disassembled without
                details.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.NativeCapstone.GetInstructionDetail``1(Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Get an Instruction's Details.
            </summary>
            <typeparam name="TInstructionDetail">
                The type of the instruction's details.
            </typeparam>
            <param name="hInstruction">
                An instruction handle.
            </param>
            <returns>
                The instruction's details. A null reference indicates the instruction was disassembled without
                details.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.NativeCapstone.GetInstructionDetail(Gee.External.Capstone.NativeInstruction@)">
            <summary>
                Get an Instruction's Details.
            </summary>
            <param name="instruction">
                An instruction.
            </param>
            <returns>
                The instruction's details. A null reference indicates the instruction was disassembled without
                details.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.NativeCapstone.GetInstructionDetail``1(Gee.External.Capstone.NativeInstruction@)">
            <summary>
                Get an Instruction's Architecture Specific Details.
            </summary>
            <typeparam name="TInstructionDetails">
                The type of the instruction's architecture specific details.
            </typeparam>
            <param name="instruction">
                An instruction.
            </param>
            <returns>
                The instruction's architecture specific details. A null reference indicates the instruction was
                disassembled without its details. 
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.NativeCapstone.GetInstructionGroupName(Gee.External.Capstone.NativeDisassemblerHandle,System.Int32)">
            <summary>
                Get an Instruction Group's Name.
            </summary>
            <param name="hDisassembler">
                A disassembler handle.
            </param>
            <param name="instructionGroupId">
                An instruction group's unique identifier.
            </param>
            <returns>
                The instruction group's name. A null reference if the disassembler handle is invalid, or if the
                instruction group's unique identifier is invalid.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler handle is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.NativeCapstone.GetRegisterName(Gee.External.Capstone.NativeDisassemblerHandle,System.Int32)">
            <summary>
                Get a Register's Name.
            </summary>
            <param name="hDisassembler">
                A disassembler handle.
            </param>
            <param name="registerId">
                A register unique identifier.
            </param>
            <returns>
                The register's name. A null reference if the disassembler handle is invalid, or if the register unique
                identifier is invalid.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler handle is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.NativeCapstone.Iterate(Gee.External.Capstone.NativeDisassemblerHandle,System.Byte[],System.Int32@,System.Int64@,Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Disassemble Binary Code Iteratively.
            </summary>
            <param name="hDisassembler">
                A disassembler handle.
            </param>
            <param name="binaryCode">
                A buffer indicating the binary code to disassemble.
            </param>
            <param name="binaryCodeOffset">
                The index of the instruction to disassemble in the binary code buffer . If the instruction is
                disassembled successfully, this value will be updated to reflect the index of the next instruction to
                disassemble in the binary code buffer. If the updated value is less than the length of the binary code
                buffer, you can safely invoke this method with the updated value to disassemble the next instruction.
            </param>
            <param name="address">
                The address of the instruction. If the instruction is disassembled successfully, this value will be
                updated to reflect the address of the next instruction to disassemble in the binary code buffer.
            </param>
            <param name="hInstruction">
                An instruction handle.
            </param>
            <returns>
                A boolean true if an instruction was disassembled successfully. A boolean false otherwise.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler handle is disposed, or if the instruction handle is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.NativeCapstone.Query(Gee.External.Capstone.NativeQueryOption)">
            <summary>
                Query an Option.
            </summary>
            <param name="queryOption">
                An option to query.
            </param>
            <returns>
                A boolean true if the option is supported. A boolean false otherwise.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.NativeCapstone.SetDisassemblerOption(Gee.External.Capstone.NativeDisassemblerHandle,Gee.External.Capstone.NativeDisassemblerOptionType,Gee.External.Capstone.NativeDisassemblerOptionValue)">
            <summary>
                Set a Disassembler Option.
            </summary>
            <param name="hDisassembler">
                A disassembler handle.
            </param>
            <param name="optionType">
                A type of option to set.
            </param>
            <param name="optionValue">
                A value to set the option to.
            </param>
            <exception cref="T:Gee.External.Capstone.CapstoneException">
                Thrown if the option could not be set.
            </exception>
            <exception cref="T:System.ArgumentException">
                Thrown if the disassembler handle is invalid, or if the option is invalid.
            </exception>
            <exception cref="T:System.NotSupportedException">
                Thrown if the option is equal to <see cref="F:Gee.External.Capstone.NativeDisassemblerOptionType.SetSkipDataConfig" />.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler handle is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.NativeCapstone.SetInstructionMnemonicOption(Gee.External.Capstone.NativeDisassemblerHandle,Gee.External.Capstone.NativeInstructionMnemonicOptionValue@)">
            <summary>
                Set Disassembler Instruction Mnemonic Option.
            </summary>
            <param name="hDisassembler">
                A disassembler handle.
            </param>
            <param name="optionValue">
                A value to set the instruction mnemonic option to.
            </param>
            <exception cref="T:Gee.External.Capstone.CapstoneException">
                Thrown if the instruction mnemonic option could not be set.
            </exception>
            <exception cref="T:System.ArgumentException">
                Thrown if the disassembler handle is invalid.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler handle is disposed.
            </exception>
        </member>
        <member name="T:Gee.External.Capstone.NativeCapstoneImport">
            <summary>
                Native Capstone Import.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.NativeCapstoneImport.CloseDisassembler(System.IntPtr@)">
            <summary>
                Close a Disassembler
            </summary>
            <param name="pDissembler">
                A pointer to a disassembler.
            </param>
            <returns>
                A result code indicating the result of the operation.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.NativeCapstoneImport.CreateDisassembler(Gee.External.Capstone.DisassembleArchitecture,Gee.External.Capstone.NativeDisassembleMode,System.IntPtr@)">
            <summary>
                Create a Disassembler.
            </summary>
            <param name="disassembleArchitecture">
                The hardware architecture for the disassembler to use.
            </param>
            <param name="disassembleMode">
                The hardware mode for the disassembler to use.
            </param>
            <param name="pDisassembler">
                A pointer that will be updated to reference the disassembler.
            </param>
            <returns>
                A result code indicating the result of the operation.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.NativeCapstoneImport.CreateInstruction(Gee.External.Capstone.NativeDisassemblerHandle)">
            <summary>
                Create an Instruction..
            </summary>
            <param name="hDisassembler">
                A disassembler handle.
            </param>
            <returns>
                A pointer to the instruction.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler handle is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.NativeCapstoneImport.Disassemble(Gee.External.Capstone.NativeDisassemblerHandle,System.IntPtr,System.IntPtr,System.Int64,System.IntPtr,System.IntPtr@)">
            <summary>
                Disassemble Binary Code.
            </summary>
            <param name="hDisassembler">
                A disassembler handle.
            </param>
            <param name="pCode">
                A pointer to a buffer indicating the binary code to disassemble.
            </param>
            <param name="codeSize">
                A platform dependent integer indicating the size, in bytes, of the binary code buffer.
            </param>
            <param name="startingAddress">
                The address of the first instruction in the binary code buffer.
            </param>
            <param name="count">
                The maximum number of instructions in the binary code buffer to disassemble. A <c>0</c> indicates all
                instructions in the binary code buffer should be disassembled.
            </param>
            <param name="pInstructions">
                A pointer that will be updated to reference the disassembled instructions.
            </param>
            <returns>
                A platform dependent integer indicating the number of disassembled instructions if the binary code was
                disassembled successfully. An <c>IntPtr.Zero</c> otherwise.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler handle is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.NativeCapstoneImport.FreeInstructions(System.IntPtr,System.IntPtr)">
            <summary>
                Free Memory Allocated For Disassembled Instructions.
            </summary>
            <param name="pInstructions">
                A pointer to disassembled instructions.
            </param>
            <param name="count">
                The number of disassembled instructions.
            </param>
        </member>
        <member name="M:Gee.External.Capstone.NativeCapstoneImport.GetAccessedRegisters(Gee.External.Capstone.NativeDisassemblerHandle,Gee.External.Capstone.NativeInstructionHandle,System.Int16[],System.Byte@,System.Int16[],System.Byte@)">
            <summary>
                Get an Instruction's Accessed Registers.
            </summary>
            <param name="hDisassembler">
                A disassembler handle.
            </param>
            <param name="hInstruction">
                An instruction handle.
            </param>
            <param name="readRegisters">
                An array that will be updated to indicate the instruction's read registers.
            </param>
            <param name="readRegistersCount">
                An 8-bit integer that will be updated to indicate the number of read registers.
            </param>
            <param name="writtenRegisters">
                An array that will be updated to indicate the instruction's written registers.
            </param>
            <param name="writtenRegistersCount">
                An 8-bit integer that will be updated to indicate the number of written registers.
            </param>
            <returns>
                A result code indicating the result of the operation.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler handle is disposed, or if the instruction handle is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.NativeCapstoneImport.GetInstructionGroupName(Gee.External.Capstone.NativeDisassemblerHandle,System.Int32)">
            <summary>
                Get an Instruction Group's Name.
            </summary>
            <param name="hDisassembler">
                A disassembler handle.
            </param>
            <param name="instructionGroupId">
                An instruction group's unique identifier.
            </param>
            <returns>
                A pointer to an ASCII string indicating the instruction group's name.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler handle is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.NativeCapstoneImport.GetLastErrorCode(Gee.External.Capstone.NativeDisassemblerHandle)">
            <summary>
                Get Last Error Code.
            </summary>
            <param name="hDisassembler">
                A disassembler handle.
            </param>
            <returns>
                The error code of the last generated error.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler handle is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.NativeCapstoneImport.GetRegisterName(Gee.External.Capstone.NativeDisassemblerHandle,System.Int32)">
            <summary>
                Get a Register's Name.
            </summary>
            <param name="hDisassembler">
                A disassembler handle.
            </param>
            <param name="registerId">
                A register's unique identifier.
            </param>
            <returns>
                A pointer to an ASCII string indicating the register's name.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler handle is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.NativeCapstoneImport.Iterate(Gee.External.Capstone.NativeDisassemblerHandle,System.IntPtr@,System.IntPtr@,System.Int64@,Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Disassemble Binary Code Iteratively.
            </summary>
            <param name="hDisassembler">
                A disassembler handle.
            </param>
            <param name="pCode">
                A pointer to a buffer indicating the binary code to disassemble.
            </param>
            <param name="codeSize">
                A platform dependent integer indicating the size, in bytes, of the binary code buffer.
            </param>
            <param name="address">
                The address of the first instruction in the binary code buffer.
            </param>
            <param name="hInstruction">
                An instruction handle.
            </param>
            <returns>
                A boolean true if an instruction was disassembled successfully. A boolean false otherwise.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler handle is disposed, or if the instruction handle is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.NativeCapstoneImport.Query(Gee.External.Capstone.NativeQueryOption)">
            <summary>
                Query an Option.
            </summary>
            <param name="queryOption">
                An option to query.
            </param>
            <returns>
                A boolean true if the option is supported. A boolean false otherwise.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.NativeCapstoneImport.SetDisassemblerOption(Gee.External.Capstone.NativeDisassemblerHandle,Gee.External.Capstone.NativeDisassemblerOptionType,System.IntPtr)">
            <summary>
                Set a Disassembler Option.
            </summary>
            <param name="hDisassembler">
                A disassembler handle.
            </param>
            <param name="optionType">
                A type of option to set.
            </param>
            <param name="optionValue">
                A platform dependent integer indicating the value to set the option to.
            </param>
            <returns>
                A result code indicating the result of the operation.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler handle is disposed.
            </exception>
        </member>
        <member name="T:Gee.External.Capstone.NativeCapstoneResultCode">
            <summary>
                Native Capstone Result Code.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeCapstoneResultCode.Ok">
            <summary>
                Indicates an operation completed successfully.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.NativeDisassembleMode">
            <summary>
                Disassemble Mode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassembleMode.LittleEndian">
            <summary>
                Indicates binary code should be disassembled in little-endian mode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassembleMode.Arm">
            <summary>
                Indicates binary code should be disassembled in 32-bit ARM mode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassembleMode.Bit16">
            <summary>
                Indicates binary code should be disassembled in 16-bit mode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassembleMode.Bit32">
            <summary>
                Indicates binary code should be disassembled in 32-bit mode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassembleMode.Bit64">
            <summary>
                Indicates binary code should be disassembled in 64-bit mode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassembleMode.ArmThumb">
            <summary>
                Indicates binary code should be disassembled with support for the ARM Thumb and ARM Thumb-2
                instruction sets.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassembleMode.ArmCortexM">
            <summary>
                Indicates binary code should be disassembled with support for the ARM Cortex-M processor cores.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassembleMode.ArmV8">
            <summary>
                Indicates binary code should be disassembled with support for the ARMv8 instruction set.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassembleMode.MipsMicro">
            ARMv8 A32 encodings for ARM
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassembleMode.Mips3">
            MicroMips mode (MIPS)
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassembleMode.Mips32R6">
            Mips III ISA
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassembleMode.Mips2">
            Mips32r6 ISA
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassembleMode.SparcV9">
            Mips II ISA
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassembleMode.PowerPcQuadProcessingExtensions">
            SparcV9 mode (Sparc)
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassembleMode.M68K000">
            Quad Processing eXtensions mode (PPC)
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassembleMode.M68K010">
            M68K 68000 mode
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassembleMode.M68K020">
            M68K 68010 mode
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassembleMode.M68K030">
            M68K 68020 mode
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassembleMode.M68K040">
            M68K 68030 mode
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassembleMode.M68K060">
            M68K 68040 mode
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassembleMode.BigEndian">
            M68K 68060 mode
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassembleMode.Mips32">
            big-endian mode
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassembleMode.Mips64">
            Mips32 ISA (Mips)
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassembleMode.M680X6301">
            Mips64 ISA (Mips)
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassembleMode.M680X6309">
            M680X Hitachi 6301,6303 mode
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassembleMode.M680X6800">
            M680X Hitachi 6309 mode
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassembleMode.M680X6801">
            M680X Motorola 6800,6802 mode
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassembleMode.M680X6805">
            M680X Motorola 6801,6803 mode
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassembleMode.M680X6808">
            M680X Motorola/Freescale 6805 mode
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassembleMode.M680X6809">
            M680X Motorola/Freescale/NXP 68HC08 mode
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassembleMode.M680X6811">
            M680X Motorola 6809 mode
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassembleMode.M680XCpu12">
            M680X Motorola/Freescale/NXP 68HC11 mode
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassembleMode.M680XHcS08">
            M680X Motorola/Freescale/NXP CPU12 /// used on M68HC12/HCS12
        </member>
        <member name="T:Gee.External.Capstone.NativeDisassemblerHandle">
            <summary>
                Native Disassembler Handle.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.NativeDisassemblerHandle.#ctor(System.IntPtr)">
            <summary>
                Create a Native Disassembler Handle.
            </summary>
            <param name="pDisassembler">
                A pointer to a disassembler.
            </param>
        </member>
        <member name="M:Gee.External.Capstone.NativeDisassemblerHandle.ReleaseHandle">
            <summary>
                Release Handle.
            </summary>
            <returns>
                A boolean true if the handle was released. A boolean false otherwise.
            </returns>
        </member>
        <member name="T:Gee.External.Capstone.NativeDisassemblerOptionType">
            <summary>
                Native Disassembler Option Type.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassemblerOptionType.None">
            <summary>
                Indicates no option should be set.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassemblerOptionType.SetSyntax">
            <summary>
                Represents an option to set the syntax of the assembly code generated by a disassembler.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassemblerOptionType.SetInstructionDetails">
            <summary>
                Represents an option to set whether a disassembler should generate details when disassembling
                instructions.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassemblerOptionType.SetDisassembleMode">
            <summary>
                Represents an option to set a disassembler's disassemble mode.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.NativeDisassemblerOptionValue">
            <summary>
                Native Disassembler Option Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassemblerOptionValue.Disable">
            <summary>
                Indicates an option should be disabled.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassemblerOptionValue.Enable">
            <summary>
                Indicates an option should be enabled.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassemblerOptionValue.UseDefaultSyntax">
            <summary>
                Indicates a disassembler should use its default syntax for generated assembly code.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassemblerOptionValue.UseIntelSyntax">
            <summary>
                Indicates a disassembler should use Intel syntax for generated assembly code.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Gee.External.Capstone.NativeDisassemblerOptionValue.UseAttSyntax" -->
        <member name="F:Gee.External.Capstone.NativeDisassemblerOptionValue.UseMasmSyntax">
            <summary>
                Indicates a disassembler should use MASM syntax for generated assembly code.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.NativeInstruction">
            <summary>
                Native Disassembled Instruction.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeInstruction.Id">
            <summary>
                Instruction's Unique Identifier.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeInstruction.Address">
            <summary>
                Instruction's Address (EIP).
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeInstruction.Size">
            <summary>
                Instruction's Size.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeInstruction.Bytes">
            <summary>
                Instruction's Machine Bytes.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeInstruction.Mnemonic">
            <summary>
                Instruction's Mnemonic Text.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeInstruction.Operand">
            <summary>
                Instruction's Operand Text.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeInstruction.Details">
            <summary>
                Instruction's Details.
            </summary>
            <remarks>
                Represents a pointer to the instruction's details in unmanaged memory.
            </remarks>
        </member>
        <member name="F:Gee.External.Capstone.NativeInstructionDetail.ReadRegisters">
            <summary>
                Implicit Registers Read by an Instruction.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeInstructionDetail.ReadRegistersCount">
            <summary>
                Number of Implicit Registers Read by an Instruction.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeInstructionDetail.WrittenRegisters">
            <summary>
                Implicit Registers Written by an Instruction.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeInstructionDetail.WrittenRegisterCount">
            <summary>
                Number of Implicit Registers Written by an Instruction.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeInstructionDetail.Groups">
            <summary>
                Groups an Instruction Belongs to.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeInstructionDetail.GroupCount">
            <summary>
                Number of Groups an Instruction Belongs to.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.NativeInstructionHandle">
            <summary>
                Native Instruction Handle.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.NativeInstructionHandle.#ctor(System.IntPtr)">
            <summary>
                Create an Instruction Handle.
            </summary>
            <param name="pInstruction">
                A pointer to an instruction.
            </param>
        </member>
        <member name="M:Gee.External.Capstone.NativeInstructionHandle.ReleaseHandle">
            <summary>
                Release Handle.
            </summary>
            <returns>
                A boolean true if the handle was released. A boolean false otherwise.
            </returns>
        </member>
        <member name="T:Gee.External.Capstone.NativeInstructionMnemonicOptionValue">
            <summary>
                Native Disassembled Instruction Mnemonic Option Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeInstructionMnemonicOptionValue.InstructionId">
            <summary>
                Instruction Unique Identifier.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeInstructionMnemonicOptionValue.InstructionMnemonic">
            <summary>
                Instruction Mnemonic.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.NativeQueryOption">
            <summary>
                Native Query Option.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeQueryOption.QueryArmArchitecture">
            <summary>
                Query ARM Architecture.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeQueryOption.QueryArm64Architecture">
            <summary>
                Query ARM64 Architecture.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeQueryOption.QueryMipsArchitecture">
            <summary>
               Query MIPS Architecture.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeQueryOption.QueryX86Architecture">
            <summary>
                Query X86 Architecture.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeQueryOption.QueryPowerPcArchitecture">
            <summary>
                Query PowerPC Architecture.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeQueryOption.QuerySparcArchitecture">
            <summary>
                Query Sparc Architecture.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeQueryOption.QuerySystemZArchitecture">
            <summary>
                Query SystemZ Architecture.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeQueryOption.QueryXCoreArchitecture">
            <summary>
                Query XCore Architecture.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeQueryOption.QueryM68KArchitecture">
            <summary>
                Query 68K Architecture.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeQueryOption.QueryTms320C64XArchitecture">
            <summary>
                Query TMS320C64x Architecture.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeQueryOption.QueryM680XArchitecture">
            <summary>
                Query 680X Architecture.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeQueryOption.QueryEvmArchitecture">
            <summary>
                Query Ethereum EVM Architecture.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeQueryOption.QueryAllArchitectures">
            <summary>
                Query All Architectures.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeQueryOption.QueryDietMode">
            <summary>
                Query Diet Mode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeQueryOption.QueryX86ReduceMode">
            <summary>
                Query X86 Reduce Mode.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.NativeSkipDataOptionValue">
            <summary>
                Native Skip Data Option Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeSkipDataOptionValue.InstructionMnemonic">
            <summary>
                Instruction Mnemonic.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.OperandAccessType">
            <summary>
                Operand Access Type.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.OperandAccessType.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, operand access type.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Register`1">
            <summary>
                Register.
            </summary>
            <typeparam name="TId">
                The type of the register's unique identifiers.
            </typeparam>
        </member>
        <member name="F:Gee.External.Capstone.Register`1._id">
            <summary>
                Register's Unique Identifier.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Register`1._name">
            <summary>
                Register's Name.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Register`1.Id">
            <summary>
                Get Register's Unique Identifier.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Register`1.IsDietModeEnabled">
            <summary>
                Determine if Diet Mode is Enabled.
            </summary>
            <value>
                A boolean true if diet mode is enabled. A boolean false otherwise.
            </value>
        </member>
        <member name="P:Gee.External.Capstone.Register`1.Name">
            <summary>
                Get Register's Name.
            </summary>
            <exception cref="T:System.NotSupportedException">
                Thrown if diet mode is enabled.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.Register`1.#ctor(`0,System.String)">
            <summary>
                Create a Register.
            </summary>
            <param name="id">
                The register's unique identifier.
            </param>
            <param name="name">
                The register's name.
            </param>
        </member>
        <member name="M:Gee.External.Capstone.Register`1.Equals(System.Object)">
            <summary>
                Determine if This Object is Equal to Another Object.
            </summary>
            <param name="object">
                An object to compare to. Should not be a null reference.
            </param>
            <returns>
                A boolean true if this object is equal to the object. A boolean false otherwise.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.Register`1.GetHashCode">
            <summary>
                Get Object's Hash Code.
            </summary>
            <returns>
                The object's hash code.
            </returns>
        </member>
        <member name="T:Gee.External.Capstone.SafeHandleExtension">
            <summary>
                Safe Handle Extension.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.SafeHandleExtension.DangerousAddRefAndGetHandle(System.Runtime.InteropServices.SafeHandle)">
            <summary>
                Add a Reference to and Get a Handle.
            </summary>
            <remarks>
                <para>
                    Convenient method to add a reference to a handle before retrieving its wrapped pointer. If a
                    reference cannot be added to the handle, an exception is thrown. This follows Microsoft's
                    recommended best practice to add a reference to the handle before retrieving its wrapped pointer
                    to minimize the risk of handle recycle attacks. You, however, are responsible for releasing the
                    reference to the handle after you are done with it, using <c>SafeHandle.DangerousRelease()</c>,
                    otherwise you risk a memory leak.
                </para>
                <para>
                    This method is the equivalent to calling both <c>SafeHandle.DangerousAddRef()</c> and
                    <c>SafeHandle.DangerousGetHandle()</c>, except an exception is thrown if the operation fails. This
                    is for convenience if, and only if, you want to treat the failure of this operation as
                    exceptional! If you do not want to treat the failure of this operation as exceptional and you
                    instead have a non-exceptional back-off routine, do not call this method and perform your back-off
                    routine in an exception handler! You're better off simply calling both
                    <c>SafeHandle.DangerousAddRef()</c> and <c>SafeHandle.DangerousGetHandle()</c> yourself.
                </para>
            </remarks>
            <param name="this">
                A handle.
            </param>
            <returns>
                The handle's wrapped pointer.
            </returns>
            <exception cref="T:System.ArgumentException">
                Thrown if the handle is closed, or if the handle is invalid.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if the handle is a null reference.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                Thrown if a reference to the handle could not be added.
            </exception>
        </member>
        <member name="T:Gee.External.Capstone.X86.CapstoneX86Disassembler">
            <summary>
                Capstone X86 Disassembler.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.CapstoneX86Disassembler.IsReduceModeEnabled">
            <summary>
                Determine if Reduce Mode is Enabled.
            </summary>
            <value>
                A boolean true if reduce mode is enabled. A boolean false otherwise.
            </value>
        </member>
        <member name="M:Gee.External.Capstone.X86.CapstoneX86Disassembler.#ctor(Gee.External.Capstone.X86.X86DisassembleMode)">
            <summary>
                Create a Capstone X86 Disassembler.
            </summary>
            <param name="disassembleMode"></param>
        </member>
        <member name="M:Gee.External.Capstone.X86.CapstoneX86Disassembler.CreateInstruction(Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Create an Instruction.
            </summary>
            <param name="hInstruction">
                An instruction handle.
            </param>
            <returns>
                An X86 instruction.
            </returns>
        </member>
        <member name="T:Gee.External.Capstone.X86.NativeX86Encoding">
            <summary>
                Native X86 Encoding.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86Encoding.ModRmOffset">
            <summary>
                ModR/M Offset.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86Encoding.DisplacementOffset">
            <summary>
                Displacement Offset.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86Encoding.DisplacementSize">
            <summary>
                Displacement Size.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86Encoding.ImmediateOffset">
            <summary>
                Immediate Offset.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86Encoding.ImmediateSize">
            <summary>
                Immediate Size.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.X86.NativeX86Flag">
            <summary>
                Native X86 Flag.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86Flag.EFlags">
            <summary>
                EFLAGS.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86Flag.FpuFlags">
            <summary>
                FPU Flags.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.X86.NativeX86InstructionDetail">
            <summary>
                Native X86 Instruction Detail.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86InstructionDetail.Prefix">
            <summary>
                Instruction's Prefix.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86InstructionDetail.Opcode">
            <summary>
                Instruction's Opcode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86InstructionDetail.Rex">
            <summary>
                REX Prefix.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86InstructionDetail.AddressSize">
            <summary>
                Address Size.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86InstructionDetail.ModRm">
            <summary>
                ModR/M.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86InstructionDetail.Sib">
            <summary>
                SIB Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86InstructionDetail.Displacement">
            <summary>
                Displacement Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86InstructionDetail.SibIndex">
            <summary>
                SIB Index.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86InstructionDetail.SibScale">
            <summary>
                SIB Scale.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86InstructionDetail.SibBase">
            <summary>
                SIB Base.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86InstructionDetail.XopConditionCode">
            <summary>
                XOP Condition Code.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86InstructionDetail.SseConditionCode">
            <summary>
                SSE Condition Code.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86InstructionDetail.AvxConditionCode">
            <summary>
                AVX Condition Code.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86InstructionDetail.AvxSuppressAllExceptions">
            <summary>
                AVX Suppress All Exceptions Flag.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86InstructionDetail.AvxRoundingMode">
            <summary>
                AVX Rounding Mode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86InstructionDetail.Flag">
            <summary>
                Flag.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86InstructionDetail.OperandCount">
            <summary>
                Instruction's Operand Count.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86InstructionDetail.Operands">
            <summary>
                Instruction's Operands.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86InstructionDetail.Encoding">
            <summary>
                Encoding.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.X86.NativeX86MemoryOperandValue">
            <summary>
                Native X86 Memory Operand Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86MemoryOperandValue.Segment">
            <summary>
                Segment Register.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86MemoryOperandValue.Base">
            <summary>
                Base Register.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86MemoryOperandValue.Index">
            <summary>
                Index Register.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86MemoryOperandValue.Scale">
            <summary>
                Index Register's Scale.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86MemoryOperandValue.Displacement">
            <summary>
                Displacement Value.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.X86.NativeX86Operand">
            <summary>
                Native X86 Operand.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86Operand.Type">
            <summary>
                Operand's Type.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86Operand.Value">
            <summary>
                Operand's Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86Operand.Size">
            <summary>
                Operand's Size.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86Operand.AccessType">
            <summary>
                Operand's Access Type.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86Operand.AvxBroadcast">
            <summary>
                AVX Broadcast.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86Operand.AvxZeroOpMask">
            <summary>
                AVX Zero Opmask.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.X86.NativeX86OperandValue">
            <summary>
                Native X86 Operand Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86OperandValue.Register">
            <summary>
                Register Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86OperandValue.Immediate">
            <summary>
                Immediate Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86OperandValue.Memory">
            <summary>
                Memory Value.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.X86.X86AvxBroadcast">
            <summary>
                X86 AVX Broadcast.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.X86AvxBroadcast.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, AVX broadcast.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.X86.X86AvxConditionCode">
            <summary>
                X86 AVX Condition Code.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.X86AvxConditionCode.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, AVX condition code.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.X86.X86AvxRoundingMode">
            <summary>
                X86 AVX Rounding Mode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.X86AvxRoundingMode.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, AVX rounding mode.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.X86.X86DisassembleMode">
            <summary>
                X86 Disassemble Mode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.X86DisassembleMode.Bit16">
            <summary>
                Indicates binary code should be disassembled in 16-bit mode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.X86DisassembleMode.Bit32">
            <summary>
                Indicates binary code should be disassembled in 32-bit mode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.X86DisassembleMode.Bit64">
            <summary>
                Indicates binary code should be disassembled in 64-bit mode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.X86DisassembleMode.LittleEndian">
            <summary>
                Indicates binary code should be disassembled in little-endian mode.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.X86.X86Encoding">
            <summary>
                X86 Encoding.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86Encoding.DisplacementOffset">
            <summary>
                Get Displacement Offset.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86Encoding.DisplacementSize">
            <summary>
                Get Displacement Size.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86Encoding.ImmediateOffset">
            <summary>
                Get Immediate Offset.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86Encoding.ImmediateSize">
            <summary>
                Get Immediate Size.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86Encoding.ModRmOffset">
            <summary>
                Get ModR/M Offset.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.X86.X86Encoding.Create(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.X86.NativeX86Encoding@)">
            <summary>
                Create an X86 Encoding.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="nativeEncoding">
                A native X86 encoding.
            </param>
            <returns>
                An X86 encoding.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.X86.X86Encoding.#ctor(Gee.External.Capstone.X86.X86EncodingBuilder)">
            <summary>
                Create an X86 Encoding.
            </summary>
            <param name="builder">
                A builder to initialize the object with.
            </param>
        </member>
        <member name="T:Gee.External.Capstone.X86.X86EncodingBuilder">
            <summary>
                X86 Encoding Builder.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86EncodingBuilder.DisplacementOffset">
            <summary>
                Get and Set Displacement Offset.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86EncodingBuilder.DisplacementSize">
            <summary>
                Get and Set Displacement Size.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86EncodingBuilder.ImmediateOffset">
            <summary>
                Get and Set Immediate Offset.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86EncodingBuilder.ImmediateSize">
            <summary>
                Get and Set Immediate Size.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86EncodingBuilder.ModRmOffset">
            <summary>
                Get and Set ModR/M Offset.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.X86.X86EncodingBuilder.Build(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.X86.NativeX86Encoding@)">
            <summary>
                Build an X86 Encoding Builder.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="nativeEncoding">
                A native X86 encoding.
            </param>
            <returns>
                This builder.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.X86.X86EncodingBuilder.Create">
            <summary>
                Create an X86 Encoding.
            </summary>
            <returns>
                An X86 encoding.
            </returns>
        </member>
        <member name="T:Gee.External.Capstone.X86.X86Instruction">
            <summary>
                X86 Instruction.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.X86.X86Instruction.Create(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Create an X86 Instruction.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="hInstruction">
                An instruction handle.
            </param>
            <returns>
                An X86 instruction.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.X86.X86Instruction.#ctor(Gee.External.Capstone.X86.X86InstructionBuilder)">
            <summary>
                Create an X86 Instruction.
            </summary>
            <param name="builder">
                A builder to initialize the object with.
            </param>
        </member>
        <member name="T:Gee.External.Capstone.X86.X86InstructionBuilder">
            <summary>
                X86 Instruction Builder.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.X86.X86InstructionBuilder.Create">
            <summary>
                Create an X86 Instruction.
            </summary>
            <returns>
                An X86 instruction.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.X86.X86InstructionBuilder.CreateDetails(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Create Instruction's Details.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="hInstruction">
                An instruction handle.
            </param>
            <returns>
                The instruction's details.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.X86.X86InstructionBuilder.CreateId(System.Int32)">
            <summary>
                Create Instruction's Unique Identifier.
            </summary>
            <param name="id">
                An instruction's unique identifier.
            </param>
            <returns>
                The instruction's unique identifier.
            </returns>
        </member>
        <member name="T:Gee.External.Capstone.X86.X86InstructionDetail">
            <summary>
                X86 Instruction Detail.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetail.AddressSize">
            <summary>
                Get Address Size.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetail.AvxConditionCode">
            <summary>
                Get AVX Condition Code.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetail.AvxRoundingMode">
            <summary>
                Get AVX Rounding Mode.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetail.AvxSuppressAllExceptions">
            <summary>
                Get AVX Suppress All Exceptions Flag.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetail.Displacement">
            <summary>
                Get Displacement Value.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetail.EFlags">
            <summary>
                Get EFlags.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetail.Encoding">
            <summary>
                Get Encoding.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetail.FpuFlags">
            <summary>
                Get FPU Flags.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetail.ModRm">
            <summary>
                Get ModR/M.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetail.Opcode">
            <summary>
                Get Instruction's Opcode.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetail.Operands">
            <summary>
                Get Instruction's Operands.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetail.Prefix">
            <summary>
                Get Instruction's Prefix.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetail.Rex">
            <summary>
                Get REX Prefix.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetail.Sib">
            <summary>
                Get SIB Value.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetail.SibBase">
            <summary>
                Get SIB Base.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetail.SibIndex">
            <summary>
                Get SIB Index.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetail.SibScale">
            <summary>
                Get SIB Scale.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetail.SseConditionCode">
            <summary>
                Get SSE Condition Code.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetail.XopConditionCode">
            <summary>
                Get XOP Condition Code.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.X86.X86InstructionDetail.Create(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Create an X86 Instruction Detail.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="hInstruction">
                An instruction handle.
            </param>
            <returns>
                An X86 instruction detail.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.X86.X86InstructionDetail.#ctor(Gee.External.Capstone.X86.X86InstructionDetailBuilder)">
            <summary>
                Create an X86 Instruction Detail.
            </summary>
            <param name="builder">
                A builder to initialize the object with.
            </param>
        </member>
        <member name="T:Gee.External.Capstone.X86.X86InstructionDetailBuilder">
            <summary>
                X86 Instruction Detail Builder.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetailBuilder.AddressSize">
            <summary>
                Get and Set Address Size.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetailBuilder.AvxConditionCode">
            <summary>
                Get and Set AVX Condition Code.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetailBuilder.AvxRoundingMode">
            <summary>
                Get and Set AVX Rounding Mode.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetailBuilder.AvxSuppressAllExceptions">
            <summary>
                Get and Set AVX Suppress All Exceptions Flag.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetailBuilder.Displacement">
            <summary>
                Get and Set Displacement Value.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetailBuilder.EFlags">
            <summary>
                Get and Set EFlags.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetailBuilder.Encoding">
            <summary>
                Get and Set Encoding.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetailBuilder.FpuFlags">
            <summary>
                Get and Set FPU Flags.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetailBuilder.ModRm">
            <summary>
                Get and Set ModR/M.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetailBuilder.Opcode">
            <summary>
                Get and Set Instruction's Opcode.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetailBuilder.Operands">
            <summary>
                Get and Set Instruction's Operands.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetailBuilder.Prefix">
            <summary>
                Get and Set Instruction's Prefix.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetailBuilder.Rex">
            <summary>
                Get and Set REX Prefix.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetailBuilder.Sib">
            <summary>
                Get and Set SIB Value.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetailBuilder.SibBase">
            <summary>
                Get and Set SIB Base.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetailBuilder.SibIndex">
            <summary>
                Get and Set SIB Index.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetailBuilder.SibScale">
            <summary>
                Get and Set SIB Scale.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetailBuilder.SseConditionCode">
            <summary>
                Get and Set SSE Condition Code.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetailBuilder.XopConditionCode">
            <summary>
                Get and Set XOP Condition Code.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.X86.X86InstructionDetailBuilder.Build(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Build an Instruction Detail.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="hInstruction">
                An instruction handle.
            </param>
        </member>
        <member name="M:Gee.External.Capstone.X86.X86InstructionDetailBuilder.Create">
            <summary>
                Create an X86 Instruction Detail.
            </summary>
            <returns>
                An X86 instruction detail.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.X86.X86InstructionDetailBuilder.CreateInstructionGroup(Gee.External.Capstone.CapstoneDisassembler,System.Byte)">
            <summary>
                Create an Instruction Group.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="instructionGroupId">
                An instruction group's unique identifier.
            </param>
            <returns>
                An X86 instruction group.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.X86.X86InstructionDetailBuilder.CreateRegister(Gee.External.Capstone.CapstoneDisassembler,System.Int16)">
            <summary>
                Create a Register.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="registerId">
                A register's unique identifier.
            </param>
            <returns>
                An X86 register.
            </returns>
        </member>
        <member name="T:Gee.External.Capstone.X86.X86InstructionGroup">
            <summary>
                X86 Instruction Group.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.X86.X86InstructionGroup.Create(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.X86.X86InstructionGroupId)">
            <summary>
                Create an X86 Instruction Group.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="id">
                The instruction group's unique identifier.
            </param>
            <returns>
                An X86 instruction group.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.X86.X86InstructionGroup.#ctor(Gee.External.Capstone.X86.X86InstructionGroupId,System.String)">
            <summary>
                Create an X86 Instruction Group.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.X86.X86InstructionGroupId">
            <summary>
                X86 Instruction Group Unique Identifier.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.X86InstructionGroupId.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, instruction group.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.X86.X86InstructionId">
            <summary>
                X86 Instruction Unique Identifier.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.X86InstructionId.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, instruction.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.X86.X86MemoryOperandValue">
            <summary>
                X86 Memory Operand Value.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86MemoryOperandValue.Base">
            <summary>
                Get Base Register.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86MemoryOperandValue.Displacement">
            <summary>
                Get Displacement Value.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86MemoryOperandValue.Index">
            <summary>
                Get Index Register.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86MemoryOperandValue.Scale">
            <summary>
                Get Index Register's Scale.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86MemoryOperandValue.Segment">
            <summary>
                Get Segment Register.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.X86.X86MemoryOperandValue.Create(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.X86.NativeX86MemoryOperandValue@)">
            <summary>
                Create an X86 Memory Operand Value.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="nativeMemoryOperandValue">
                A native X86 memory operand value.
            </param>
            <returns>
                An X86 memory operand value.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.X86.X86MemoryOperandValue.#ctor(Gee.External.Capstone.X86.X86MemoryOperandValueBuilder)">
            <summary>
                Create an X86 Memory Operand Value.
            </summary>
            <param name="builder">
                A builder to initialize the object with.
            </param>
        </member>
        <member name="T:Gee.External.Capstone.X86.X86MemoryOperandValueBuilder">
            <summary>
                X86 Memory Operand Value Builder.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86MemoryOperandValueBuilder.Base">
            <summary>
                Get and Set Base Register.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86MemoryOperandValueBuilder.Displacement">
            <summary>
                Get and Set Displacement Value.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86MemoryOperandValueBuilder.Index">
            <summary>
                Get and Set Index Register.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86MemoryOperandValueBuilder.Scale">
            <summary>
                Get and Set Index Register's Scale.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86MemoryOperandValueBuilder.Segment">
            <summary>
                Get and Set Segment Register.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.X86.X86MemoryOperandValueBuilder.Build(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.X86.NativeX86MemoryOperandValue@)">
            <summary>
                Build an X86 Memory Operand Value Builder.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="nativeMemoryOperandValue">
                A native X86 memory operand value.
            </param>
            <returns>
                This builder.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.X86.X86MemoryOperandValueBuilder.Create">
            <summary>
                Create an X86 Memory Operand Value.
            </summary>
            <returns>
                An X86 memory operand value.
            </returns>
        </member>
        <member name="T:Gee.External.Capstone.X86.X86Operand">
            <summary>
                X86 Operand.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.X86Operand._accessType">
            <summary>
                Operand's Access Type.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.X86Operand._immediate">
            <summary>
                Immediate Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.X86Operand._memory">
            <summary>
                Memory Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.X86Operand._register">
            <summary>
                Register Value.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86Operand.AccessType">
            <summary>
                Get Operand's Access Type.
            </summary>
            <exception cref="T:System.NotSupportedException">
                Thrown if diet mode is enabled.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86Operand.AvxBroadcast">
            <summary>
                Get AVX Broadcast.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86Operand.AvxZeroOpMask">
            <summary>
                Get AVX Zero Opmask.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86Operand.Immediate">
            <summary>
                Get Immediate Value.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the operand's type is not equal to <see cref="F:Gee.External.Capstone.X86.X86OperandType.Immediate" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86Operand.Memory">
            <summary>
                Get Memory Value.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the operand's type is not equal to <see cref="F:Gee.External.Capstone.X86.X86OperandType.Memory" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86Operand.Register">
            <summary>
                Get Register Value.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the operand's type is not equal to <see cref="F:Gee.External.Capstone.X86.X86OperandType.Register" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86Operand.Size">
            <summary>
                Get Operand's Size.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86Operand.Type">
            <summary>
                Get Operand's Type.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.X86.X86Operand.Create(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.X86.NativeX86InstructionDetail@)">
            <summary>
                Create X86 Operands.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="nativeInstructionDetail">
                A native X86 instruction detail.
            </param>
            <returns>
                An array of X86 operands.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.X86.X86Operand.Create(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.X86.NativeX86Operand@)">
            <summary>
                Create an X86 Operand.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="nativeOperand">
                A native X86 operand.
            </param>
            <returns>
                An X86 operand.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.X86.X86Operand.#ctor(Gee.External.Capstone.X86.X86OperandBuilder)">
            <summary>
                Create an X86 Operand.
            </summary>
            <param name="builder">
                A builder to initialize the object with.
            </param>
        </member>
        <member name="T:Gee.External.Capstone.X86.X86OperandBuilder">
            <summary>
                X86 Operand Builder.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86OperandBuilder.AccessType">
            <summary>
                Get and Set Operand's Access Type.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86OperandBuilder.AvxBroadcast">
            <summary>
                Get and Set AVX Broadcast.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86OperandBuilder.AvxZeroOpMask">
            <summary>
                Get and Set AVX Zero Opmask.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86OperandBuilder.Immediate">
            <summary>
                Get and Set Immediate Value.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86OperandBuilder.Memory">
            <summary>
                Get and Set Memory Value.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86OperandBuilder.Register">
            <summary>
                Get and Set Register Value.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86OperandBuilder.Size">
            <summary>
                Get and Set Operand's Size.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86OperandBuilder.Type">
            <summary>
                Get and Set Operand's Type.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.X86.X86OperandBuilder.Build(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.X86.NativeX86Operand@)">
            <summary>
                Build an X86 Operand.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="nativeOperand">
                A native X86 operand.
            </param>
            <returns>
                This builder.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.X86.X86OperandBuilder.Create">
            <summary>
                Create an X86 Operand.
            </summary>
            <returns>
                An X86 operand.
            </returns>
        </member>
        <member name="T:Gee.External.Capstone.X86.X86OperandType">
            <summary>
                X86 Operand Type.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.X86OperandType.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, operand type.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.X86OperandType.Register">
            <summary>
                Indicates a register operand.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.X86OperandType.Immediate">
            <summary>
                Indicates an immediate operand.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.X86OperandType.Memory">
            <summary>
                Indicates a memory operand.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.X86.X86Prefix">
            <summary>
                X86 Prefix.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.X86Prefix.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, prefix.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.X86.X86Register">
            <summary>
                X86 Register.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.X86.X86Register.TryCreate(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.X86.X86RegisterId)">
            <summary>
                Create an X86 Register.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="id">
                The register's unique identifier.
            </param>
            <returns>
                An X86 register. A null reference if the register's unique identifier is equal to
                <see cref="F:Gee.External.Capstone.X86.X86RegisterId.Invalid" />.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.X86.X86Register.#ctor(Gee.External.Capstone.X86.X86RegisterId,System.String)">
            <summary>
                Create an X86 Register.
            </summary>
            <param name="id">
                The register's unique identifier.
            </param>
            <param name="name">
                The register's name.
            </param>
        </member>
        <member name="T:Gee.External.Capstone.X86.X86RegisterId">
            <summary>
                X86 Register Unique Identifier.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.X86RegisterId.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, register.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.X86.X86SseConditionCode">
            <summary>
                X86 SSE Condition Code.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.X86SseConditionCode.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, SSE condition code.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.X86.X86XopConditionCode">
            <summary>
                X86 XOP Condition Code.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.X86XopConditionCode.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, XOP condition code.
            </summary>
        </member>
    </members>
</doc>
