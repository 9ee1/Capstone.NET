<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Gee.External.Capstone</name>
    </assembly>
    <members>
        <member name="T:Gee.External.Capstone.Arm64.Arm64AtOperation">
            <summary>
                ARM64 Address Translation (AT) Operation.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64AtOperation.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, AT operation.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.Arm64BarrierOperation">
            <summary>
                ARM64 Barrier Operation.
            </summary>
            <remarks>
                Represents barrier operations supported by the DMB, DSB, and ISB instructions.
            </remarks>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64BarrierOperation.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, barrier operation.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.Arm64ConditionCode">
            <summary>
                ARM64 Condition Code.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64ConditionCode.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, condition code.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.Arm64DcOperation">
            <summary>
                ARM64 Data Cache (DC) Operation.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64DcOperation.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, DC operation.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.Arm64DisassembleMode">
            <summary>
                ARM64 Disassemble Mode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64DisassembleMode.Arm">
            <summary>
                Indicates binary code should be disassembled in 32-bit ARM mode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64DisassembleMode.BigEndian">
            <summary>
                Indicates binary code should be disassembled in big-endian mode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64DisassembleMode.LittleEndian">
            <summary>
                Indicates binary code should be disassembled in little-endian mode.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.Arm64ExtendOperation">
            <summary>
                ARM64 Extend Operation.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64ExtendOperation.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, extend operation.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.Arm64IcOperation">
            <summary>
                ARM64 Instruction Cache (IC) Operation.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64IcOperation.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, IC operation.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.Arm64Instruction">
            <summary>
                ARM64 Instruction.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.Arm64.Arm64Instruction.Create(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Create an ARM64 Instruction.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="hInstruction">
                An instruction handle.
            </param>
            <returns>
                An ARM64 instruction.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.Arm64.Arm64Instruction.#ctor(Gee.External.Capstone.Arm64.Arm64InstructionBuilder)">
            <summary>
                Create an ARM64 Instruction.
            </summary>
            <param name="builder">
                A builder to initialize the object with.
            </param>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.Arm64InstructionBuilder">
            <summary>
                ARM64 Instruction Builder.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.Arm64.Arm64InstructionBuilder.Create">
            <summary>
                Create an ARM64 Instruction.
            </summary>
            <returns>
                An ARM64 instruction.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.Arm64.Arm64InstructionBuilder.CreateDetails(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Create Instruction's Details.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="hInstruction">
                An instruction handle.
            </param>
            <returns>
                The instruction's details.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.Arm64.Arm64InstructionBuilder.CreateDisassembleMode(Gee.External.Capstone.NativeDisassembleMode)">
            <summary>
                Create Disassemble Mode.
            </summary>
            <param name="nativeDisassembleMode">
                A native disassemble mode.
            </param>
            <returns>
                A disassemble mode.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.Arm64.Arm64InstructionBuilder.CreateId(System.Int32)">
            <summary>
                Create Instruction's Unique Identifier.
            </summary>
            <param name="id">
                An instruction's unique identifier.
            </param>
            <returns>
                The instruction's unique identifier.
            </returns>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.Arm64InstructionDetail">
            <summary>
                ARM64 Instruction Detail.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64InstructionDetail.ConditionCode">
            <summary>
                Get Condition Code.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64InstructionDetail.Operands">
            <summary>
                Get Instruction's Operands.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64InstructionDetail.UpdateFlags">
            <summary>
                Get Update Flags Flag.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64InstructionDetail.WriteBack">
            <summary>
                Get Write Back Flag.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.Arm64.Arm64InstructionDetail.Create(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Create an ARM64 Instruction Detail.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="hInstruction">
                An instruction handle.
            </param>
            <returns>
                An ARM64 instruction detail.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.Arm64.Arm64InstructionDetail.#ctor(Gee.External.Capstone.Arm64.Arm64InstructionDetailBuilder)">
            <summary>
                Create an ARM64 Instruction Detail.
            </summary>
            <param name="builder">
                A builder to initialize the object with.
            </param>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.Arm64InstructionDetailBuilder">
            <summary>
                ARM64 Instruction Detail Builder.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64InstructionDetailBuilder.ConditionCode">
            <summary>
                Get and Set Condition Code.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64InstructionDetailBuilder.Operands">
            <summary>
                Get and Set Instruction's Operands.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64InstructionDetailBuilder.UpdateFlags">
            <summary>
                Get and Set Update Flags Flag.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64InstructionDetailBuilder.WriteBack">
            <summary>
                Get and Set Write Back Flag.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.Arm64.Arm64InstructionDetailBuilder.Build(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Build an Instruction Detail.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="hInstruction">
                An instruction handle.
            </param>
        </member>
        <member name="M:Gee.External.Capstone.Arm64.Arm64InstructionDetailBuilder.Create">
            <summary>
                Create an ARM64 Instruction Detail.
            </summary>
            <returns>
                An ARM64 instruction detail.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.Arm64.Arm64InstructionDetailBuilder.CreateDisassembleMode(Gee.External.Capstone.NativeDisassembleMode)">
            <summary>
                Create Disassemble Mode.
            </summary>
            <param name="nativeDisassembleMode">
                A native disassemble mode.
            </param>
            <returns>
                A disassemble mode.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.Arm64.Arm64InstructionDetailBuilder.CreateInstructionGroup(Gee.External.Capstone.CapstoneDisassembler,System.Byte)">
            <summary>
                Create an Instruction Group.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="instructionGroupId">
                An instruction group's unique identifier.
            </param>
            <returns>
                An ARM64 instruction group.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.Arm64.Arm64InstructionDetailBuilder.CreateRegister(Gee.External.Capstone.CapstoneDisassembler,System.Int16)">
            <summary>
                Create a Register.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="registerId">
                A register's unique identifier.
            </param>
            <returns>
                An ARM64 register.
            </returns>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.Arm64InstructionGroup">
            <summary>
                ARM64 Instruction Group.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.Arm64.Arm64InstructionGroup.Create(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.Arm64.Arm64InstructionGroupId)">
            <summary>
                Create an ARM64 Instruction Group.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="id">
                The instruction group's unique identifier.
            </param>
            <returns>
                An ARM64 instruction group.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.Arm64.Arm64InstructionGroup.#ctor(Gee.External.Capstone.Arm64.Arm64InstructionGroupId,System.String)">
            <summary>
                Create an ARM64 Instruction Group.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.Arm64InstructionGroupId">
            <summary>
                ARM64 Instruction Group Unique Identifier.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64InstructionGroupId.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, instruction group.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.Arm64InstructionId">
            <summary>
                ARM64 Instruction Unique Identifier.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64InstructionId.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, instruction.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.Arm64MemoryOperandValue">
            <summary>
                ARM64 Memory Operand Value.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64MemoryOperandValue.Base">
            <summary>
                Get Base Register.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64MemoryOperandValue.Displacement">
            <summary>
                Get Displacement Value.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64MemoryOperandValue.Index">
            <summary>
                Get Index Register.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.Arm64.Arm64MemoryOperandValue.#ctor(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.Arm64.NativeArm64MemoryOperandValue@)">
            <summary>
                Create an ARM64 Memory Operand Value.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="nativeMemoryOperandValue">
                A native ARM64 memory operand value.
            </param>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.Arm64MrsSystemRegister">
            <summary>
                ARM64 MRS System Register.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64MrsSystemRegister.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, system register.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.Arm64MsrSystemRegister">
            <summary>
                ARM64 MSR System Register.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64MsrSystemRegister.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, MSR register.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.Arm64Operand">
            <summary>
                ARM64 Operand.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64Operand._accessType">
            <summary>
                Operand's Access Type.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64Operand._atOperation">
            <summary>
                Address Translation (AT) Operation.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64Operand._barrierOperation">
            <summary>
                Barrier Operation.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64Operand._dcOperation">
            <summary>
                Data Cache (DC) Operation.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64Operand._floatingPoint">
            <summary>
                Floating Point Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64Operand._icOperation">
            <summary>
                Instruction Cache (IC) Operation.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64Operand._immediate">
            <summary>
                Immediate Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64Operand._memory">
            <summary>
                Memory Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64Operand._mrsSystemRegister">
            <summary>
                MRS System Register Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64Operand._msrSystemRegister">
            <summary>
                MSR System Register Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64Operand._prefetchOperation">
            <summary>
                Prefetch Operation.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64Operand._pStateField">
            <summary>
                Processor State (PSTATE) Field.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64Operand._register">
            <summary>
                Register Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64Operand._shiftValue">
            <summary>
                Shift Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64Operand._tlbiOperation">
            <summary>
                Translation Lookaside Buffer (TLBI) Operation.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64Operand.AccessType">
            <summary>
                Get Operand's Access Type.
            </summary>
            <remarks>
                Represents the operand's access type if, and only if, Diet Mode is disabled. To determine if Diet Mode
                is disabled, call <see cref="P:Gee.External.Capstone.Arm64.Arm64Operand.IsDietModeEnabled" />.
            </remarks>
            <exception cref="T:System.NotSupportedException">
                Thrown if Diet Mode is enabled.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64Operand.AtOperation">
            <summary>
                Get Address Translation (AT) Operation.
            </summary>
            <remarks>
                Represents the operand's Address Translation (AT) operation if, and only if, the operand's type is
                <see cref="F:Gee.External.Capstone.Arm64.Arm64OperandType.AtOperation" />. To determine the operand's type, call
                <see cref="P:Gee.External.Capstone.Arm64.Arm64Operand.Type" />.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the operand's type is not <see cref="F:Gee.External.Capstone.Arm64.Arm64OperandType.AtOperation" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64Operand.BarrierOperation">
            <summary>
                Get Barrier Operation.
            </summary>
            <remarks>
                Represents the operand's barrier operation if, and only if, the operand's type is
                <see cref="F:Gee.External.Capstone.Arm64.Arm64OperandType.BarrierOperation" />. To determine the operand's type, call
                <see cref="P:Gee.External.Capstone.Arm64.Arm64Operand.Type" />.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the operand's type is not <see cref="F:Gee.External.Capstone.Arm64.Arm64OperandType.BarrierOperation" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64Operand.DcOperation">
            <summary>
                Get Data Cache (DC) Operation.
            </summary>
            <remarks>
                Represents the operand's Data Cache (DC) operation if, and only if, the operand's type is
                <see cref="F:Gee.External.Capstone.Arm64.Arm64OperandType.DcOperation" />. To determine the operand's type, call
                <see cref="P:Gee.External.Capstone.Arm64.Arm64Operand.Type" />.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the operand's type is not <see cref="F:Gee.External.Capstone.Arm64.Arm64OperandType.DcOperation" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64Operand.ExtendOperation">
            <summary>
                Get Extend Operation.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64Operand.FloatingPoint">
            <summary>
                Get Floating Point Value.
            </summary>
            <remarks>
                Represents the operand's floating point value if, and only if, the operand's type is
                <see cref="F:Gee.External.Capstone.Arm64.Arm64OperandType.FloatingPoint" />. To determine the operand's type, call
                <see cref="P:Gee.External.Capstone.Arm64.Arm64Operand.Type" />.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the operand's type is not <see cref="F:Gee.External.Capstone.Arm64.Arm64OperandType.FloatingPoint" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64Operand.IcOperation">
            <summary>
                Get Instruction Cache (IC) Operation.
            </summary>
            <remarks>
                Represents the operand's Instruction Cache (IC) operation if, and only if, the operand's type is
                <see cref="F:Gee.External.Capstone.Arm64.Arm64OperandType.IcOperation" />. To determine the operand's type, call
                <see cref="P:Gee.External.Capstone.Arm64.Arm64Operand.Type" />.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the operand's type is not <see cref="F:Gee.External.Capstone.Arm64.Arm64OperandType.IcOperation" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64Operand.Immediate">
            <summary>
                Get Immediate Value.
            </summary>
            <remarks>
                Represents the operand's immediate value if, and only if, the operand's type is
                <see cref="F:Gee.External.Capstone.Arm64.Arm64OperandType.Immediate" />. To determine the operand's type, call <see cref="P:Gee.External.Capstone.Arm64.Arm64Operand.Type" />.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the operand's type is not <see cref="F:Gee.External.Capstone.Arm64.Arm64OperandType.Immediate" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64Operand.IsDietModeEnabled">
            <summary>
                Determine if Diet Mode is Enabled.
            </summary>
            <remarks>
                Indicates if Diet Mode is enabled. A boolean true indicates it is enabled. A boolean false otherwise.
            </remarks>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64Operand.Memory">
            <summary>
                Get Memory Value.
            </summary>
            <remarks>
                Represents the operand's memory value if, and only if, the operand's type is
                <see cref="F:Gee.External.Capstone.Arm64.Arm64OperandType.Memory" />. To determine the operand's type, call <see cref="P:Gee.External.Capstone.Arm64.Arm64Operand.Type" />.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the operand's type is not <see cref="F:Gee.External.Capstone.Arm64.Arm64OperandType.Memory" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64Operand.MrsSystemRegister">
            <summary>
                Get MRS System Register Value.
            </summary>
            <remarks>
                Represents the operand's MRS system register value if, and only if, the operand's type is
                <see cref="F:Gee.External.Capstone.Arm64.Arm64OperandType.MrsSystemRegister" />. To determine the operand's type, call
                <see cref="P:Gee.External.Capstone.Arm64.Arm64Operand.Type" />.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the operand's type is not <see cref="F:Gee.External.Capstone.Arm64.Arm64OperandType.MrsSystemRegister" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64Operand.MsrSystemRegister">
            <summary>
                Get MSR System Register Value.
            </summary>
            <remarks>
                Represents the operand's MRS system register value if, and only if, the operand's type is
                <see cref="F:Gee.External.Capstone.Arm64.Arm64OperandType.MsrSystemRegister" />. To determine the operand's type, call
                <see cref="P:Gee.External.Capstone.Arm64.Arm64Operand.Type" />.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the operand's type is not <see cref="F:Gee.External.Capstone.Arm64.Arm64OperandType.MsrSystemRegister" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64Operand.PrefetchOperation">
            <summary>
                Get Prefetch Operation.
            </summary>
            <remarks>
                Represents the operand's prefetch operation if, and only if, the operand's type is
                <see cref="F:Gee.External.Capstone.Arm64.Arm64OperandType.PrefetchOperation" />. To determine the operand's type, call
                <see cref="P:Gee.External.Capstone.Arm64.Arm64Operand.Type" />.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the operand's type is not <see cref="F:Gee.External.Capstone.Arm64.Arm64OperandType.PrefetchOperation" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64Operand.PStateField">
            <summary>
                Get Processor State (PSTATE) Field.
            </summary>
            <remarks>
                Represents the operand's processor state (PSTATE) field if, and only if, the operand's type is
                <see cref="F:Gee.External.Capstone.Arm64.Arm64OperandType.PStateField" />. To determine the operand's type, call
                <see cref="P:Gee.External.Capstone.Arm64.Arm64Operand.Type" />.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the operand's type is not <see cref="F:Gee.External.Capstone.Arm64.Arm64OperandType.PStateField" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64Operand.Register">
            <summary>
                Get Register Value.
            </summary>
            <remarks>
                Represents the operand's register value if, and only if, the operand's type is
                <see cref="F:Gee.External.Capstone.Arm64.Arm64OperandType.Register" />. To determine the operand's type, call <see cref="P:Gee.External.Capstone.Arm64.Arm64Operand.Type" />.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the operand's type is not <see cref="F:Gee.External.Capstone.Arm64.Arm64OperandType.Register" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64Operand.ShiftOperation">
            <summary>
                Get Shift Operation.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64Operand.ShiftValue">
            <summary>
                Get Shift Value.
            </summary>
            <remarks>
                Represents the operand's shift value if, and only if, the operand's shift operation is not
                <see cref="F:Gee.External.Capstone.Arm64.Arm64ShiftOperation.Invalid" />. To determine the operand's shift operation, call
                <see cref="P:Gee.External.Capstone.Arm64.Arm64Operand.ShiftOperation" />.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the shift operation is <see cref="F:Gee.External.Capstone.Arm64.Arm64ShiftOperation.Invalid" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64Operand.TlbiOperation">
            <summary>
                Get Translation Lookaside Buffer (TLBI) Operation.
            </summary>
            <remarks>
                Represents the operand's Translation Lookaside Buffer (TLBI) operation if, and only if, the operand's
                type is <see cref="F:Gee.External.Capstone.Arm64.Arm64OperandType.TlbiOperation" />. To determine the operand's type, call
                <see cref="P:Gee.External.Capstone.Arm64.Arm64Operand.Type" />.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the operand's type is not <see cref="F:Gee.External.Capstone.Arm64.Arm64OperandType.TlbiOperation" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64Operand.Type">
            <summary>
                Get Operand's Type.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64Operand.VectorArrangementSpecifier">
            <summary>
                Get Vector Arrangement Specifier.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64Operand.VectorElementSizeSpecifier">
            <summary>
                Get Vector Element Size Specifier.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm64.Arm64Operand.VectorIndex">
            <summary>
                Get Vector Index.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.Arm64.Arm64Operand.Create(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.Arm64.Arm64InstructionId,Gee.External.Capstone.Arm64.NativeArm64InstructionDetail@)">
            <summary>
                Create ARM64 Operands.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="instructionId">
                An instruction's unique identifier.
            </param>
            <param name="nativeInstructionDetail">
                A native ARM64 instruction detail.
            </param>
            <returns>
                An array of ARM64 operands.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.Arm64.Arm64Operand.#ctor(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.Arm64.Arm64InstructionId,Gee.External.Capstone.Arm64.NativeArm64Operand@)">
            <summary>
                Create an ARM64 Operand.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="instructionId">
                An instruction's unique identifier.
            </param>
            <param name="nativeOperand">
                A native ARM64 operand.
            </param>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.Arm64OperandType">
            <summary>
                ARM64 Operand Type.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64OperandType.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, operand type.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64OperandType.Register">
            <summary>
                Indicates a register operand.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64OperandType.Immediate">
            <summary>
                Indicates an immediate operand.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64OperandType.Memory">
            <summary>
                Indicates a memory operand.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64OperandType.FloatingPoint">
            <summary>
                Indicates a floating point operand.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64OperandType.CImmediate">
            <summary>
                Indicates a CImmediate operand.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64OperandType.MrsSystemRegister">
            <summary>
                Indicates a MRS system register operand.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64OperandType.MsrSystemRegister">
            <summary>
                Indicates a MSR system register operand.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64OperandType.PStateField">
            <summary>
                Indicates a Processor State (PSTATE) field operand.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64OperandType.SystemOperation">
            <summary>
                Indicates a system operation operand.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64OperandType.PrefetchOperation">
            <summary>
                Indicates a prefetch operation operand.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64OperandType.BarrierOperation">
            <summary>
                Indicates a barrier operation operand.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64OperandType.AtOperation">
            <summary>
                Indicates an Address Translation (AT) operation.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64OperandType.DcOperation">
            <summary>
                Indicates a Data Cache (DC) operation.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64OperandType.IcOperation">
            <summary>
                Indicates an Instruction Cache (IC) operation.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64OperandType.TlbiOperation">
            <summary>
                Indicates a Translation Lookaside Buffer (TLBI) operation.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.Arm64PrefetchOperation">
            <summary>
                ARM64 Prefetch Operation.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64PrefetchOperation.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, prefetch operation.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.Arm64PStateField">
            <summary>
                ARM64 Processor State (PSTATE) Field.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64PStateField.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, PSTATE field.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.Arm64Register">
            <summary>
                ARM64 Register.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.Arm64.Arm64Register.TryCreate(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.Arm64.Arm64RegisterId)">
            <summary>
                Create an ARM64 Register.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="id">
                The register's unique identifier.
            </param>
            <returns>
                An ARM64 register.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.Arm64.Arm64Register.#ctor(Gee.External.Capstone.Arm64.Arm64RegisterId,System.String)">
            <summary>
                Create an ARM64 Register.
            </summary>
            <param name="id">
                The register's unique identifier.
            </param>
            <param name="name">
                The register's name.
            </param>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.Arm64RegisterId">
            <summary>
                ARM64 Register Unique Identifier.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64RegisterId.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, register.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.Arm64ShiftOperation">
            <summary>
                ARM64 Shift Operation.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64ShiftOperation.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, shift operation.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.Arm64TlbiOperation">
            <summary>
                ARM64 Translation Lookaside Buffer (TLBI) Operation.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64TlbiOperation.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, TLBI operation.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.Arm64VectorArrangementSpecifier">
            <summary>
                ARM64 Vector Arrangement Specifier.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64VectorArrangementSpecifier.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, vector arrangement specifier.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.Arm64VectorElementSizeSpecifier">
            <summary>
                ARM64 Vector Element Size Specifier.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.Arm64VectorElementSizeSpecifier.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, vector element size specifier.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.CapstoneArm64Disassembler">
            <summary>
                Capstone ARM64 Disassembler.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.Arm64.CapstoneArm64Disassembler.#ctor(Gee.External.Capstone.Arm64.Arm64DisassembleMode)">
            <summary>
                Create a Capstone ARM Disassembler.
            </summary>
            <param name="disassembleMode">
                The hardware mode for the disassembler to use.
            </param>
            <exception cref="T:Gee.External.Capstone.CapstoneException">
                Thrown if a disassembler could not be created.
            </exception>
            <exception cref="T:System.OutOfMemoryException">
                Thrown if sufficient memory cannot be allocated to perform the operation as a rare indication that the
                system is under heavy load.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.Arm64.CapstoneArm64Disassembler.CreateInstruction(Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Create an Instruction.
            </summary>
            <param name="hInstruction">
                An instruction handle.
            </param>
            <returns>
                An ARM64 instruction.
            </returns>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.NativeArm64InstructionDetail">
            <summary>
                Native ARM64 Instruction Detail.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.NativeArm64InstructionDetail.ConditionCode">
            <summary>
                Condition Code.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.NativeArm64InstructionDetail.UpdateFlags">
            <summary>
                Update Flags Flag.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.NativeArm64InstructionDetail.WriteBack">
            <summary>
                Write Back Flag.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.NativeArm64InstructionDetail.OperandCount">
            <summary>
                Instruction's Operand Count.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.NativeArm64InstructionDetail.Operands">
            <summary>
                Instruction's Operands.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.NativeArm64MemoryOperandValue">
            <summary>
                Native ARM64 Memory Operand Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.NativeArm64MemoryOperandValue.Base">
            <summary>
                Base Register.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.NativeArm64MemoryOperandValue.Index">
            <summary>
                Index Register.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.NativeArm64MemoryOperandValue.Displacement">
            <summary>
                Displacement Value.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.NativeArm64Operand">
            <summary>
                Native ARM64 Operand.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.NativeArm64Operand.VectorIndex">
            <summary>
                Vector Index.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.NativeArm64Operand.VectorArrangementSpecifier">
            <summary>
                Vector Arrangement Specifier.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.NativeArm64Operand.VectorElementSizeSpecifier">
            <summary>
                Vector Element Size Specifier.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.NativeArm64Operand.Shift">
            <summary>
                Shift.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.NativeArm64Operand.ExtendOperation">
            <summary>
                Extend Operation.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.NativeArm64Operand.Type">
            <summary>
                Operand's Type.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.NativeArm64Operand.Value">
            <summary>
                Operand's Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.NativeArm64Operand.AccessType">
            <summary>
                Operand's Access Type.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.NativeArm64OperandShift">
            <summary>
                Native ARM64 Operand Shift.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.NativeArm64OperandShift.Operation">
            <summary>
                Shift Operation.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.NativeArm64OperandShift.Value">
            <summary>
                Shift Value.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm64.NativeArm64OperandValue">
            <summary>
                Native ARM64 Operand Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.NativeArm64OperandValue.Register">
            <summary>
                Register.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.NativeArm64OperandValue.Immediate">
            <summary>
                Immediate Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.NativeArm64OperandValue.FloatingPoint">
            <summary>
                Floating Point Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.NativeArm64OperandValue.Memory">
            <summary>
                Memory Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.NativeArm64OperandValue.PStateField">
            <summary>
                Processor State (PSTATE) Field.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.NativeArm64OperandValue.SystemOperation">
            <summary>
                System Operation.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.NativeArm64OperandValue.PrefetchOperation">
            <summary>
                Prefetch Operation.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm64.NativeArm64OperandValue.BarrierOperation">
            <summary>
                Barrier Operation.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm.ArmConditionCode">
            <summary>
                ARM Condition Code.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.ArmConditionCode.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, condition code.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm.ArmCpsFlag">
            <summary>
                ARM CPS Flag.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.ArmCpsFlag.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, CPS flag.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm.ArmCpsMode">
            <summary>
                ARM CPS Mode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.ArmCpsMode.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, CPS mode.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm.ArmDisassembleMode">
            <summary>
                ARM Disassemble Mode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.ArmDisassembleMode.Arm">
            <summary>
                Indicates binary code should be disassembled in 32-bit ARM mode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.ArmDisassembleMode.BigEndian">
            <summary>
                Indicates binary code should be disassembled in big-endian mode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.ArmDisassembleMode.LittleEndian">
            <summary>
                Indicates binary code should be disassembled in little-endian mode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.ArmDisassembleMode.CortexM">
            <summary>
                Indicates binary code should be disassembled with support for the ARM Cortex-M processor cores.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.ArmDisassembleMode.Thumb">
            <summary>
                Indicates binary code should be disassembled with support for the ARM Thumb and ARM Thumb-2
                instruction sets.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.ArmDisassembleMode.V8">
            <summary>
                Indicates binary code should be disassembled with support for the ARMv8 instruction set.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm.ArmInstruction">
            <summary>
                ARM Instruction.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.Arm.ArmInstruction.Create(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Create an ARM Instruction.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="hInstruction">
                An instruction handle.
            </param>
            <returns>
                An ARM instruction.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.Arm.ArmInstruction.#ctor(Gee.External.Capstone.Arm.ArmInstructionBuilder)">
            <summary>
                Create an ARM Instruction.
            </summary>
            <param name="builder">
                A builder to initialize the object with.
            </param>
        </member>
        <member name="T:Gee.External.Capstone.Arm.ArmInstructionBuilder">
            <summary>
                ARM Instruction Builder.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.Arm.ArmInstructionBuilder.Create">
            <summary>
                Create an ARM Instruction.
            </summary>
            <returns>
                An ARM instruction.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.Arm.ArmInstructionBuilder.CreateDetails(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Create Instruction's Details.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="hInstruction">
                An instruction handle.
            </param>
            <returns>
                The instruction's details.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.Arm.ArmInstructionBuilder.CreateDisassembleMode(Gee.External.Capstone.NativeDisassembleMode)">
            <summary>
                Create Disassemble Mode.
            </summary>
            <param name="nativeDisassembleMode">
                A native disassemble mode.
            </param>
            <returns>
                A disassemble mode.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.Arm.ArmInstructionBuilder.CreateId(System.Int32)">
            <summary>
                Create Instruction's Unique Identifier.
            </summary>
            <param name="id">
                An instruction's unique identifier.
            </param>
            <returns>
                The instruction's unique identifier.
            </returns>
        </member>
        <member name="T:Gee.External.Capstone.Arm.ArmInstructionDetail">
            <summary>
                ARM Instruction Detail.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmInstructionDetail.ConditionCode">
            <summary>
                Get Condition Code.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmInstructionDetail.CpsFlag">
            <summary>
                Get CPS Flag.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmInstructionDetail.CpsMode">
            <summary>
                Get CPS Mode.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmInstructionDetail.IsUserMode">
            <summary>
                Get User Mode Flag.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmInstructionDetail.MemoryBarrierOperation">
            <summary>
                Get Memory Barrier Operation.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmInstructionDetail.Operands">
            <summary>
                Get Instruction's Operands.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmInstructionDetail.UpdateFlags">
            <summary>
                Get Update Flags Flag.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmInstructionDetail.VectorDataType">
            <summary>
                Get Vector Data Type.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmInstructionDetail.VectorSize">
            <summary>
                Get Vector Size.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmInstructionDetail.WriteBack">
            <summary>
                Get Write Back Flag.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.Arm.ArmInstructionDetail.Create(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Create an ARM Instruction Detail.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="hInstruction">
                An instruction handle.
            </param>
            <returns>
                An ARM instruction detail.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.Arm.ArmInstructionDetail.#ctor(Gee.External.Capstone.Arm.ArmInstructionDetailBuilder)">
            <summary>
                Create an ARM Instruction Detail.
            </summary>
            <param name="builder">
                A builder to initialize the object with.
            </param>
        </member>
        <member name="T:Gee.External.Capstone.Arm.ArmInstructionDetailBuilder">
            <summary>
                ARM Instruction Detail Builder.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmInstructionDetailBuilder.ConditionCode">
            <summary>
                Get and Set Condition Code.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmInstructionDetailBuilder.CpsFlag">
            <summary>
                Get and Set CPS Flag.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmInstructionDetailBuilder.CpsMode">
            <summary>
                Get and Set CPS Mode.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmInstructionDetailBuilder.IsUserMode">
            <summary>
                Get and Set User Mode Flag.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmInstructionDetailBuilder.MemoryBarrierOperation">
            <summary>
                Get and Set Memory Barrier Operation.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmInstructionDetailBuilder.Operands">
            <summary>
                Get and Set Instruction's Operands.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmInstructionDetailBuilder.UpdateFlags">
            <summary>
                Get and Set Update Flags Flag.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmInstructionDetailBuilder.VectorDataType">
            <summary>
                Get and Set Vector Data Type.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmInstructionDetailBuilder.VectorSize">
            <summary>
                Get and Set Vector Size.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmInstructionDetailBuilder.WriteBack">
            <summary>
                Get and Set Write Back Flag.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.Arm.ArmInstructionDetailBuilder.Build(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Build an Instruction Detail.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="hInstruction">
                An instruction handle.
            </param>
        </member>
        <member name="M:Gee.External.Capstone.Arm.ArmInstructionDetailBuilder.Create">
            <summary>
                Create an ARM Instruction Detail.
            </summary>
            <returns>
                An ARM instruction detail.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.Arm.ArmInstructionDetailBuilder.CreateDisassembleMode(Gee.External.Capstone.NativeDisassembleMode)">
            <summary>
                Create Disassemble Mode.
            </summary>
            <param name="nativeDisassembleMode">
                A native disassemble mode.
            </param>
            <returns>
                A disassemble mode.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.Arm.ArmInstructionDetailBuilder.CreateInstructionGroup(Gee.External.Capstone.CapstoneDisassembler,System.Byte)">
            <summary>
                Create an Instruction Group.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="instructionGroupId">
                An instruction group's unique identifier.
            </param>
            <returns>
                An ARM instruction group.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.Arm.ArmInstructionDetailBuilder.CreateRegister(Gee.External.Capstone.CapstoneDisassembler,System.Int16)">
            <summary>
                Create a Register.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="registerId">
                A register's unique identifier.
            </param>
            <returns>
                An ARM register.
            </returns>
        </member>
        <member name="T:Gee.External.Capstone.Arm.ArmInstructionGroup">
            <summary>
                ARM Instruction Group.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.Arm.ArmInstructionGroup.Create(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.Arm.ArmInstructionGroupId)">
            <summary>
                Create an ARM Instruction Group.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="id">
                The instruction group's unique identifier.
            </param>
            <returns>
                An ARM instruction group.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.Arm.ArmInstructionGroup.#ctor(Gee.External.Capstone.Arm.ArmInstructionGroupId,System.String)">
            <summary>
                Create an ARM Instruction Group.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm.ArmInstructionGroupId">
            <summary>
                ARM Instruction Group Unique Identifier.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.ArmInstructionGroupId.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, instruction group.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm.ArmInstructionId">
            <summary>
                ARM Instruction Unique Identifier.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.ArmInstructionId.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, instruction.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm.ArmMemoryBarrierOperation">
            <summary>
                ARM Memory Barrier Operation.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.ArmMemoryBarrierOperation.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, memory barrier operation.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm.ArmMemoryOperandValue">
            <summary>
                ARM Memory Operand Value.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmMemoryOperandValue.Base">
            <summary>
                Get Base Register.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmMemoryOperandValue.Displacement">
            <summary>
                Get Displacement Value.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmMemoryOperandValue.Index">
            <summary>
                Get Index Register.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmMemoryOperandValue.LeftShit">
            <summary>
                Get Index Register's Left Shift Value.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmMemoryOperandValue.Scale">
            <summary>
                Get Index Register's Scale.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.Arm.ArmMemoryOperandValue.#ctor(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.Arm.NativeArmMemoryOperandValue@)">
            <summary>
                Create an ARM Memory Operand Value.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="nativeMemoryOperandValue">
                A native ARM memory operand value.
            </param>
        </member>
        <member name="T:Gee.External.Capstone.Arm.ArmOperand">
            <summary>
                ARM Operand.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.ArmOperand._accessType">
            <summary>
                Operand's Access Type.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.ArmOperand._floatingPoint">
            <summary>
                Floating Point Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.ArmOperand._immediate">
            <summary>
                Immediate Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.ArmOperand._memory">
            <summary>
                Memory Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.ArmOperand._register">
            <summary>
                Register Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.ArmOperand._setEndOperation">
            <summary>
                SETEND Operation.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.ArmOperand._shiftRegister">
            <summary>
                Shift Register.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.ArmOperand._shiftValue">
            <summary>
                Shift Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.ArmOperand._systemRegister">
            <summary>
                System Register Value.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmOperand.AccessType">
            <summary>
                Get Operand's Access Type.
            </summary>
            <remarks>
                Represents the operand's access type if, and only if, Diet Mode is disabled. To determine if Diet Mode
                is disabled, call <see cref="P:Gee.External.Capstone.Arm.ArmOperand.IsDietModeEnabled" />.
            </remarks>
            <exception cref="T:System.NotSupportedException">
                Thrown if Diet Mode is enabled.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmOperand.FloatingPoint">
            <summary>
                Get Floating Point Value.
            </summary>
            <remarks>
                Represents the operand's floating point value if, and only if, the operand's type is
                <see cref="F:Gee.External.Capstone.Arm.ArmOperandType.FloatingPoint" />. To determine the operand's type, call
                <see cref="P:Gee.External.Capstone.Arm.ArmOperand.Type" />.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the operand's type is not <see cref="F:Gee.External.Capstone.Arm.ArmOperandType.FloatingPoint" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmOperand.Immediate">
            <summary>
                Get Immediate Value.
            </summary>
            <remarks>
                Represents the operand's immediate value if the operand's type is
                <see cref="F:Gee.External.Capstone.Arm.ArmOperandType.CImmediate" />, <see cref="F:Gee.External.Capstone.Arm.ArmOperandType.Immediate" />, or
                <see cref="F:Gee.External.Capstone.Arm.ArmOperandType.PImmediate" />. To determine the operand's type, call <see cref="P:Gee.External.Capstone.Arm.ArmOperand.Type" />.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the operand's type is not <see cref="F:Gee.External.Capstone.Arm.ArmOperandType.CImmediate" />,
                <see cref="F:Gee.External.Capstone.Arm.ArmOperandType.Immediate" />, or <see cref="F:Gee.External.Capstone.Arm.ArmOperandType.PImmediate" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmOperand.IsDietModeEnabled">
            <summary>
                Determine if Diet Mode is Enabled.
            </summary>
            <remarks>
                Indicates if Diet Mode is enabled. A boolean true indicates it is enabled. A boolean false otherwise.
            </remarks>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmOperand.IsSubtracted">
            <summary>
                Get Subtracted Flag.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmOperand.Memory">
            <summary>
                Get Memory Value.
            </summary>
            <remarks>
                Represents the operand's memory value if, and only if, the operand's type is
                <see cref="F:Gee.External.Capstone.Arm.ArmOperandType.Memory" />. To determine the operand's type, call <see cref="P:Gee.External.Capstone.Arm.ArmOperand.Type" />.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the operand's type is not <see cref="F:Gee.External.Capstone.Arm.ArmOperandType.Memory" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmOperand.NeonLane">
            <summary>
                Get Neon Lane Value.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmOperand.Register">
            <summary>
                Get Register Value.
            </summary>
            <remarks>
                Represents the operand's register value if, and only if, the operand's type is
                <see cref="F:Gee.External.Capstone.Arm.ArmOperandType.Register" />. To determine the operand's type, call <see cref="P:Gee.External.Capstone.Arm.ArmOperand.Type" />.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the operand's type is not <see cref="F:Gee.External.Capstone.Arm.ArmOperandType.Register" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmOperand.SetEndOperation">
            <summary>
                Get SETEND Operation.
            </summary>
            <remarks>
                Represents the operand's SETEND operation if, and only if, the operand's type is
                <see cref="F:Gee.External.Capstone.Arm.ArmOperandType.SetEndOperation" />. To determine the operand's type, call
                <see cref="P:Gee.External.Capstone.Arm.ArmOperand.Type" />.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the operand's type is not <see cref="F:Gee.External.Capstone.Arm.ArmOperandType.SetEndOperation" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmOperand.ShiftOperation">
            <summary>
                Get Shift Operation.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmOperand.ShiftRegister">
            <summary>
                Get Shift Register.
            </summary>
            <remarks>
                Conveniently represents the operand's shift register if the operand's shift operation is not
                <see cref="F:Gee.External.Capstone.Arm.ArmShiftOperation.Invalid" /> and greater than or equal to
                <see cref="F:Gee.External.Capstone.Arm.ArmShiftOperation.ARM_SFT_ASR_REG" />. To determine the operand's shift operation,
                call <see cref="P:Gee.External.Capstone.Arm.ArmOperand.ShiftOperation" />.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the shift operation is equal to <see cref="F:Gee.External.Capstone.Arm.ArmShiftOperation.Invalid" />, or if the shift
                operation is less than <see cref="F:Gee.External.Capstone.Arm.ArmShiftOperation.ARM_SFT_ASR_REG" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmOperand.ShiftValue">
            <summary>
                Get Shift Value.
            </summary>
            <remarks>
                Represents the operand's shift value if, and only if, the operand's shift operation is not
                <see cref="F:Gee.External.Capstone.Arm.ArmShiftOperation.Invalid" />. To determine the operand's shift operation, call
                <see cref="P:Gee.External.Capstone.Arm.ArmOperand.ShiftOperation" />.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the shift operation is <see cref="F:Gee.External.Capstone.Arm.ArmShiftOperation.Invalid" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmOperand.SystemRegister">
            <summary>
                Get System Register.
            </summary>
            <remarks>
                Represents the operand's system register if, and only if, the operand's type is
                <see cref="F:Gee.External.Capstone.Arm.ArmOperandType.SystemRegister" />. To determine the operand's type, call
                <see cref="P:Gee.External.Capstone.Arm.ArmOperand.Type" />.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the operand's type is not <see cref="F:Gee.External.Capstone.Arm.ArmOperandType.SystemRegister" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmOperand.Type">
            <summary>
                Get Operand's Type.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Arm.ArmOperand.VectorIndex">
            <summary>
                Get Vector Index.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.Arm.ArmOperand.Create(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.Arm.NativeArmInstructionDetail@)">
            <summary>
                Create ARM Operands.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="nativeInstructionDetail">
                A native ARM instruction detail.
            </param>
            <returns>
                An array of ARM operands.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.Arm.ArmOperand.#ctor(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.Arm.NativeArmOperand@)">
            <summary>
                Create an ARM Operand.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="nativeOperand">
                A native ARM operand.
            </param>
        </member>
        <member name="T:Gee.External.Capstone.Arm.ArmOperandType">
            <summary>
                ARM Operand Type.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.ArmOperandType.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, operand type.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.ArmOperandType.Register">
            <summary>
                Indicates a register operand.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.ArmOperandType.Immediate">
            <summary>
                Indicates an immediate operand.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.ArmOperandType.Memory">
            <summary>
                Indicates a memory operand.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.ArmOperandType.FloatingPoint">
            <summary>
                Indicates a floating point operand.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.ArmOperandType.CImmediate">
            <summary>
                Indicates a CImmediate operand.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.ArmOperandType.PImmediate">
            <summary>
                Indicates a PImmediate operand.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.ArmOperandType.SetEndOperation">
            <summary>
                Indicates a SETEND operation operand.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.ArmOperandType.SystemRegister">
            <summary>
                Indicates a system register operand.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm.ArmRegister">
            <summary>
                ARM Register.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.Arm.ArmRegister.TryCreate(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.Arm.ArmRegisterId)">
            <summary>
                Create an ARM Register.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="id">
                The register's unique identifier.
            </param>
            <returns>
                An ARM register.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.Arm.ArmRegister.#ctor(Gee.External.Capstone.Arm.ArmRegisterId,System.String)">
            <summary>
                Create an ARM Register.
            </summary>
            <param name="id">
                The register's unique identifier.
            </param>
            <param name="name">
                The register's name.
            </param>
        </member>
        <member name="T:Gee.External.Capstone.Arm.ArmRegisterId">
            <summary>
                ARM Register Unique Identifier.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.ArmRegisterId.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, register.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm.ArmSetEndOperation">
            <summary>
                ARM SETEND Operation.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.ArmSetEndOperation.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, SETEND operation.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm.ArmShiftOperation">
            <summary>
                ARM Shift Operation.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.ArmShiftOperation.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, shift operation.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm.ArmSystemRegister">
            <summary>
                ARM System Register.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.ArmSystemRegister.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, system register.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm.ArmVectorDataType">
            <summary>
                ARM Vector Data Type.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.ArmVectorDataType.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, vector data type.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm.CapstoneArmDisassembler">
            <summary>
                Capstone ARM Disassembler.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.Arm.CapstoneArmDisassembler.#ctor(Gee.External.Capstone.Arm.ArmDisassembleMode)">
            <summary>
                Create a Capstone ARM Disassembler.
            </summary>
            <param name="disassembleMode">
                The hardware mode for the disassembler to use.
            </param>
            <exception cref="T:Gee.External.Capstone.CapstoneException">
                Thrown if a disassembler could not be created.
            </exception>
            <exception cref="T:System.OutOfMemoryException">
                Thrown if sufficient memory cannot be allocated to perform the operation as a rare indication that the
                system is under heavy load.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.Arm.CapstoneArmDisassembler.CreateInstruction(Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Create an Instruction.
            </summary>
            <param name="hInstruction">
                An instruction handle.
            </param>
            <returns>
                An ARM instruction.
            </returns>
        </member>
        <member name="T:Gee.External.Capstone.Arm.NativeArmInstructionDetail">
            <summary>
                Native ARM Instruction Detail.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.NativeArmInstructionDetail.IsUserMode">
            <summary>
                User Mode Flag.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.NativeArmInstructionDetail.VectorSize">
            <summary>
                Vector Size.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.NativeArmInstructionDetail.VectorDataType">
            <summary>
                Vector Data Type.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.NativeArmInstructionDetail.CpsMode">
            <summary>
                CPS Mode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.NativeArmInstructionDetail.CpsFlag">
            <summary>
                CPS Flag.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.NativeArmInstructionDetail.ConditionCode">
            <summary>
                Condition Code.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.NativeArmInstructionDetail.UpdateFlags">
            <summary>
                Update Flags Flag.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.NativeArmInstructionDetail.WriteBack">
            <summary>
                Write Back Flag.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.NativeArmInstructionDetail.MemoryBarrierOperation">
            <summary>
                Memory Barrier Operation Operation.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.NativeArmInstructionDetail.OperandCount">
            <summary>
                Instruction's Operands' Count.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.NativeArmInstructionDetail.Operands">
            <summary>
                Instruction's Operands.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm.NativeArmMemoryOperandValue">
            <summary>
                Native ARM Memory Operand Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.NativeArmMemoryOperandValue.Base">
            <summary>
                Base Register.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.NativeArmMemoryOperandValue.Index">
            <summary>
                Index Register.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.NativeArmMemoryOperandValue.Scale">
            <summary>
                Index Register's Scale.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.NativeArmMemoryOperandValue.Displacement">
            <summary>
                Displacement Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.NativeArmMemoryOperandValue.LeftShift">
            <summary>
                Index Register's Left Shift Value.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm.NativeArmOperand">
            <summary>
                Native ARM Operand.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.NativeArmOperand.VectorIndex">
            <summary>
                Vector Index.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.NativeArmOperand.Shift">
            <summary>
                Shift.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.NativeArmOperand.Type">
            <summary>
                Operand's Type.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.NativeArmOperand.Value">
            <summary>
                Operand's Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.NativeArmOperand.IsSubtracted">
            <summary>
                Operand's Subtracted Flag.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.NativeArmOperand.AccessType">
            <summary>
                Operand's Access Type.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.NativeArmOperand.NeonLane">
            <summary>
                Neon Lane Value.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm.NativeArmOperandShift">
            <summary>
                Native ARM Operand Shift.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.NativeArmOperandShift.Operation">
            <summary>
                Shift Operation.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.NativeArmOperandShift.Value">
            <summary>
                Shift Value.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Arm.NativeArmOperandValue">
            <summary>
                Native ARM Operand Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.NativeArmOperandValue.Register">
            <summary>
                Register Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.NativeArmOperandValue.Immediate">
            <summary>
                Immediate Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.NativeArmOperandValue.FloatingPoint">
            <summary>
                Floating Point Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.NativeArmOperandValue.Memory">
            <summary>
                Memory Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Arm.NativeArmOperandValue.SetEndOperation">
            <summary>
                SETEND Operation.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.CapstoneDisassembler">
            <summary>
                Capstone Disassembler.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.CapstoneDisassembler.IsArm64Supported">
            <summary>
                Determine if the ARM64 Architecture is Supported.
            </summary>
            <remarks>
                Indicates if the ARM64 architecture is supported. A boolean true indicates it is supported. A boolean
                false otherwise.
            </remarks>
        </member>
        <member name="P:Gee.External.Capstone.CapstoneDisassembler.IsArmSupported">
            <summary>
                Determine if the ARM Architecture is Supported.
            </summary>
            <remarks>
                Indicates if the ARM architecture is supported. A boolean true indicates it is supported. A boolean
                false otherwise.
            </remarks>
        </member>
        <member name="P:Gee.External.Capstone.CapstoneDisassembler.IsDietModeEnabled">
            <summary>
                Determine if Diet Mode is Enabled.
            </summary>
            <remarks>
                Indicates if Diet Mode is enabled. A boolean true indicates it is enabled. A boolean false otherwise.
            </remarks>
        </member>
        <member name="P:Gee.External.Capstone.CapstoneDisassembler.IsEvmSupported">
            <summary>
                Determine if the Ethereum EVM Architecture is Supported.
            </summary>
            <remarks>
                Indicates if the Ethereum EVM architecture is supported. A boolean true indicates it is supported. A
                boolean false otherwise.
            </remarks>
        </member>
        <member name="P:Gee.External.Capstone.CapstoneDisassembler.IsM680XSupported">
            <summary>
                Determine if the M680X Architecture is Supported.
            </summary>
            <remarks>
                Indicates if the M680X architecture is supported. A boolean true indicates it is supported. A boolean
                false otherwise.
            </remarks>
        </member>
        <member name="P:Gee.External.Capstone.CapstoneDisassembler.IsM68KSupported">
            <summary>
                Determine if the M68K Architecture is Supported.
            </summary>
            <remarks>
                Indicates if the M68K architecture is supported. A boolean true indicates it is supported. A boolean
                false otherwise.
            </remarks>
        </member>
        <member name="P:Gee.External.Capstone.CapstoneDisassembler.IsMipsSupported">
            <summary>
                Determine if the MIPS Architecture is Supported.
            </summary>
            <remarks>
                Indicates if the MIPS architecture is supported. A boolean true indicates it is supported. A boolean
                false otherwise.
            </remarks>
        </member>
        <member name="P:Gee.External.Capstone.CapstoneDisassembler.IsPowerPcSupported">
            <summary>
                Determine if the PowerPC Architecture is Supported.
            </summary>
            <remarks>
                Indicates if the PowerPC architecture is supported. A boolean true indicates it is supported. A
                boolean false otherwise.
            </remarks>
        </member>
        <member name="P:Gee.External.Capstone.CapstoneDisassembler.IsSparcSupported">
            <summary>
                Determine if the SPARC Architecture is Supported.
            </summary>
            <remarks>
                Indicates if the SPARC architecture is supported. A boolean true indicates it is supported. A boolean
                false otherwise.
            </remarks>
        </member>
        <member name="P:Gee.External.Capstone.CapstoneDisassembler.IsSystemZSupported">
            <summary>
                Determine if the SystemZ Architecture is Supported.
            </summary>
            <remarks>
                Indicates if the SystemZ architecture is supported. A boolean true indicates it is supported. A
                boolean false otherwise.
            </remarks>
        </member>
        <member name="P:Gee.External.Capstone.CapstoneDisassembler.IsTms320C64XSupported">
            <summary>
                Determine if the TMS320C64X Architecture is Supported.
            </summary>
            <remarks>
                Indicates if the TMS320C64X architecture is supported. A boolean true indicates it is supported. A
                boolean false otherwise.
            </remarks>
        </member>
        <member name="P:Gee.External.Capstone.CapstoneDisassembler.IsX86ReduceModeEnabled">
            <summary>
                Determine if X86 Reduce Mode is Enabled.
            </summary>
            <remarks>
                Indicates if X86 Reduce Mode is enabled. A boolean true indicates it is enabled. A boolean false
                otherwise.
            </remarks>
        </member>
        <member name="P:Gee.External.Capstone.CapstoneDisassembler.IsX86Supported">
            <summary>
                Determine if the X86 Architecture is Supported.
            </summary>
            <remarks>
                Indicates if the X86 architecture is supported. A boolean true indicates it is supported. A boolean
                false otherwise.
            </remarks>
        </member>
        <member name="P:Gee.External.Capstone.CapstoneDisassembler.IsXCoreSupported">
            <summary>
                Determine if the XCore Architecture is Supported.
            </summary>
            <remarks>
                Indicates if the XCore architecture is supported. A boolean true indicates it is supported. A boolean
                false otherwise.
            </remarks>
        </member>
        <member name="P:Gee.External.Capstone.CapstoneDisassembler.Version">
            <summary>
                Get Capstone Library's Version.
            </summary>
            <value>
                The Capstone library's version.
            </value>
        </member>
        <member name="P:Gee.External.Capstone.CapstoneDisassembler.DisassembleArchitecture">
            <summary>
                Get Disassemble Architecture.
            </summary>
            <remarks>
                Represents the disassembler's hardware architecture.
            </remarks>
        </member>
        <member name="P:Gee.External.Capstone.CapstoneDisassembler.EnableInstructionDetails">
            <summary>
                Enable or Disable Instruction Details.
            </summary>
            <exception cref="T:Gee.External.Capstone.CapstoneException">
                Thrown if the instruction details option could not be set.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler is disposed.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.CapstoneDisassembler.EnableSkipDataMode">
            <summary>
                Enable or Disable Skip Data Mode.
            </summary>
            <exception cref="T:Gee.External.Capstone.CapstoneException">
                Thrown if the Skip Data Mode option could not be set.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler is disposed.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.CapstoneDisassembler.Handle">
            <summary>
                Get Disassembler's Handle.
            </summary>
            <remarks>
                Represents the disassembler's native handle.
            </remarks>
        </member>
        <member name="P:Gee.External.Capstone.CapstoneDisassembler.NativeDisassembleMode">
            <summary>
                Get Native Disassemble Mode.
            </summary>
            <remarks>
                Represents the disassembler's native hardware mode.
            </remarks>
        </member>
        <member name="P:Gee.External.Capstone.CapstoneDisassembler.SkipDataInstructionMnemonic">
            <summary>
                Get and Set Skip Data Instruction Mnemonic.
            </summary>
            <exception cref="T:System.ArgumentNullException">
                Thrown if the value is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.CapstoneDisassembler.CreateArm64Disassembler(Gee.External.Capstone.Arm64.Arm64DisassembleMode)">
            <summary>
                Create an ARM64 Disassembler.
            </summary>
            <param name="disassembleMode">
                The hardware mode for the disassembler to use.
            </param>
            <returns>
                An ARM64 disassembler.
            </returns>
            <exception cref="T:Gee.External.Capstone.CapstoneException">
                Thrown if a disassembler could not be created.
            </exception>
            <exception cref="T:System.OutOfMemoryException">
                Thrown if sufficient memory cannot be allocated to perform the operation as a rare indication that the
                system is under heavy load.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.CapstoneDisassembler.CreateArmDisassembler(Gee.External.Capstone.Arm.ArmDisassembleMode)">
            <summary>
                Create an ARM Disassembler.
            </summary>
            <param name="disassembleMode">
                The hardware mode for the disassembler to use.
            </param>
            <returns>
                An ARM disassembler.
            </returns>
            <exception cref="T:Gee.External.Capstone.CapstoneException">
                Thrown if a disassembler could not be created.
            </exception>
            <exception cref="T:System.OutOfMemoryException">
                Thrown if sufficient memory cannot be allocated to perform the operation as a rare indication that the
                system is under heavy load.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.CapstoneDisassembler.CreateM68KDisassembler(Gee.External.Capstone.M68K.M68KDisassembleMode)">
            <summary>
                Create an M68K Disassembler.
            </summary>
            <param name="disassembleMode">
                The hardware mode for the disassembler to use.
            </param>
            <returns>
                An M68K disassembler.
            </returns>
            <exception cref="T:Gee.External.Capstone.CapstoneException">
                Thrown if a disassembler could not be created.
            </exception>
            <exception cref="T:System.OutOfMemoryException">
                Thrown if sufficient memory cannot be allocated to perform the operation as a rare indication that the
                system is under heavy load.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.CapstoneDisassembler.CreateMipsDisassembler(Gee.External.Capstone.Mips.MipsDisassembleMode)">
            <summary>
                Create a MIPS Disassembler.
            </summary>
            <param name="disassembleMode">
                The hardware mode for the disassembler to use.
            </param>
            <returns>
                A MIPS disassembler.
            </returns>
            <exception cref="T:Gee.External.Capstone.CapstoneException">
                Thrown if a disassembler could not be created.
            </exception>
            <exception cref="T:System.OutOfMemoryException">
                Thrown if sufficient memory cannot be allocated to perform the operation as a rare indication that the
                system is under heavy load.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.CapstoneDisassembler.CreatePowerPcDisassembler(Gee.External.Capstone.PowerPc.PowerPcDisassembleMode)">
            <summary>
                Create a PowerPC Disassembler.
            </summary>
            <param name="disassembleMode">
                The hardware mode for the disassembler to use.
            </param>
            <returns>
                A PowerPC disassembler.
            </returns>
            <exception cref="T:Gee.External.Capstone.CapstoneException">
                Thrown if a disassembler could not be created.
            </exception>
            <exception cref="T:System.OutOfMemoryException">
                Thrown if sufficient memory cannot be allocated to perform the operation as a rare indication that the
                system is under heavy load.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.CapstoneDisassembler.CreateX86Disassembler(Gee.External.Capstone.X86.X86DisassembleMode)">
            <summary>
                Create an X86 Disassembler.
            </summary>
            <param name="disassembleMode">
                The hardware mode for the disassembler to use.
            </param>
            <returns>
                An X86 disassembler.
            </returns>
            <exception cref="T:Gee.External.Capstone.CapstoneException">
                Thrown if a disassembler could not be created.
            </exception>
            <exception cref="T:System.OutOfMemoryException">
                Thrown if sufficient memory cannot be allocated to perform the operation as a rare indication that the
                system is under heavy load.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.CapstoneDisassembler.CreateXCoreDisassembler(Gee.External.Capstone.XCore.XCoreDisassembleMode)">
            <summary>
                Create an XCore Disassembler.
            </summary>
            <param name="disassembleMode">
                The hardware mode for the disassembler to use.
            </param>
            <returns>
                An XCore disassembler.
            </returns>
            <exception cref="T:Gee.External.Capstone.CapstoneException">
                Thrown if a disassembler could not be created.
            </exception>
            <exception cref="T:System.OutOfMemoryException">
                Thrown if sufficient memory cannot be allocated to perform the operation as a rare indication that the
                system is under heavy load.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.CapstoneDisassembler.ThrowIfDietModeIsEnabled">
            <summary>
                Throw an Exception if Diet Mode is Enabled.
            </summary>
            <exception cref="T:System.NotSupportedException">
                Thrown if Diet Mode is enabled.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.CapstoneDisassembler.ThrowIfValueIsNullReference``1(System.String,``0)">
            <summary>
                Throw an Exception if a Value is a Null Reference.
            </summary>
            <typeparam name="T">
                The type of the value.
            </typeparam>
            <param name="name">
                The name of the parameter the value was passed as an argument to.
            </param>
            <param name="value">
                The value.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if the value is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.CapstoneDisassembler.Dispose">
            <summary>
                Dispose Object.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.CapstoneDisassembler`8">
            <summary>
                Capstone Disassembler.
            </summary>
            <typeparam name="TDisassembleMode">
                The type of the hardware mode for the disassembler to use.
            </typeparam>
            <typeparam name="TInstruction">
                The type of the disassembled instructions.
            </typeparam>
            <typeparam name="TInstructionDetail">
                The type of the instructions' details.
            </typeparam>
            <typeparam name="TInstructionGroup">
                The type of the instructions' architecture specific instruction groups.
            </typeparam>
            <typeparam name="TInstructionGroupId">
                The type of the instructions' architecture specific instruction group unique identifiers.
            </typeparam>
            <typeparam name="TInstructionId">
                The type of the instructions' unique identifiers.
            </typeparam>
            <typeparam name="TRegister">
                The type of the instructions' architecture specific registers.
            </typeparam>
            <typeparam name="TRegisterId">
                The type of the instructions' architecture specific register unique identifiers.
            </typeparam>
        </member>
        <member name="F:Gee.External.Capstone.CapstoneDisassembler`8._disassembleArchitecture">
            <summary>
                Disassemble Architecture.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.CapstoneDisassembler`8._disassembleMode">
            <summary>
                Disassemble Mode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.CapstoneDisassembler`8._disassembleSyntax">
            <summary>
                Disassemble Syntax.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.CapstoneDisassembler`8._enableInstructionDetails">
            <summary>
                Enable Instruction Details Flag.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.CapstoneDisassembler`8._enableSkipDataMode">
            <summary>
                Enable Skip Data Mode Flag.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.CapstoneDisassembler`8._handle">
            <summary>
                Disassembler's Handle.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.CapstoneDisassembler`8._nativeDisassembleMode">
            <summary>
                Native Disassemble Mode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.CapstoneDisassembler`8._skipDataCallback">
            <summary>
                Skip Data Callback.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.CapstoneDisassembler`8._skipDataInstructionMnemonic">
            <summary>
                Skip Data Instruction Mnemonic.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.CapstoneDisassembler`8.DisassembleArchitecture">
            <summary>
                Get Disassemble Architecture.
            </summary>
            <remarks>
                Represents the disassembler's hardware architecture.
            </remarks>
        </member>
        <member name="P:Gee.External.Capstone.CapstoneDisassembler`8.DisassembleMode">
            <summary>
                Get and Set Disassemble Mode.
            </summary>
            <remarks>
                Represents the disassembler's hardware mode.
            </remarks>
            <exception cref="T:Gee.External.Capstone.CapstoneException">
                Thrown if the disassemble mode option could not be set.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler handle is disposed.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.CapstoneDisassembler`8.DisassembleSyntax">
            <summary>
                Get and Set Disassemble Syntax.
            </summary>
            <exception cref="T:Gee.External.Capstone.CapstoneException">
                Thrown if the disassemble syntax option could not be set.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler is disposed.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.CapstoneDisassembler`8.EnableInstructionDetails">
            <summary>
                Enable or Disable Instruction Details.
            </summary>
            <exception cref="T:Gee.External.Capstone.CapstoneException">
                Thrown if the instruction details option could not be set.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler is disposed.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.CapstoneDisassembler`8.EnableSkipDataMode">
            <summary>
                Enable or Disable Skip Data Mode.
            </summary>
            <exception cref="T:Gee.External.Capstone.CapstoneException">
                Thrown if the Skip Data Mode option could not be set.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler is disposed.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.CapstoneDisassembler`8.Handle">
            <summary>
                Get Disassembler's Handle.
            </summary>
            <remarks>
                Represents the disassembler's native handle.
            </remarks>
        </member>
        <member name="P:Gee.External.Capstone.CapstoneDisassembler`8.NativeDisassembleMode">
            <summary>
                Get Native Disassemble Mode.
            </summary>
            <remarks>
                Represents the disassembler's native hardware mode.
            </remarks>
        </member>
        <member name="P:Gee.External.Capstone.CapstoneDisassembler`8.SkipDataCallback">
            <summary>
                Get and Set Skip Data Callback.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler is disposed.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.CapstoneDisassembler`8.SkipDataInstructionMnemonic">
            <summary>
                Get and Set Skip Data Instruction Mnemonic.
            </summary>
            <exception cref="T:System.ArgumentNullException">
                Thrown if the value is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.CapstoneDisassembler`8.#ctor(Gee.External.Capstone.DisassembleArchitecture,`0)">
            <summary>
                Create a Disassembler.
            </summary>
            <param name="disassembleArchitecture">
                The hardware architecture for the disassembler to use.
            </param>
            <param name="disassembleMode">
                The hardware mode for the disassembler to use.
            </param>
            <exception cref="T:Gee.External.Capstone.CapstoneException">
                Thrown if a disassembler could not be created.
            </exception>
            <exception cref="T:System.ArgumentException">
                Thrown if the disassemble architecture is invalid, or if the disassemble mode is invalid or
                unsupported by the disassemble architecture.
            </exception>
            <exception cref="T:System.OutOfMemoryException">
                Thrown if sufficient memory cannot be allocated to perform the operation as a rare indication that the
                system is under heavy load.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.CapstoneDisassembler`8.CreateInstruction(Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Create an Instruction.
            </summary>
            <param name="hInstruction">
                An instruction handle.
            </param>
            <returns>
                An instruction.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.CapstoneDisassembler`8.Disassemble(System.Byte[])">
            <summary>
                Disassemble Binary Code.
            </summary>
            <param name="binaryCode">
                An array of bytes representing the binary code to disassemble.
            </param>
            <returns>
                An array of disassembled instructions.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if the binary code array is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.CapstoneDisassembler`8.Disassemble(System.Byte[],System.Int64)">
            <summary>
                Disassemble Binary Code.
            </summary>
            <param name="binaryCode">
                An array of bytes representing the binary code to disassemble.
            </param>
            <param name="startingAddress">
                The address of the first instruction in the binary code array.
            </param>
            <returns>
                An array of disassembled instructions.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if the binary code array is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.CapstoneDisassembler`8.Disassemble(System.Byte[],System.Int64,System.Int32)">
            <summary>
                Disassemble Binary Code.
            </summary>
            <param name="binaryCode">
                An array of bytes representing the binary code to disassemble.
            </param>
            <param name="startingAddress">
                The address of the first instruction in the binary code array.
            </param>
            <param name="count">
                The maximum number of instructions to disassemble.
            </param>
            <returns>
                An array of disassembled instructions.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if the binary code array is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.CapstoneDisassembler`8.Dispose">
            <summary>
                Dispose Object.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.CapstoneDisassembler`8.GetInstructionGroupName(`4)">
            <summary>
                Get an Instruction Group's Name.
            </summary>
            <param name="instructionGroupId">
                An instruction group's unique identifier.
            </param>
            <returns>
                The instruction group's name.
            </returns>
            <exception cref="T:System.ArgumentException">
                Thrown if the instruction group's unique identifier is invalid.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler is disposed.
            </exception>
            <exception cref="T:System.NotSupportedException">
                Thrown if Diet Mode is enabled.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.CapstoneDisassembler`8.GetRegisterName(`7)">
            <summary>
                Get a Register's Name.
            </summary>
            <param name="registerId">
                A register's unique identifier.
            </param>
            <returns>
                The register's name.
            </returns>
            <exception cref="T:System.ArgumentException">
                Thrown if the register's unique identifier is invalid.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler is disposed.
            </exception>
            <exception cref="T:System.NotSupportedException">
                Thrown if diet mode is enabled.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.CapstoneDisassembler`8.Iterate(System.Byte[])">
            <summary>
                Disassemble Binary Code Iteratively.
            </summary>
            <param name="binaryCode">
                An array of bytes representing the binary code to disassemble.
            </param>
            <returns>
                A deferred collection of disassembled instructions.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if the binary code array is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.CapstoneDisassembler`8.Iterate(System.Byte[],System.Int64)">
            <summary>
                Disassemble Binary Code Iteratively.
            </summary>
            <param name="binaryCode">
                An array of bytes representing the binary code to disassemble.
            </param>
            <param name="startingAddress">
                The address of the first instruction in the binary code array.
            </param>
            <returns>
                A deferred collection of disassembled instructions.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if the binary code array is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.CapstoneDisassembler`8.ResetInstructionMnemonic(`5)">
            <summary>
                Reset an Instruction's Mnemonic.
            </summary>
            <param name="instructionId">
                An instruction unique identifier.
            </param>
            <exception cref="T:Gee.External.Capstone.CapstoneException">
                Thrown if the instruction mnemonic could not be reset.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.CapstoneDisassembler`8.SetInstructionMnemonic(`5,System.String)">
            <summary>
                Set an Instruction's Mnemonic.
            </summary>
            <param name="instructionId">
                An instruction's unique identifier.
            </param>
            <param name="instructionMnemonic">
                A mnemonic to associate with the instruction.
            </param>
            <exception cref="T:Gee.External.Capstone.CapstoneException">
                Thrown if the instruction mnemonic could not be set.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if the instruction mnemonic is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.CapstoneDisassembler`8.ThrowIfDisassemblerIsDisposed">
            <summary>
                Throw an Exception if Disassembler is Disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler is disposed.
            </exception>
        </member>
        <member name="T:Gee.External.Capstone.CapstoneException">
            <summary>
                Capstone Exception.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.CapstoneException.#ctor(System.String)">
            <summary>
                Create a Capstone Exception.
            </summary>
            <param name="detailMessage">
                A detail message describing the reason the exception was thrown.
            </param>
        </member>
        <member name="M:Gee.External.Capstone.CapstoneException.#ctor(System.String,System.Exception)">
            <summary>
                Create a Capstone Exception.
            </summary>
            <param name="detailMessage">
                A detail message describing the reason the exception was thrown.
            </param>
            <param name="innerException">
                An exception that is the cause of this exception being thrown.
            </param>
        </member>
        <member name="T:Gee.External.Capstone.DisassembleArchitecture">
            <summary>
                Disassemble Architecture.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.DisassembleArchitecture.Arm">
            <summary>
                ARM Architecture.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.DisassembleArchitecture.Arm64">
            <summary>
                ARM64 Architecture.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.DisassembleArchitecture.Mips">
            <summary>
               MIPS Architecture.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.DisassembleArchitecture.X86">
            <summary>
                X86 Architecture.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.DisassembleArchitecture.PowerPc">
            <summary>
                PowerPC Architecture.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.DisassembleArchitecture.Sparc">
            <summary>
                Sparc Architecture.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.DisassembleArchitecture.SystemZ">
            <summary>
                SystemZ Architecture.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.DisassembleArchitecture.XCore">
            <summary>
                XCore Architecture.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.DisassembleArchitecture.M68K">
            <summary>
                M68K Architecture.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.DisassembleArchitecture.Tms320C64X">
            <summary>
                TMS320C64x Architecture.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.DisassembleArchitecture.M680X">
            <summary>
                680X Architecture.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.DisassembleArchitecture.Evm">
            <summary>
                Ethereum EVM Architecture.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.DisassembleSyntax">
            <summary>
                Disassemble Syntax.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.DisassembleSyntax.Att">
            <summary>
                Indicates a disassembler should use AT&amp;T syntax for generated assembly code.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.DisassembleSyntax.Intel">
            <summary>
                Indicates a disassembler should use Intel syntax for generated assembly code.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.DisassembleSyntax.Masm">
            <summary>
                Indicates a disassembler should use MASM syntax for generated assembly code.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Instruction`8">
            <summary>
                Disassembled Instruction.
            </summary>
            <typeparam name="TSelf">
                This type.
            </typeparam>
            <typeparam name="TDetail">
                The type of the instruction's details.
            </typeparam>
            <typeparam name="TDisassembleMode">
                The type of the hardware mode the instruction was disassembled for.
            </typeparam>
            <typeparam name="TGroup">
                The type of the instruction's architecture specific instruction groups.
            </typeparam>
            <typeparam name="TGroupId">
                The type of the instruction's architecture specific instruction group unique identifiers.
            </typeparam>
            <typeparam name="TId">
                The type of the instruction's unique identifier.
            </typeparam>
            <typeparam name="TRegister">
                The type of the instruction's architecture specific registers.
            </typeparam>
            <typeparam name="TRegisterId">
                The type of the instruction's architecture specific register unique identifiers.
            </typeparam>
        </member>
        <member name="F:Gee.External.Capstone.Instruction`8._details">
            <summary>
                Instruction's Details.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Instruction`8._mnemonic">
            <summary>
                Instruction's Mnemonic.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Instruction`8._operand">
            <summary>
                Instruction's Operand Text.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Instruction`8.Address">
            <summary>
                Get Instruction's Address (EIP).
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Instruction`8.Bytes">
            <summary>
                Get Instruction's Machine Bytes.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Instruction`8.Details">
            <summary>
                Get Instruction's Details.
            </summary>
            <remarks>
                Represents the instruction's details if, and only if, the instruction was disassembled with details. A
                null reference otherwise. To determine if the instruction was disassembled with details, call
                <see cref="P:Gee.External.Capstone.Instruction`8.HasDetails" />. 
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the instruction was disassembled with no details.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.Instruction`8.DisassembleArchitecture">
            <summary>
                Get Instruction's Disassemble Architecture.
            </summary>
            <remarks>
                Represents the hardware architecture the instruction was disassembled for.
            </remarks>
        </member>
        <member name="P:Gee.External.Capstone.Instruction`8.DisassembleMode">
            <summary>
                Get Instruction's Disassemble Mode.
            </summary>
            <remarks>
                Represents the hardware mode the instruction was disassembled for.
            </remarks>
        </member>
        <member name="P:Gee.External.Capstone.Instruction`8.HasDetails">
            <summary>
                Determine if Instruction Has Details.
            </summary>
            <remarks>
                Indicates if the instruction was disassembled with details. A boolean true indicates the instruction
                was disassembled with details. A boolean false otherwise. If the instruction was disassembled without
                details, it is either because instruction details were disabled on the disassembler or instruction
                details and Skip Data Mode were enabled on the disassembler and the instruction is a skipped data
                instruction. To determine if the instruction is a skipped data instruction, call
                <see cref="P:Gee.External.Capstone.Instruction`8.IsSkippedData" />.
            </remarks>
        </member>
        <member name="P:Gee.External.Capstone.Instruction`8.Id">
            <summary>
                Get Instruction's Unique Identifier.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Instruction`8.IsDietModeEnabled">
            <summary>
                Determine if Diet Mode is Enabled.
            </summary>
            <remarks>
                Indicates if Diet Mode is enabled. A boolean true indicates it is enabled. A boolean false otherwise.
            </remarks>
        </member>
        <member name="P:Gee.External.Capstone.Instruction`8.IsSkippedData">
            <summary>
                Determine if Instruction is Skipped Data.
            </summary>
            <remarks>
                Indicates if the instruction is a skipped data instruction. A boolean true indicates the instruction
                is a skipped data instruction. A boolean false otherwise.
            </remarks>
        </member>
        <member name="P:Gee.External.Capstone.Instruction`8.Mnemonic">
            <summary>
                Get Instruction's Mnemonic.
            </summary>
            <remarks>
                Represents the instruction's mnemonic if, and only if, Diet Mode is disabled. To determine if Diet
                Mode is disabled, call <see cref="P:Gee.External.Capstone.Instruction`8.IsDietModeEnabled" />.
            </remarks>
            <exception cref="T:System.NotSupportedException">
                Thrown if Diet Mode is enabled.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.Instruction`8.Operand">
            <summary>
                Get Instruction's Operand Text.
            </summary>
            <remarks>
                Represents the instruction's operand text if, and only if, Diet Mode is disabled. To determine if Diet
                Mode is disabled, call <see cref="P:Gee.External.Capstone.Instruction`8.IsDietModeEnabled" />.
            </remarks>
            <exception cref="T:System.NotSupportedException">
                Thrown if Diet Mode is enabled.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.Instruction`8.#ctor(Gee.External.Capstone.InstructionBuilder{`1,`2,`3,`4,`0,`5,`6,`7})">
            <summary>
                Create a Disassembled Instruction.
            </summary>
            <param name="builder">
                A builder to initialize the object with.
            </param>
        </member>
        <member name="T:Gee.External.Capstone.InstructionBuilder`8">
            <summary>
                Disassembled Instruction Builder.
            </summary>
            <typeparam name="TDetail">
                The type of the instruction's details.
            </typeparam>
            <typeparam name="TDisassembleMode">
                The type of the hardware mode the instruction was disassembled for.
            </typeparam>
            <typeparam name="TGroup">
                The type of the instruction's architecture specific instruction groups.
            </typeparam>
            <typeparam name="TGroupId">
                The type of the instruction's architecture specific instruction group unique identifiers.
            </typeparam>
            <typeparam name="TInstruction">
                The type of the instruction.
            </typeparam>
            <typeparam name="TId">
                The type of the instruction's unique identifier.
            </typeparam>
            <typeparam name="TRegister">
                The type of the instruction's architecture specific registers.
            </typeparam>
            <typeparam name="TRegisterId">
                The type of the instruction's architecture specific register unique identifiers.
            </typeparam>
        </member>
        <member name="P:Gee.External.Capstone.InstructionBuilder`8.Address">
            <summary>
                Get and Set Instruction's Address (EIP).
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.InstructionBuilder`8.Bytes">
            <summary>
                Get and Set Instruction's Machine Bytes.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.InstructionBuilder`8.Details">
            <summary>
                Get and Set Instruction's Details.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.InstructionBuilder`8.DisassembleArchitecture">
            <summary>
                Get and Set Instruction's Disassemble Architecture.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.InstructionBuilder`8.DisassembleMode">
            <summary>
                Get and Set Instruction's Disassemble Mode.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.InstructionBuilder`8.Id">
            <summary>
                Get and Set Instruction's Unique Identifier.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.InstructionBuilder`8.IsSkippedData">
            <summary>
                Determine if Instruction is Skipped Data.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.InstructionBuilder`8.Mnemonic">
            <summary>
                Get and Set Instruction's Mnemonic.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.InstructionBuilder`8.Operand">
            <summary>
                Get and Set Instruction's Operand Text.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.InstructionBuilder`8.#ctor">
            <summary>
                Create an Instruction Builder.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.InstructionBuilder`8.Build(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Build an Instruction.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="hInstruction">
                An instruction handle.
            </param>
        </member>
        <member name="M:Gee.External.Capstone.InstructionBuilder`8.CreateDetails(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Create Instruction's Details.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="hInstruction">
                An instruction handle.
            </param>
            <returns>
                The instruction's details.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.InstructionBuilder`8.CreateDisassembleMode(Gee.External.Capstone.NativeDisassembleMode)">
            <summary>
                Create Disassemble Mode.
            </summary>
            <param name="nativeDisassembleMode">
                A native disassemble mode.
            </param>
            <returns>
                A disassemble mode.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.InstructionBuilder`8.CreateId(System.Int32)">
            <summary>
                Create Instruction's Unique Identifier.
            </summary>
            <param name="id">
                An instruction's unique identifier.
            </param>
            <returns>
                The instruction's unique identifier.
            </returns>
        </member>
        <member name="T:Gee.External.Capstone.InstructionDetail`8">
            <summary>
                Disassembled Instruction Detail.
            </summary>
            <typeparam name="TSelf">
                This type.
            </typeparam>
            <typeparam name="TDisassembleMode">
                The type of the hardware mode the instruction was disassembled for.
            </typeparam>
            <typeparam name="TGroup">
                The type of the instruction's architecture specific instruction groups.
            </typeparam>
            <typeparam name="TGroupId">
                The type of the instruction's architecture specific instruction group unique identifiers.
            </typeparam>
            <typeparam name="TInstruction">
                The type of the instruction.
            </typeparam>
            <typeparam name="TInstructionId">
                The type of the instruction's unique identifier.
            </typeparam>
            <typeparam name="TRegister">
                The type of the instruction's architecture specific registers.
            </typeparam>
            <typeparam name="TRegisterId">
                The type of the instruction's architecture specific register unique identifiers.
            </typeparam>
        </member>
        <member name="F:Gee.External.Capstone.InstructionDetail`8._allReadRegisters">
            <summary>
                All Read Registers.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.InstructionDetail`8._allWrittenRegisters">
            <summary>
                All Written Registers.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.InstructionDetail`8._explicitlyReadRegisters">
            <summary>
                Explicitly Read Registers.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.InstructionDetail`8._explicitlyWrittenRegisters">
            <summary>
                Explicitly Written Registers.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.InstructionDetail`8._groups">
            <summary>
                Instruction's Groups.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.InstructionDetail`8._implicitlyReadRegisters">
            <summary>
                Implicitly Read Registers.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.InstructionDetail`8._implicitlyWrittenRegisters">
            <summary>
                Implicitly Written Registers.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.InstructionDetail`8.AllReadRegisters">
            <summary>
                Get All Read Registers.
            </summary>
            <remarks>
                Represents all the registers read by the instruction, both explicitly and implicitly, if Diet Mode is
                disabled and the hardware architecture the instruction was disassembled for supports the operation.
                This is effectively equivalent to the union of <see cref="P:Gee.External.Capstone.InstructionDetail`8.ExplicitlyReadRegisters" /> and
                <see cref="P:Gee.External.Capstone.InstructionDetail`8.ImplicitlyReadRegisters" />. To determine if Diet Mode is disabled, call
                <see cref="P:Gee.External.Capstone.InstructionDetail`8.IsDietModeEnabled" />.
            </remarks>
            <exception cref="T:System.NotSupportedException">
                Thrown if Diet Mode is enabled, or if the hardware architecture the instruction was disassembled for
                does not support the operation.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.InstructionDetail`8.AllWrittenRegisters">
            <summary>
                Get All Written Registers.
            </summary>
            <remarks>
                Represents all the registers written by the instruction, both explicitly and implicitly, if Diet Mode
                is disabled and the hardware architecture the instruction was disassembled for supports the operation.
                This is effectively equivalent to the union of <see cref="P:Gee.External.Capstone.InstructionDetail`8.ExplicitlyWrittenRegisters" /> and
                <see cref="P:Gee.External.Capstone.InstructionDetail`8.ImplicitlyWrittenRegisters" />. To determine if Diet Mode is disabled, call
                <see cref="P:Gee.External.Capstone.InstructionDetail`8.IsDietModeEnabled" />. 
            </remarks>
            <exception cref="T:System.NotSupportedException">
                Thrown if Diet Mode is enabled, or if the hardware architecture the instruction was disassembled for
                does not support the operation.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.InstructionDetail`8.DisassembleArchitecture">
            <summary>
                Get Instruction's Disassemble Architecture.
            </summary>
            <remarks>
                Represents the hardware architecture the instruction was disassembled for.
            </remarks>
        </member>
        <member name="P:Gee.External.Capstone.InstructionDetail`8.DisassembleMode">
            <summary>
                Get Instruction's Disassemble Mode.
            </summary>
            <remarks>
                Represents the hardware mode the instruction was disassembled for.
            </remarks>
        </member>
        <member name="P:Gee.External.Capstone.InstructionDetail`8.ExplicitlyReadRegisters">
            <summary>
                Get Explicitly Read Registers.
            </summary>
            <remarks>
                Represents the registers explicitly read by the instruction, if Diet Mode is disabled and the hardware
                architecture the instruction was disassembled for supports the operation. To determine if Diet Mode is
                disabled, call <see cref="P:Gee.External.Capstone.InstructionDetail`8.IsDietModeEnabled" />. 
            </remarks>
            <exception cref="T:System.NotSupportedException">
                Thrown if Diet Mode is enabled, or if the hardware architecture the instruction was disassembled for
                does not support the operation.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.InstructionDetail`8.ExplicitlyWrittenRegisters">
            <summary>
                Get Explicitly Written Registers.
            </summary>
            <remarks>
                Represents the registers explicitly written by the instruction, if Diet Mode is disabled and the
                hardware architecture the instruction was disassembled for supports the operation. To determine if
                Diet Mode is disabled, call <see cref="P:Gee.External.Capstone.InstructionDetail`8.IsDietModeEnabled" />. 
            </remarks>
            <exception cref="T:System.NotSupportedException">
                Thrown if Diet Mode is enabled, or if the hardware architecture the instruction was disassembled for
                does not support the operation.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.InstructionDetail`8.Groups">
            <summary>
                Get Instruction's Groups.
            </summary>
            <remarks>
                Represents the instruction groups the instruction belongs to if, and only if, Diet Mode is disabled.
                To determine if Diet Mode is disabled, call <see cref="P:Gee.External.Capstone.InstructionDetail`8.IsDietModeEnabled" />. 
            </remarks>
            <exception cref="T:System.NotSupportedException">
                Thrown if Diet Mode is enabled.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.InstructionDetail`8.ImplicitlyReadRegisters">
            <summary>
                Get Implicitly Read Registers.
            </summary>
            <remarks>
                Represents the registers implicitly read by the instruction, if Diet Mode is disabled and the hardware
                architecture the instruction was disassembled for supports the operation. To determine if Diet Mode is
                disabled, call <see cref="P:Gee.External.Capstone.InstructionDetail`8.IsDietModeEnabled" />. 
            </remarks>
            <exception cref="T:System.NotSupportedException">
                Thrown if Diet Mode is enabled.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.InstructionDetail`8.ImplicitlyWrittenRegisters">
            <summary>
                Get Implicitly Written Registers.
            </summary>
            <remarks>
                Represents the registers implicitly written by the instruction, if Diet Mode is disabled and the
                hardware architecture the instruction was disassembled for supports the operation. To determine if
                Diet Mode is disabled, call <see cref="P:Gee.External.Capstone.InstructionDetail`8.IsDietModeEnabled" />. 
            </remarks>
            <exception cref="T:System.NotSupportedException">
                Thrown if Diet Mode is enabled.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.InstructionDetail`8.IsDietModeEnabled">
            <summary>
                Determine if Diet Mode is Enabled.
            </summary>
            <remarks>
                Indicates if Diet Mode is enabled. A boolean true indicates it is enabled. A boolean false otherwise.
            </remarks>
        </member>
        <member name="M:Gee.External.Capstone.InstructionDetail`8.#ctor(Gee.External.Capstone.InstructionDetailBuilder{`0,`1,`2,`3,`4,`5,`6,`7})">
            <summary>
                Create a Disassembled Instruction Detail.
            </summary>
            <param name="builder">
                A builder to initialize the object with.
            </param>
        </member>
        <member name="M:Gee.External.Capstone.InstructionDetail`8.BelongsToGroup(System.String)">
            <summary>
                Determine if Instruction Belongs to an Instruction Group.
            </summary>
            <param name="instructionGroupName">
                An instruction group's name.
            </param>
            <returns>
                A boolean true if the instruction belongs to the instruction group. A boolean false otherwise.
            </returns>
            <exception cref="T:System.NotSupportedException">
                Thrown if Diet Mode is enabled.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.InstructionDetail`8.BelongsToGroup(`3)">
            <summary>
                Determine if Instruction Belongs to an Instruction Group.
            </summary>
            <param name="instructionGroupId">
                An instruction group's unique identifier.
            </param>
            <returns>
                A boolean true if the instruction belongs to the instruction group. A boolean false otherwise.
            </returns>
            <exception cref="T:System.NotSupportedException">
                Thrown if Diet Mode is enabled.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.InstructionDetail`8.IsRegisterExplicitlyRead(System.String)">
            <summary>
                Determine if a Register Was Explicitly Read.
            </summary>
            <param name="registerName">
                A register's name.
            </param>
            <returns>
                A boolean true if the register was explicitly read by the instruction. A boolean false otherwise.
            </returns>
            <exception cref="T:System.NotSupportedException">
                Thrown if Diet Mode is enabled, or if the hardware architecture the instruction was disassembled for
                does not support the operation.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.InstructionDetail`8.IsRegisterExplicitlyRead(`7)">
            <summary>
                Determine if a Register Was Explicitly Read.
            </summary>
            <param name="registerId">
                A register's unique identifier.
            </param>
            <returns>
                A boolean true if the register was explicitly read by the instruction. A boolean false otherwise.
            </returns>
            <exception cref="T:System.NotSupportedException">
                Thrown if Diet Mode is enabled, or if the hardware architecture the instruction was disassembled for
                does not support the operation.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.InstructionDetail`8.IsRegisterExplicitlyWritten(System.String)">
            <summary>
                Determine if a Register Was Explicitly Written.
            </summary>
            <param name="registerName">
                A register's name.
            </param>
            <returns>
                A boolean true if the register was explicitly written by the instruction. A boolean false otherwise.
            </returns>
            <exception cref="T:System.NotSupportedException">
                Thrown if Diet Mode is enabled, or if the hardware architecture the instruction was disassembled for
                does not support the operation.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.InstructionDetail`8.IsRegisterExplicitlyWritten(`7)">
            <summary>
                Determine if a Register Was Explicitly Written.
            </summary>
            <param name="registerId">
                A register's unique identifier.
            </param>
            <returns>
                A boolean true if the register was explicitly written by the instruction. A boolean false otherwise.
            </returns>
            <exception cref="T:System.NotSupportedException">
                Thrown if Diet Mode is enabled, or if the hardware architecture the instruction was disassembled for
                does not support the operation.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.InstructionDetail`8.IsRegisterImplicitlyRead(System.String)">
            <summary>
                Determine if a Register Was Implicitly Read.
            </summary>
            <param name="registerName">
                A register's name.
            </param>
            <returns>
                A boolean true if the register was implicitly read by the instruction. A boolean false otherwise.
            </returns>
            <exception cref="T:System.NotSupportedException">
                Thrown if Diet Mode is enabled.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.InstructionDetail`8.IsRegisterImplicitlyRead(`7)">
            <summary>
                Determine if a Register Was Implicitly Read.
            </summary>
            <param name="registerId">
                A register's unique identifier.
            </param>
            <returns>
                A boolean true if the register was implicitly read by the instruction. A boolean false otherwise.
            </returns>
            <exception cref="T:System.NotSupportedException">
                Thrown if Diet Mode is enabled.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.InstructionDetail`8.IsRegisterImplicitlyWritten(System.String)">
            <summary>
                Determine if a Register Was Implicitly Written.
            </summary>
            <param name="registerName">
                A register's name.
            </param>
            <returns>
                A boolean true if the register was implicitly written by the instruction. A boolean false otherwise.
            </returns>
            <exception cref="T:System.NotSupportedException">
                Thrown if Diet Mode is enabled.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.InstructionDetail`8.IsRegisterImplicitlyWritten(`7)">
            <summary>
                Determine if a Register Was Implicitly Written.
            </summary>
            <param name="registerId">
                A register's unique identifier.
            </param>
            <returns>
                A boolean true if the register was implicitly modified by the instruction. A boolean false otherwise.
            </returns>
            <exception cref="T:System.NotSupportedException">
                Thrown if Diet Mode is enabled.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.InstructionDetail`8.IsRegisterRead(System.String)">
            <summary>
                Determine if a Register Was Explicitly or Implicitly Read.
            </summary>
            <remarks>
                Indicates if a register was read by the instruction, both explicitly and implicitly, if Diet Mode is
                disabled. If the hardware architecture the instruction was disassembled for does not support explicitly
                read registers, only the implicitly read registers are considered. To determine if Diet Mode is
                disabled, call <see cref="P:Gee.External.Capstone.InstructionDetail`8.IsDietModeEnabled" />.
            </remarks>
            <param name="registerName">
                A register's name.
            </param>
            <returns>
                A boolean true if the register was explicitly or implicitly read by the instruction. A boolean false
                otherwise.
            </returns>
            <exception cref="T:System.NotSupportedException">
                Thrown if Diet Mode is enabled.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.InstructionDetail`8.IsRegisterRead(`7)">
            <summary>
                Determine if a Register Was Explicitly or Implicitly Read.
            </summary>
            <remarks>
                Indicates if a register was read by the instruction, both explicitly and implicitly, if Diet Mode is
                disabled. If the hardware architecture the instruction was disassembled for does not support explicitly
                read registers, only the implicitly read registers are considered. To determine if Diet Mode is
                disabled, call <see cref="P:Gee.External.Capstone.InstructionDetail`8.IsDietModeEnabled" />.
            </remarks>
            <param name="registerId">
                A register's unique identifier.
            </param>
            <returns>
                A boolean true if the register was explicitly or implicitly read by the instruction. A boolean false
                otherwise.
            </returns>
            <exception cref="T:System.NotSupportedException">
                Thrown if Diet Mode is enabled.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.InstructionDetail`8.IsRegisterWritten(System.String)">
            <summary>
                Determine if a Register Was Explicitly or Implicitly Written.
            </summary>
            <remarks>
                Indicates if a register was written by the instruction, both explicitly and implicitly, if Diet Mode
                is disabled. If the hardware architecture the instruction was disassembled for does not support
                explicitly written registers, only the implicitly written registers are considered. To determine if
                Diet Mode is disabled, call <see cref="P:Gee.External.Capstone.InstructionDetail`8.IsDietModeEnabled" />.
            </remarks>
            <param name="registerName">
                A register's name.
            </param>
            <returns>
                A boolean true if the register was explicitly or implicitly written by the instruction. A boolean
                false otherwise.
            </returns>
            <exception cref="T:System.NotSupportedException">
                Thrown if Diet Mode is enabled.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.InstructionDetail`8.IsRegisterWritten(`7)">
            <summary>
                Determine if a Register Was Explicitly or Implicitly Written.
            </summary>
            <remarks>
                Indicates if a register was written by the instruction, both explicitly and implicitly, if Diet Mode
                is disabled. If the hardware architecture the instruction was disassembled for does not support
                explicitly written registers, only the implicitly written registers are considered. To determine if
                Diet Mode is disabled, call <see cref="P:Gee.External.Capstone.InstructionDetail`8.IsDietModeEnabled" />.
            </remarks>
            <param name="registerId">
                A register's unique identifier.
            </param>
            <returns>
                A boolean true if the register was explicitly or implicitly modified by the instruction. A boolean
                false otherwise.
            </returns>
            <exception cref="T:System.NotSupportedException">
                Thrown if Diet Mode is enabled.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.InstructionDetail`8.OnExplicitlyReadRegistersLazyInitialization">
            <summary>
                On Explicitly Read Registers Lazy Initialization.
            </summary>
            <returns>
                The instruction's explicitly read registers.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.InstructionDetail`8.OnExplicitlyWrittenRegistersLazyInitialization">
            <summary>
                On Explicitly Written Registers Lazy Initialization.
            </summary>
            <returns>
                The instruction's explicitly written registers.
            </returns>
        </member>
        <member name="T:Gee.External.Capstone.InstructionDetailBuilder`8">
            <summary>
                Disassembled Instruction Detail Builder.
            </summary>
            <typeparam name="TDetail">
                The type of the instruction's details.
            </typeparam>
            <typeparam name="TDisassembleMode">
                The type of the hardware mode the instruction was disassembled for.
            </typeparam>
            <typeparam name="TGroup">
                The type of the instruction's architecture specific instruction groups.
            </typeparam>
            <typeparam name="TGroupId">
                The type of the instruction's architecture specific instruction group unique identifiers.
            </typeparam>
            <typeparam name="TInstruction">
                The type of the instruction.
            </typeparam>
            <typeparam name="TInstructionId">
                The type of the instruction's unique identifier.
            </typeparam>
            <typeparam name="TRegister">
                The type of the instruction's architecture specific registers.
            </typeparam>
            <typeparam name="TRegisterId">
                The type of the instruction's architecture specific register unique identifiers.
            </typeparam>
        </member>
        <member name="P:Gee.External.Capstone.InstructionDetailBuilder`8.AllReadRegisters">
            <summary>
                Get and Set All Read Registers.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.InstructionDetailBuilder`8.AllWrittenRegisters">
            <summary>
                Get and Set All Written Registers.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.InstructionDetailBuilder`8.DisassembleArchitecture">
            <summary>
                Get and Set Instruction's Disassemble Architecture.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.InstructionDetailBuilder`8.DisassembleMode">
            <summary>
                Get and Set Instruction's Disassemble Mode.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.InstructionDetailBuilder`8.Groups">
            <summary>
                Get and Set Instruction's Groups.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.InstructionDetailBuilder`8.ImplicitlyReadRegisters">
            <summary>
                Get and Set Implicitly Read Registers.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.InstructionDetailBuilder`8.ImplicitlyWrittenRegisters">
            <summary>
                Get and Set Implicitly Written Registers.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.InstructionDetailBuilder`8.Build(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Build an Instruction Detail.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="hInstruction">
                An instruction handle.
            </param>
        </member>
        <member name="M:Gee.External.Capstone.InstructionDetailBuilder`8.CreateDisassembleMode(Gee.External.Capstone.NativeDisassembleMode)">
            <summary>
                Create Disassemble Mode.
            </summary>
            <param name="nativeDisassembleMode">
                A native disassemble mode.
            </param>
            <returns>
                A disassemble mode.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.InstructionDetailBuilder`8.CreateInstructionGroup(Gee.External.Capstone.CapstoneDisassembler,System.Byte)">
            <summary>
                Create an Instruction Group.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="instructionGroupId">
                An instruction group's unique identifier.
            </param>
            <returns>
                An instruction group.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.InstructionDetailBuilder`8.CreateRegister(Gee.External.Capstone.CapstoneDisassembler,System.Int16)">
            <summary>
                Create a Register.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="registerId">
                A register's unique identifier.
            </param>
            <returns>
                A register.
            </returns>
        </member>
        <member name="T:Gee.External.Capstone.InstructionGroup`1">
            <summary>
                Instruction Group.
            </summary>
            <typeparam name="TId">
                The type of the instruction group's unique identifier.
            </typeparam>
        </member>
        <member name="F:Gee.External.Capstone.InstructionGroup`1._name">
            <summary>
                Instruction Group's Name.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.InstructionGroup`1.Id">
            <summary>
                Get Instruction Group's Unique Identifier.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.InstructionGroup`1.IsDietModeEnabled">
            <summary>
                Determine if Diet Mode is Enabled.
            </summary>
            <remarks>
                Indicates if Diet Mode is enabled. A boolean true indicates it is enabled. A boolean false otherwise.
            </remarks>
        </member>
        <member name="P:Gee.External.Capstone.InstructionGroup`1.Name">
            <summary>
                Get Instruction Group's Name.
            </summary>
            <remarks>
                Represents the instruction group's name if, and only if, Diet Mode is disabled. To determine if Diet
                Mode is disabled, call <see cref="P:Gee.External.Capstone.InstructionGroup`1.IsDietModeEnabled" />.
            </remarks>
            <exception cref="T:System.NotSupportedException">
                Thrown if Diet Mode is enabled.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.InstructionGroup`1.#ctor(`0,System.String)">
            <summary>
                Create an Instruction Group.
            </summary>
            <param name="id">
                The instruction group's unique identifier.
            </param>
            <param name="name">
                The instruction group's name.
            </param>
        </member>
        <member name="M:Gee.External.Capstone.InstructionGroup`1.Equals(System.Object)">
            <summary>
                Determine if This Object is Equal to Another Object.
            </summary>
            <param name="object">
                An object to compare to. Should not be a null reference.
            </param>
            <returns>
                A boolean true if this object is equal to the object. A boolean false otherwise.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.InstructionGroup`1.GetHashCode">
            <summary>
                Get Object's Hash Code.
            </summary>
            <returns>
                The object's hash code.
            </returns>
        </member>
        <member name="T:Gee.External.Capstone.M68K.CapstoneM68KDisassembler">
            <summary>
                Capstone M68K Disassembler.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.M68K.CapstoneM68KDisassembler.#ctor(Gee.External.Capstone.M68K.M68KDisassembleMode)">
            <summary>
                Create a Capstone M68K Disassembler.
            </summary>
            <param name="disassembleMode">
                The hardware mode for the disassembler to use.
            </param>
            <exception cref="T:Gee.External.Capstone.CapstoneException">
                Thrown if a disassembler could not be created.
            </exception>
            <exception cref="T:System.OutOfMemoryException">
                Thrown if sufficient memory cannot be allocated to perform the operation as a rare indication that the
                system is under heavy load.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.M68K.CapstoneM68KDisassembler.CreateInstruction(Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Create an Instruction.
            </summary>
            <param name="hInstruction">
                An instruction handle.
            </param>
            <returns>
                An M68K instruction.
            </returns>
        </member>
        <member name="T:Gee.External.Capstone.M68K.M68KAddressMode">
            <summary>
                M68K Address Mode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.M68KAddressMode.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, address mode.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.M68K.M68KBranchDisplacementOperandValue">
            <summary>
                M68K Branch Displacement Operand Value.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.M68K.M68KBranchDisplacementOperandValue.Displacement">
            <summary>
                Get Displacement Value.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.M68K.M68KBranchDisplacementOperandValue.DisplacementSize">
            <summary>
                Get Displacement Size.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.M68K.M68KBranchDisplacementOperandValue.#ctor(Gee.External.Capstone.M68K.NativeM68KBranchDisplacementOperandValue@)">
            <summary>
                Create an M68K Branch Displacement Operand Value.
            </summary>
            <param name="nativeBranchDisplacementOperandValue">
                A native M68K branch displacement operand value.
            </param>
        </member>
        <member name="T:Gee.External.Capstone.M68K.M68KBranchDisplacementSize">
            <summary>
                M68K Branch Displacement Size.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.M68KBranchDisplacementSize.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, branch displacement size.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.M68KBranchDisplacementSize.Byte">
            <summary>
                Indicates a signed 8-bit branch displacement size.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.M68KBranchDisplacementSize.Word">
            <summary>
                Indicates a signed 16-bit branch displacement size.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.M68KBranchDisplacementSize.Long">
            <summary>
                Indicates a signed 32-bit branch displacement size.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.M68K.M68KCpuOperationSize">
            <summary>
                M68K CPU Operation Size.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.M68KCpuOperationSize.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, CPU operation.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.M68KCpuOperationSize.Byte">
            <summary>
                Indicates a signed 8-bit CPU operation.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.M68KCpuOperationSize.Word">
            <summary>
                Indicates a signed 16-bit CPU operation.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.M68KCpuOperationSize.Long">
            <summary>
                Indicates a signed 32-bit CPU operation.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.M68K.M68KDisassembleMode">
            <summary>
                M68K Disassemble Mode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.M68KDisassembleMode.BigEndian">
            <summary>
                Indicates binary code should be disassembled in big-endian mode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.M68KDisassembleMode.M68K000">
            <summary>
                Indicates binary code should be disassembled with support for the M68K000 instruction set.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.M68KDisassembleMode.M68K010">
            <summary>
                Indicates binary code should be disassembled with support for the M68K010 instruction set.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.M68KDisassembleMode.M68K020">
            <summary>
                Indicates binary code should be disassembled with support for the M68K020 instruction set.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.M68KDisassembleMode.M68K030">
            <summary>
                Indicates binary code should be disassembled with support for the M68K030 instruction set.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.M68KDisassembleMode.M68K040">
            <summary>
                Indicates binary code should be disassembled with support for the M68K040 instruction set.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.M68KDisassembleMode.M68K060">
            <summary>
                Indicates binary code should be disassembled with support for the M68K060 instruction set.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.M68K.M68KFpuOperationSize">
            <summary>
                M68K FPU Operation Size.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.M68KFpuOperationSize.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, FPU operation.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.M68KFpuOperationSize.Single">
            <summary>
                Indicates a signed 4-byte FPU operation.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.M68KFpuOperationSize.Double">
            <summary>
                Indicates a signed 8-byte FPU operation.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.M68KFpuOperationSize.Extended">
            <summary>
                Indicates a signed 12-byte FPU operation.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.M68K.M68KInstruction">
            <summary>
                M68K Instruction.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.M68K.M68KInstruction.Create(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Create an M68K Instruction.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="hInstruction">
                An instruction handle.
            </param>
            <returns>
                An M68K instruction.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.M68K.M68KInstruction.#ctor(Gee.External.Capstone.M68K.M68KInstructionBuilder)">
            <summary>
                Create an M68K Instruction.
            </summary>
            <param name="builder">
                A builder to initialize the object with.
            </param>
        </member>
        <member name="T:Gee.External.Capstone.M68K.M68KInstructionBuilder">
            <summary>
                M68K Instruction Builder.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.M68K.M68KInstructionBuilder.Create">
            <summary>
                Create an M68K Instruction.
            </summary>
            <returns>
                An M68K instruction.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.M68K.M68KInstructionBuilder.CreateDetails(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Create Instruction's Details.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="hInstruction">
                An instruction handle.
            </param>
            <returns>
                The instruction's details.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.M68K.M68KInstructionBuilder.CreateDisassembleMode(Gee.External.Capstone.NativeDisassembleMode)">
            <summary>
                Create Disassemble Mode.
            </summary>
            <param name="nativeDisassembleMode">
                A native disassemble mode.
            </param>
            <returns>
                A disassemble mode.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.M68K.M68KInstructionBuilder.CreateId(System.Int32)">
            <summary>
                Create Instruction's Unique Identifier.
            </summary>
            <param name="id">
                An instruction's unique identifier.
            </param>
            <returns>
                The instruction's unique identifier.
            </returns>
        </member>
        <member name="T:Gee.External.Capstone.M68K.M68KInstructionDetail">
            <summary>
                M68K Instruction Detail.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.M68K.M68KInstructionDetail.Operands">
            <summary>
                Get Instruction's Operands.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.M68K.M68KInstructionDetail.OperationSize">
            <summary>
                Get Operation Size.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.M68K.M68KInstructionDetail.Create(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Create an M68K Instruction Detail.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="hInstruction">
                An instruction handle.
            </param>
            <returns>
                An M68K instruction detail.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.M68K.M68KInstructionDetail.#ctor(Gee.External.Capstone.M68K.M68KInstructionDetailBuilder)">
            <summary>
                Create an M68K Instruction Detail.
            </summary>
            <param name="builder">
                A builder to initialize the object with.
            </param>
        </member>
        <member name="T:Gee.External.Capstone.M68K.M68KInstructionDetailBuilder">
            <summary>
                M68K Instruction Detail Builder.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.M68K.M68KInstructionDetailBuilder.Operands">
            <summary>
                Get and Set Instruction's Operands.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.M68K.M68KInstructionDetailBuilder.OperationSize">
            <summary>
                Get and Set Operation Size.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.M68K.M68KInstructionDetailBuilder.Build(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Build an Instruction Detail.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="hInstruction">
                An instruction handle.
            </param>
        </member>
        <member name="M:Gee.External.Capstone.M68K.M68KInstructionDetailBuilder.Create">
            <summary>
                Create an M68K Instruction Detail.
            </summary>
            <returns>
                An M68K instruction detail.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.M68K.M68KInstructionDetailBuilder.CreateDisassembleMode(Gee.External.Capstone.NativeDisassembleMode)">
            <summary>
                Create Disassemble Mode.
            </summary>
            <param name="nativeDisassembleMode">
                A native disassemble mode.
            </param>
            <returns>
                A disassemble mode.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.M68K.M68KInstructionDetailBuilder.CreateInstructionGroup(Gee.External.Capstone.CapstoneDisassembler,System.Byte)">
            <summary>
                Create an Instruction Group.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="instructionGroupId">
                An instruction group's unique identifier.
            </param>
            <returns>
                An instruction group.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.M68K.M68KInstructionDetailBuilder.CreateRegister(Gee.External.Capstone.CapstoneDisassembler,System.Int16)">
            <summary>
                Create a Register.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="registerId">
                A register's unique identifier.
            </param>
            <returns>
                A register.
            </returns>
        </member>
        <member name="T:Gee.External.Capstone.M68K.M68KInstructionGroup">
            <summary>
                M68K Instruction Group.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.M68K.M68KInstructionGroup.Create(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.M68K.M68KInstructionGroupId)">
            <summary>
                Create an M68K Instruction Group.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="id">
                The instruction group's unique identifier.
            </param>
            <returns>
                An M68K instruction group.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.M68K.M68KInstructionGroup.#ctor(Gee.External.Capstone.M68K.M68KInstructionGroupId,System.String)">
            <summary>
                Create an M68K Instruction Group.
            </summary>
            <param name="id">
                The instruction group's unique identifier.
            </param>
            <param name="name">
                The instruction group's name.
            </param>
        </member>
        <member name="T:Gee.External.Capstone.M68K.M68KInstructionGroupId">
            <summary>
                M68K Instruction Group Unique Identifier.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.M68KInstructionGroupId.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, instruction group.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.M68K.M68KInstructionId">
            <summary>
                M68K Instruction Unique Identifier.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.M68KInstructionId.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, instruction.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.M68K.M68KMemoryOperandValue">
            <summary>
                M68K Memory Operand Value.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.M68K.M68KMemoryOperandValue.Base">
            <summary>
                Get Base Register.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.M68K.M68KMemoryOperandValue.BitField">
            <summary>
                Get Bit Field.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.M68K.M68KMemoryOperandValue.Displacement">
            <summary>
                Get Displacement.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.M68K.M68KMemoryOperandValue.Index">
            <summary>
                Get Index Register.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.M68K.M68KMemoryOperandValue.IndexSize">
            <summary>
                Get Index Size.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.M68K.M68KMemoryOperandValue.IndirectBase">
            <summary>
                Get Indirect Base Register.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.M68K.M68KMemoryOperandValue.IndirectDisplacement">
            <summary>
                Get Indirect Displacement.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.M68K.M68KMemoryOperandValue.Offset">
            <summary>
                Get Bit Field Offset.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.M68K.M68KMemoryOperandValue.OutDisplacement">
            <summary>
                Get Other Displacement.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.M68K.M68KMemoryOperandValue.Scale">
            <summary>
                Get Index Register's Scale.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.M68K.M68KMemoryOperandValue.Width">
            <summary>
                Get Bit Field Width.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.M68K.M68KMemoryOperandValue.#ctor(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.M68K.NativeM68KMemoryOperandValue@)">
            <summary>
                Create an M68K Memory Operand Value.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="nativeMemoryOperandValue">
                A native M68K memory operand value.
            </param>
        </member>
        <member name="T:Gee.External.Capstone.M68K.M68KOperand">
            <summary>
                M68K Operand.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.M68KOperand._branchDisplacement">
            <summary>
                Branch Displacement Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.M68KOperand._dImmediate">
            <summary>
                Double Precision Immediate Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.M68KOperand._immediate">
            <summary>
                Immediate Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.M68KOperand._memory">
            <summary>
                Memory Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.M68KOperand._register">
            <summary>
                Register Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.M68KOperand._registerBits">
            <summary>
                Register Bits Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.M68KOperand._registerPair">
            <summary>
                Register Pair Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.M68KOperand._sImmediate">
            <summary>
                Single Precision Immediate Value.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.M68K.M68KOperand.AddressMode">
            <summary>
                Address Mode.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.M68K.M68KOperand.BranchDisplacement">
            <summary>
                Get Branch Displacement Value.
            </summary>
            <remarks>
                Represents the operand's branch displacement value if, and only if, the operand's type is
                <see cref="F:Gee.External.Capstone.M68K.M68KOperandType.BranchDisplacement" />. To determine the operand's type, call
                <see cref="P:Gee.External.Capstone.M68K.M68KOperand.Type" />.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the operand's type is to <see cref="F:Gee.External.Capstone.M68K.M68KOperandType.BranchDisplacement" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.M68K.M68KOperand.DImmediate">
            <summary>
                Get Double Precision Immediate Value.
            </summary>
            <remarks>
                Represents the operand's double precision immediate value if, and only if, the operand's type is
                <see cref="F:Gee.External.Capstone.M68K.M68KOperandType.DImmediate" />. To determine the operand's type, call <see cref="P:Gee.External.Capstone.M68K.M68KOperand.Type" />.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the operand's type is not <see cref="F:Gee.External.Capstone.M68K.M68KOperandType.DImmediate" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.M68K.M68KOperand.Immediate">
            <summary>
                Get Immediate Value.
            </summary>
            <remarks>
                Represents the operand's immediate value if, and only if, the operand's type is
                <see cref="F:Gee.External.Capstone.M68K.M68KOperandType.Immediate" />. To determine the operand's type, call <see cref="P:Gee.External.Capstone.M68K.M68KOperand.Type" />.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the operand's type is not <see cref="F:Gee.External.Capstone.M68K.M68KOperandType.Immediate" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.M68K.M68KOperand.Memory">
            <summary>
                Get Memory Value.
            </summary>
            <remarks>
                Represents the operand's memory value if, and only if, the operand's type is
                <see cref="F:Gee.External.Capstone.M68K.M68KOperandType.Memory" />. To determine the operand's type, call <see cref="P:Gee.External.Capstone.M68K.M68KOperand.Type" />.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the operand's type is not <see cref="F:Gee.External.Capstone.M68K.M68KOperandType.Memory" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.M68K.M68KOperand.Register">
            <summary>
                Get Register Value.
            </summary>
            <remarks>
                Represents the operand's register value if, and only if, the operand's type is
                <see cref="F:Gee.External.Capstone.M68K.M68KOperandType.Register" />. To determine the operand's type, call <see cref="P:Gee.External.Capstone.M68K.M68KOperand.Type" />.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the operand's type is not <see cref="F:Gee.External.Capstone.M68K.M68KOperandType.Register" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.M68K.M68KOperand.RegisterBits">
            <summary>
                Get Register Bits Value.
            </summary>
            <remarks>
                Represents the operand's register bits value if, and only if, the operand's type is
                <see cref="F:Gee.External.Capstone.M68K.M68KOperandType.RegisterBits" />. To determine the operand's type, call <see cref="P:Gee.External.Capstone.M68K.M68KOperand.Type" />.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the operand's type is not <see cref="F:Gee.External.Capstone.M68K.M68KOperandType.RegisterBits" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.M68K.M68KOperand.RegisterPair">
            <summary>
                Get Register Pair Value.
            </summary>
            <remarks>
                Represents a 2-tuple of the operand's register pair value if, and only if, the operand's type is
                <see cref="F:Gee.External.Capstone.M68K.M68KOperandType.RegisterPair" />. To determine the operand's type, call
                <see cref="P:Gee.External.Capstone.M68K.M68KOperand.Type" />.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the operand's type is not <see cref="F:Gee.External.Capstone.M68K.M68KOperandType.RegisterPair" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.M68K.M68KOperand.SImmediate">
            <summary>
                Get Single Precision Immediate Value.
            </summary>
            <remarks>
                Represents the operand's single precision immediate value if, and only if, the operand's type is
                <see cref="F:Gee.External.Capstone.M68K.M68KOperandType.SImmediate" />. To determine the operand's type, call <see cref="P:Gee.External.Capstone.M68K.M68KOperand.Type" />.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the operand's type is not <see cref="F:Gee.External.Capstone.M68K.M68KOperandType.SImmediate" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.M68K.M68KOperand.Type">
            <summary>
                Operand's Type.
            </summary>
            <remarks>
                Represents the operand's type.
            </remarks>
        </member>
        <member name="M:Gee.External.Capstone.M68K.M68KOperand.Create(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.M68K.NativeM68KInstructionDetail@)">
            <summary>
                Create M68K Operands.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="nativeInstructionDetail">
                A native M68K instruction detail.
            </param>
            <returns>
                An array of M68K operands.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.M68K.M68KOperand.#ctor(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.M68K.NativeM68KOperand@)">
            <summary>
                Create an M68K Operand.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="nativeOperand">
                A native M68K operand.
            </param>
        </member>
        <member name="T:Gee.External.Capstone.M68K.M68KOperandType">
            <summary>
                M68K Operand Type.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.M68KOperandType.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, operand type.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.M68KOperandType.Register">
            <summary>
                Indicates a register operand.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.M68KOperandType.Immediate">
            <summary>
                Indicates an immediate operand.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.M68KOperandType.Memory">
            <summary>
                Indicates a memory operand.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.M68KOperandType.SImmediate">
            <summary>
                Indicates a single precision floating point operand.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.M68KOperandType.DImmediate">
            <summary>
                Indicates a double precision floating point operand.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.M68KOperandType.RegisterBits">
            <summary>
                Indicates a register bits operand.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.M68KOperandType.RegisterPair">
            <summary>
                Indicates a register pair operand.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.M68KOperandType.BranchDisplacement">
            <summary>
                Indicates a branch displacement operand.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.M68K.M68KOperationSize">
            <summary>
                M68K Operation Size.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.M68KOperationSize._cpuOperationSize">
            <summary>
                CPU Operation Size.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.M68KOperationSize._fpuOperationSize">
            <summary>
                FPU Operation Size.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.M68K.M68KOperationSize.CpuOperationSize">
            <summary>
                Get CPU Operation Size.
            </summary>
            <remarks>
                Represents the size of a CPU operation if, and only if, the operation size's type is
                <see cref="F:Gee.External.Capstone.M68K.M68KOperationSizeType.Cpu" />. To determine the operation size's type, call
                <see cref="P:Gee.External.Capstone.M68K.M68KOperationSize.Type" />.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the operation size's type is not <see cref="F:Gee.External.Capstone.M68K.M68KOperationSizeType.Cpu" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.M68K.M68KOperationSize.FpuOperationSize">
            <summary>
                Get FPU Operation Size.
            </summary>
            <remarks>
                Represents the size of a FPU operation if, and only if, the operation size's type is
                <see cref="F:Gee.External.Capstone.M68K.M68KOperationSizeType.Fpu" />. To determine the operation size's type, call
                <see cref="P:Gee.External.Capstone.M68K.M68KOperationSize.Type" />.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the operation size's type is not <see cref="F:Gee.External.Capstone.M68K.M68KOperationSizeType.Fpu" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.M68K.M68KOperationSize.Type">
            <summary>
                Get Operation Size's Type.
            </summary>
            <remarks>
                Represents the operation size's type.
            </remarks>
        </member>
        <member name="M:Gee.External.Capstone.M68K.M68KOperationSize.#ctor(Gee.External.Capstone.M68K.NativeM68KOperationSize@)">
            <summary>
                Create an M68K Operation Size.
            </summary>
            <param name="nativeOperationSize">
                A native M68K operation size.
            </param>
        </member>
        <member name="T:Gee.External.Capstone.M68K.M68KOperationSizeType">
            <summary>
                M68K Operation Size Type.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.M68KOperationSizeType.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, operation size type.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.M68KOperationSizeType.Cpu">
            <summary>
                Indicates a CPU operation size.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.M68KOperationSizeType.Fpu">
            <summary>
                Indicates an FPU operation size.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.M68K.M68KRegister">
            <summary>
                M68K Register.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.M68K.M68KRegister.TryCreate(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.M68K.M68KRegisterId)">
            <summary>
                Create an M68K Register.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="id">
                The register's unique identifier.
            </param>
            <returns>
                An M68K register. A null reference if the register's unique identifier is equal to
                <see cref="F:Gee.External.Capstone.M68K.M68KRegisterId.Invalid" />.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.M68K.M68KRegister.#ctor(Gee.External.Capstone.M68K.M68KRegisterId,System.String)">
            <summary>
                Create a M68K Register.
            </summary>
            <param name="id">
                The register's unique identifier.
            </param>
            <param name="name">
                The register's name.
            </param>
        </member>
        <member name="T:Gee.External.Capstone.M68K.M68KRegisterId">
            <summary>
                M68K Register Unique Identifier.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.M68KRegisterId.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, register.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.M68K.NativeM68KBranchDisplacementOperandValue">
            <summary>
                Native M68K Branch Displacement Operand Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.NativeM68KBranchDisplacementOperandValue.Displacement">
            <summary>
                Displacement Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.NativeM68KBranchDisplacementOperandValue.DisplacementSize">
            <summary>
                Displacement Size.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.M68K.NativeM68KInstructionDetail">
            <summary>
                Native M68K Instruction Detail.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.NativeM68KInstructionDetail.Operands">
            <summary>
                Instruction's Operands.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.NativeM68KInstructionDetail.OperationSize">
            <summary>
                Operation's Size.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.NativeM68KInstructionDetail.OperandCount">
            <summary>
                Instruction's Operands' Count.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.M68K.NativeM68KMemoryOperandValue">
            <summary>
                Native M68K Memory Operand Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.NativeM68KMemoryOperandValue.Base">
            <summary>
                Base Register.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.NativeM68KMemoryOperandValue.Index">
            <summary>
                Index Register.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.NativeM68KMemoryOperandValue.IndirectBase">
            <summary>
                Indirect Base Register.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.NativeM68KMemoryOperandValue.IndirectDisplacement">
            <summary>
                Indirect Displacement.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.NativeM68KMemoryOperandValue.OutDisplacement">
            <summary>
                Other Displacement.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.NativeM68KMemoryOperandValue.Displacement">
            <summary>
                Displacement.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.NativeM68KMemoryOperandValue.Scale">
            <summary>
                Index Register's Scale.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.NativeM68KMemoryOperandValue.BitField">
            <summary>
                Bit Field.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.NativeM68KMemoryOperandValue.Width">
            <summary>
                Bit Field Width.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.NativeM68KMemoryOperandValue.Offset">
            <summary>
                Bit Field Offset.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.NativeM68KMemoryOperandValue.IndexSize">
            <summary>
                Index Size.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.M68K.NativeM68KOperand">
            <summary>
                Native M68K Operand.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.NativeM68KOperand.Value">
            <summary>
                Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.NativeM68KOperand.Memory">
            <summary>
                Memory Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.NativeM68KOperand.BranchDisplacement">
            <summary>
                Branch Displacement Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.NativeM68KOperand.RegisterBits">
            <summary>
                Register Bits Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.NativeM68KOperand.Type">
            <summary>
                Operand's Type.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.NativeM68KOperand.AddressMode">
            <summary>
                Address Mode.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.M68K.NativeM68KOperandValue">
            <summary>
                Native M68K Operand Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.NativeM68KOperandValue.Immediate">
            <summary>
                Immediate Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.NativeM68KOperandValue.DImmediate">
            <summary>
                Double Precision Immediate Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.NativeM68KOperandValue.SImmediate">
            <summary>
                Single Precision Immediate Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.NativeM68KOperandValue.Register">
            <summary>
                Register Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.NativeM68KOperandValue.RegisterPair">
            <summary>
                Register Pair Value.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.M68K.NativeM68KOperationSize">
            <summary>
                Native M68K Operation Size.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.NativeM68KOperationSize.Type">
            <summary>
                Operation Size's Type.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.NativeM68KOperationSize.Value">
            <summary>
                Operation's Value.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.M68K.NativeM68KOperationSizeValue">
            <summary>
                Native M68K Operation Size Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.NativeM68KOperationSizeValue.CpuOperationSize">
            <summary>
                CPU Operation Size.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.NativeM68KOperationSizeValue.FpuOperationSize">
            <summary>
                FPU Operation Size.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.M68K.NativeM68KRegisterPairOperandValue">
            <summary>
                Native M68K Register Pair Operand Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.NativeM68KRegisterPairOperandValue.Register0">
            <summary>
                First Register Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.M68K.NativeM68KRegisterPairOperandValue.Register1">
            <summary>
                Second Register Value.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.MarshalExtension">
            <summary>
                Marshal Extension.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.MarshalExtension.AllocHGlobal``1">
            <summary>
                Allocate Memory For a Structure.
            </summary>
            <typeparam name="T">
                The structure's type.
            </typeparam>
            <returns>
                A pointer to the allocated memory.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.MarshalExtension.AllocHGlobal``1(System.Int32)">
            <summary>
                Allocate Memory For a Structure.
            </summary>
            <param name="size">
                The collection's size.
            </param>
            <typeparam name="T">
                The structure's type.
            </typeparam>
            <returns>
                A pointer to the allocated memory.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.MarshalExtension.FreePtrToStructure``1(System.IntPtr)">
            <summary>
                Marshal a Pointer to a Structure and Free Memory.
            </summary>
            <typeparam name="T">
                The destination structure's type.
            </typeparam>
            <param name="p">
                The pointer to marshal.
            </param>
            <returns>
                The destination structure.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.MarshalExtension.PtrToStructure``1(System.IntPtr)">
            <summary>
                Marshal a Pointer to a Structure.
            </summary>
            <typeparam name="T">
                The destination structure's type.
            </typeparam>
            <param name="p">
                The pointer to marshal.
            </param>
            <returns>
                The destination structure.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.MarshalExtension.PtrToStructure``1(System.IntPtr,System.Int32)">
            <summary>
                Marshal a Pointer to a Collection of Structures.
            </summary>
            <typeparam name="T">
                The collection's type.
            </typeparam>
            <param name="p">
                A pointer to a collection. The pointer should be initialized to the collection's starting address.
            </param>
            <param name="size">
                The collection's size.
            </param>
            <returns>
                The destination collection.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.MarshalExtension.SizeOf``1">
            <summary>
                Get a Type's Size.
            </summary>
            <typeparam name="T">
                The type.
            </typeparam>
            <returns>
                The type's size, in bytes.
            </returns>
        </member>
        <member name="T:Gee.External.Capstone.Mips.CapstoneMipsDisassembler">
            <summary>
                Capstone MIPS Disassembler.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.Mips.CapstoneMipsDisassembler.#ctor(Gee.External.Capstone.Mips.MipsDisassembleMode)">
            <summary>
                Create a Capstone MIPS Disassembler.
            </summary>
            <param name="disassembleMode">
                The hardware mode for the disassembler to use.
            </param>
            <exception cref="T:Gee.External.Capstone.CapstoneException">
                Thrown if a disassembler could not be created.
            </exception>
            <exception cref="T:System.OutOfMemoryException">
                Thrown if sufficient memory cannot be allocated to perform the operation as a rare indication that the
                system is under heavy load.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.Mips.CapstoneMipsDisassembler.CreateInstruction(Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Create an Instruction.
            </summary>
            <param name="hInstruction">
                An instruction handle.
            </param>
            <returns>
                A MIPS instruction.
            </returns>
        </member>
        <member name="T:Gee.External.Capstone.Mips.MipsDisassembleMode">
            <summary>
                MIPS Disassemble Mode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Mips.MipsDisassembleMode.BigEndian">
            <summary>
                Indicates binary code should be disassembled in big-endian mode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Mips.MipsDisassembleMode.Bit32">
            <summary>
                Indicates binary code should be disassembled in 32-bit mode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Mips.MipsDisassembleMode.Bit64">
            <summary>
                Indicates binary code should be disassembled in 64-bit mode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Mips.MipsDisassembleMode.LittleEndian">
            <summary>
                Indicates binary code should be disassembled in little-endian mode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Mips.MipsDisassembleMode.Micro">
            <summary>
                Indicates binary code should be disassembled with support for the microMIPS instruction set.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Mips.MipsDisassembleMode.Mips2">
            <summary>
                Indicates binary code should be disassembled in MIPS2 mode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Mips.MipsDisassembleMode.Mips3">
            <summary>
                Indicates binary code should be disassembled in MIPS3 mode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Mips.MipsDisassembleMode.Mips32R6">
            <summary>
                Indicates binary code should be disassembled in MIPS32R6 mode.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Mips.MipsInstruction">
            <summary>
                MIPS Instruction.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.Mips.MipsInstruction.Create(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Create a MIPS Instruction.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="hInstruction">
                An instruction handle.
            </param>
            <returns>
                A MIPS instruction.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.Mips.MipsInstruction.#ctor(Gee.External.Capstone.Mips.MipsInstructionBuilder)">
            <summary>
                Create a MIPS Instruction.
            </summary>
            <param name="builder">
                A builder to initialize the object with.
            </param>
        </member>
        <member name="T:Gee.External.Capstone.Mips.MipsInstructionBuilder">
            <summary>
                MIPS Instruction Builder.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.Mips.MipsInstructionBuilder.Create">
            <summary>
                Create a MIPS Instruction.
            </summary>
            <returns>
                A MIPS instruction.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.Mips.MipsInstructionBuilder.CreateDetails(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Create Instruction's Details.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="hInstruction">
                An instruction handle.
            </param>
            <returns>
                The instruction's details.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.Mips.MipsInstructionBuilder.CreateDisassembleMode(Gee.External.Capstone.NativeDisassembleMode)">
            <summary>
                Create Disassemble Mode.
            </summary>
            <param name="nativeDisassembleMode">
                A native disassemble mode.
            </param>
            <returns>
                A disassemble mode.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.Mips.MipsInstructionBuilder.CreateId(System.Int32)">
            <summary>
                Create Instruction's Unique Identifier.
            </summary>
            <param name="id">
                An instruction's unique identifier.
            </param>
            <returns>
                The instruction's unique identifier.
            </returns>
        </member>
        <member name="T:Gee.External.Capstone.Mips.MipsInstructionDetail">
            <summary>
                MIPS Instruction Detail.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Mips.MipsInstructionDetail.Operands">
            <summary>
                Get Instruction's Operands.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.Mips.MipsInstructionDetail.Create(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Create a MIPS Instruction Detail.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="hInstruction">
                An instruction handle.
            </param>
            <returns>
                A MIPS instruction detail.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.Mips.MipsInstructionDetail.#ctor(Gee.External.Capstone.Mips.MipsInstructionDetailBuilder)">
            <summary>
                Create a MIPS Instruction Detail.
            </summary>
            <param name="builder">
                A builder to initialize the object with.
            </param>
        </member>
        <member name="T:Gee.External.Capstone.Mips.MipsInstructionDetailBuilder">
            <summary>
                MIPS Instruction Detail Builder.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Mips.MipsInstructionDetailBuilder.Operands">
            <summary>
                Get and Set Instruction's Operands.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.Mips.MipsInstructionDetailBuilder.Build(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Build an Instruction Detail.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="hInstruction">
                An instruction handle.
            </param>
        </member>
        <member name="M:Gee.External.Capstone.Mips.MipsInstructionDetailBuilder.Create">
            <summary>
                Create a MIPS Instruction Detail.
            </summary>
            <returns>
                A MIPS instruction detail.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.Mips.MipsInstructionDetailBuilder.CreateDisassembleMode(Gee.External.Capstone.NativeDisassembleMode)">
            <summary>
                Create Disassemble Mode.
            </summary>
            <param name="nativeDisassembleMode">
                A native disassemble mode.
            </param>
            <returns>
                A disassemble mode.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.Mips.MipsInstructionDetailBuilder.CreateInstructionGroup(Gee.External.Capstone.CapstoneDisassembler,System.Byte)">
            <summary>
                Create an Instruction Group.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="instructionGroupId">
                An instruction group's unique identifier.
            </param>
            <returns>
                An instruction group.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.Mips.MipsInstructionDetailBuilder.CreateRegister(Gee.External.Capstone.CapstoneDisassembler,System.Int16)">
            <summary>
                Create a Register.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="registerId">
                A register's unique identifier.
            </param>
            <returns>
                A register.
            </returns>
        </member>
        <member name="T:Gee.External.Capstone.Mips.MipsInstructionGroup">
            <summary>
                MIPS Instruction Group.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.Mips.MipsInstructionGroup.Create(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.Mips.MipsInstructionGroupId)">
            <summary>
                Create a MIPS Instruction Group.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="id">
                The instruction group's unique identifier.
            </param>
            <returns>
                A MIPS instruction group.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.Mips.MipsInstructionGroup.#ctor(Gee.External.Capstone.Mips.MipsInstructionGroupId,System.String)">
            <summary>
                Create a MIPS Instruction Group.
            </summary>
            <param name="id">
                The instruction group's unique identifier.
            </param>
            <param name="name">
                The instruction group's name.
            </param>
        </member>
        <member name="T:Gee.External.Capstone.Mips.MipsInstructionGroupId">
            <summary>
                MIPS Instruction Group Unique Identifier.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Mips.MipsInstructionGroupId.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, instruction group.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Mips.MipsInstructionId">
            <summary>
                MIPS Instruction Unique Identifier.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Mips.MipsInstructionId.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, instruction.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Mips.MipsMemoryOperandValue">
            <summary>
                MIPS Memory Operand Value.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Mips.MipsMemoryOperandValue.Base">
            <summary>
                Get Base Register.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Mips.MipsMemoryOperandValue.Displacement">
            <summary>
                Get Displacement.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.Mips.MipsMemoryOperandValue.#ctor(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.Mips.NativeMipsMemoryOperandValue@)">
            <summary>
                Create a MIPS Memory Operand Value.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="nativeMemoryOperandValue">
                A native MIPS memory operand value.
            </param>
        </member>
        <member name="T:Gee.External.Capstone.Mips.MipsOperand">
            <summary>
                MIPS Operand.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Mips.MipsOperand._immediate">
            <summary>
                Immediate Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Mips.MipsOperand._memory">
            <summary>
                Memory Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Mips.MipsOperand._register">
            <summary>
                Register Value.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Mips.MipsOperand.Immediate">
            <summary>
                Get Immediate Value.
            </summary>
            <remarks>
                Represents the operand's immediate value if, and only if, the operand's type is
                <see cref="F:Gee.External.Capstone.Mips.MipsOperandType.Immediate" />. To determine the operand's type, call <see cref="P:Gee.External.Capstone.Mips.MipsOperand.Type" />.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the operand's type is not <see cref="F:Gee.External.Capstone.Mips.MipsOperandType.Immediate" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.Mips.MipsOperand.Memory">
            <summary>
                Get Memory Value.
            </summary>
            <remarks>
                Represents the operand's memory value if, and only if, the operand's type is
                <see cref="F:Gee.External.Capstone.Mips.MipsOperandType.Memory" />. To determine the operand's type, call <see cref="P:Gee.External.Capstone.Mips.MipsOperand.Type" />.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the operand's type is not <see cref="F:Gee.External.Capstone.Mips.MipsOperandType.Memory" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.Mips.MipsOperand.Register">
            <summary>
                Get Register Value.
            </summary>
            <remarks>
                Represents the operand's register value if, and only if, the operand's type is
                <see cref="F:Gee.External.Capstone.Mips.MipsOperandType.Register" />. To determine the operand's type, call <see cref="P:Gee.External.Capstone.Mips.MipsOperand.Type" />.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the operand's type is not <see cref="F:Gee.External.Capstone.Mips.MipsOperandType.Register" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.Mips.MipsOperand.Type">
            <summary>
                Get Operand's Type.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.Mips.MipsOperand.Create(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.Mips.NativeMipsInstructionDetail@)">
            <summary>
                Create MIPS Operands.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="nativeInstructionDetail">
                A native MIPS instruction detail.
            </param>
            <returns>
                An array of MIPS operands.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.Mips.MipsOperand.#ctor(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.Mips.NativeMipsOperand@)">
            <summary>
                Create a MIPS Operand.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="nativeOperand">
                A native MIPS operand.
            </param>
        </member>
        <member name="T:Gee.External.Capstone.Mips.MipsOperandType">
            <summary>
                MIPS Operand Type.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Mips.MipsOperandType.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, operand type.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Mips.MipsOperandType.Register">
            <summary>
                Indicates a register operand.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Mips.MipsOperandType.Immediate">
            <summary>
                Indicates an immediate operand.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Mips.MipsOperandType.Memory">
            <summary>
                Indicates a memory operand.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Mips.MipsRegister">
            <summary>
                MIPS Register.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.Mips.MipsRegister.TryCreate(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.Mips.MipsRegisterId)">
            <summary>
                Create a MIPS Register.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="id">
                The register's unique identifier.
            </param>
            <returns>
                A MIPS register. A null reference if the register's unique identifier is equal to
                <see cref="F:Gee.External.Capstone.Mips.MipsRegisterId.Invalid" />.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.Mips.MipsRegister.#ctor(Gee.External.Capstone.Mips.MipsRegisterId,System.String)">
            <summary>
                Create a MIPS Register.
            </summary>
            <param name="id">
                The register's unique identifier.
            </param>
            <param name="name">
                The register's name.
            </param>
        </member>
        <member name="T:Gee.External.Capstone.Mips.MipsRegisterId">
            <summary>
                MIPS Register Unique Identifier.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Mips.MipsRegisterId.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, register.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Mips.NativeMipsInstructionDetail">
            <summary>
                Native MIPS Instruction Detail.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Mips.NativeMipsInstructionDetail.OperandCount">
            <summary>
                Instruction's Operands' Count.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Mips.NativeMipsInstructionDetail.Operands">
            <summary>
                Instruction's Operands.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Mips.NativeMipsMemoryOperandValue">
            <summary>
                Native MIPS Memory Operand Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Mips.NativeMipsMemoryOperandValue.Base">
            <summary>
                Base Register.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Mips.NativeMipsMemoryOperandValue.Displacement">
            <summary>
                Displacement.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Mips.NativeMipsOperand">
            <summary>
                Native Mips Operand.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Mips.NativeMipsOperand.Type">
            <summary>
                Operand's Type.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Mips.NativeMipsOperand.Value">
            <summary>
                Operand's Value.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Mips.NativeMipsOperandValue">
            <summary>
                Native MIPS Operand Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Mips.NativeMipsOperandValue.Register">
            <summary>
                Register Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Mips.NativeMipsOperandValue.Immediate">
            <summary>
                Immediate Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.Mips.NativeMipsOperandValue.Memory">
            <summary>
                Memory Value.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.NativeCapstone">
            <summary>
                Native Capstone.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.NativeCapstone.SkipDataCallback">
            <summary>
                Skip Data Callback Delegate.
            </summary>
            <param name="pBinaryCode">
                A pointer to a buffer indicating the binary code that is being disassembled.
            </param>
            <param name="binaryCodeSize">
                A platform dependent integer indicating the size, in bytes, of the binary code buffer.
            </param>
            <param name="dataOffset">
                A platform dependent integer indicating the 0-based offset of the encountered data in the binary code
                buffer.
            </param>
            <param name="pState">
                A pointer to an opaque data structure indicating custom state.
            </param>
            <returns>
                A platform dependent integer indicating the number of bytes to skip, starting at the data offset, in
                the binary code buffer. A <c>0</c> indicates the disassemble operation should terminate immediately.
            </returns>
        </member>
        <member name="F:Gee.External.Capstone.NativeCapstone.MagicInstructionArchitectureDetailsFieldOffset">
            <summary>
                Magic Instruction Architecture Details Field Offset.
            </summary>
            <remarks>
                <para>
                    Represents the offset, in bytes, of <c>NativeInstructionDetail.X86|Arm64|...</c>. In the Capstone
                    API, those fields are defined by a nested anonymous union defined by <c>cs_detail</c>. A
                    poor-man's analysis of <c>cs_detail</c> has indicated that all fields defined by it are are
                    accessible at this offset.
                </para>
                <para>
                    It seems the .NET Marshaller marshals <c>cs_detail</c> to <c>NativeInstructionDetail</c>
                    perfectly except for <c>NativeInstructionDetail.X86|Arm64|...</c>! Those fields are always set to
                    garbage data, indicating the .NET Marshaller is marshaling them from incorrect memory locations.
                    We've no idea why! As such, <c>NativeInstructionDetail.X86|Arm64|...</c> are not defined by the
                    Capstone.NET API and are instead read manually from this offset.
                </para>
            </remarks>
        </member>
        <member name="M:Gee.External.Capstone.NativeCapstone.#cctor">
            <summary>
                Create a Native Capstone.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.NativeCapstone.CreateDisassembler(Gee.External.Capstone.DisassembleArchitecture,Gee.External.Capstone.NativeDisassembleMode)">
            <summary>
                Create a Disassembler.
            </summary>
            <param name="disassembleArchitecture">
                The hardware architecture for the disassembler to use.
            </param>
            <param name="disassembleMode">
                The hardware mode for the disassembler to use.
            </param>
            <returns>
                A disassembler handle.
            </returns>
            <exception cref="T:Gee.External.Capstone.CapstoneException">
                Thrown if a disassembler could not be created.
            </exception>
            <exception cref="T:System.ArgumentException">
                Thrown if the disassemble architecture is invalid, or if the disassemble mode is invalid or
                unsupported by the disassemble architecture.
            </exception>
            <exception cref="T:System.OutOfMemoryException">
                Thrown if sufficient memory cannot be allocated to perform the operation as a rare indication that the
                system is under heavy load.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.NativeCapstone.CreateInstruction(Gee.External.Capstone.NativeDisassemblerHandle)">
            <summary>
                Create an Instruction..
            </summary>
            <param name="hDisassembler">
                A disassembler handle.
            </param>
            <returns>
                An instruction handle.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler handle is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.NativeCapstone.GetAccessedRegisters(Gee.External.Capstone.NativeDisassemblerHandle,Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Get an Instruction's Accessed Registers.
            </summary>
            <param name="hDisassembler">
                A disassembler handle.
            </param>
            <param name="hInstruction">
                An instruction handle.
            </param>
            <returns>
                A 2-tuple, where the first item is an array of the instruction's read registers and the second item is
                an array of the instruction's written registers.
            </returns>
            <exception cref="T:Gee.External.Capstone.CapstoneException">
                Thrown if the instruction's accessed registers could not be retrieved.
            </exception>
            <exception cref="T:System.ArgumentException">
                Thrown if the disassembler handle is invalid.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the instruction was disassembled when Instruction Details Mode was disabled, or if the
                instruction was disassembled when Skip Data Mode was enabled.
            </exception>
            <exception cref="T:System.NotSupportedException">
                Thrown if Diet Mode is enabled, or if the disassembler's hardware architecture does not support the
                operation.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler handle is disposed, or if the instruction handle is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.NativeCapstone.GetInstruction(Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Get an Instruction.
            </summary>
            <param name="hInstruction">
                An instruction handle.
            </param>
            <returns>
                An instruction.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.NativeCapstone.GetInstructionDetail(Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Get an Instruction's Details.
            </summary>
            <param name="hInstruction">
                An instruction handle.
            </param>
            <returns>
                The instruction's details. A null reference indicates the instruction was disassembled without
                details.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.NativeCapstone.GetInstructionDetail``1(Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Get an Instruction's Details.
            </summary>
            <typeparam name="TInstructionDetail">
                The type of the instruction's details.
            </typeparam>
            <param name="hInstruction">
                An instruction handle.
            </param>
            <returns>
                The instruction's details. A null reference indicates the instruction was disassembled without
                details.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.NativeCapstone.GetInstructionDetail(Gee.External.Capstone.NativeInstruction@)">
            <summary>
                Get an Instruction's Details.
            </summary>
            <param name="instruction">
                An instruction.
            </param>
            <returns>
                The instruction's details. A null reference indicates the instruction was disassembled without
                details.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.NativeCapstone.GetInstructionDetail``1(Gee.External.Capstone.NativeInstruction@)">
            <summary>
                Get an Instruction's Architecture Specific Details.
            </summary>
            <typeparam name="TInstructionDetails">
                The type of the instruction's architecture specific details.
            </typeparam>
            <param name="instruction">
                An instruction.
            </param>
            <returns>
                The instruction's architecture specific details. A null reference indicates the instruction was
                disassembled without its details. 
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.NativeCapstone.GetInstructionGroupName(Gee.External.Capstone.NativeDisassemblerHandle,System.Int32)">
            <summary>
                Get an Instruction Group's Name.
            </summary>
            <param name="hDisassembler">
                A disassembler handle.
            </param>
            <param name="instructionGroupId">
                An instruction group's unique identifier.
            </param>
            <returns>
                The instruction group's name. A null reference if the disassembler handle is invalid, or if the
                instruction group's unique identifier is invalid.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler handle is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.NativeCapstone.GetRegisterName(Gee.External.Capstone.NativeDisassemblerHandle,System.Int32)">
            <summary>
                Get a Register's Name.
            </summary>
            <param name="hDisassembler">
                A disassembler handle.
            </param>
            <param name="registerId">
                A register unique identifier.
            </param>
            <returns>
                The register's name. A null reference if the disassembler handle is invalid, or if the register unique
                identifier is invalid.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler handle is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.NativeCapstone.GetVersion">
            <summary>
                Get Capstone Library's Version.
            </summary>
            <returns>
                The Capstone library's version.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.NativeCapstone.Iterate(Gee.External.Capstone.NativeDisassemblerHandle,System.Byte[],System.Int32@,System.Int64@,Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Disassemble Binary Code Iteratively.
            </summary>
            <param name="hDisassembler">
                A disassembler handle.
            </param>
            <param name="binaryCode">
                A buffer indicating the binary code to disassemble.
            </param>
            <param name="binaryCodeOffset">
                The index of the instruction to disassemble in the binary code buffer . If the instruction is
                disassembled successfully, this value will be updated to reflect the index of the next instruction to
                disassemble in the binary code buffer. If the updated value is less than the length of the binary code
                buffer, you can safely invoke this method with the updated value to disassemble the next instruction.
            </param>
            <param name="address">
                The address of the instruction. If the instruction is disassembled successfully, this value will be
                updated to reflect the address of the next instruction to disassemble in the binary code buffer.
            </param>
            <param name="hInstruction">
                An instruction handle.
            </param>
            <returns>
                A boolean true if an instruction was disassembled successfully. A boolean false otherwise.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler handle is disposed, or if the instruction handle is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.NativeCapstone.LoadLibrary">
            <summary>
                Load Library.
            </summary>
            <remarks>
                <para>
                    Loads the Capstone library in the address space of the calling process if, and only if, the target
                    .NET runtime this assembly is compiled for is .NET Framework 4.x. The .NET Framework runtime has
                    support for .NET assemblies compiled for an "Any CPU" platform, as opposed to an explicit x64 or
                    an x86 platform. When a process is executed, the .NET Framework runtime executes it as either an
                    x64 or an x86 process, depending on the host's platform. This introduces an interesting challenge
                    in that this assembly must either load either the x64 or x86 version of the Capstone library
                    depending on the calling process' platform.
                </para>
                <para>
                    Since the .NET Framework runtime supports only Windows, a Windows only API can be used to
                    conditionally load either the x64 or x86 version of the Capstone library depending on the calling
                    process' platform without sacrificing compatibility with other operating systems. To have any
                    impact, this method must be called before any function exported by the Capstone library is called,
                    ideally immediately when the calling process is first executed.
                </para>
                <para>
                    The .NET Core runtime does not have support for .NET assemblies compiled for an "Any CPU"
                    platform. When an assembly is deployed, it must explicitly specify either an x64 or x86 platform.
                    As such, there is no need to conditionally load either the x64 or x86 version of the Capstone
                    library since only the one that is compatible with the deployment platform will be supported.
                </para>
            </remarks>
        </member>
        <member name="M:Gee.External.Capstone.NativeCapstone.Query(Gee.External.Capstone.NativeQueryOption)">
            <summary>
                Query an Option.
            </summary>
            <param name="queryOption">
                An option to query.
            </param>
            <returns>
                A boolean true if the option is supported. A boolean false otherwise.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.NativeCapstone.SetDisassembleModeOption(Gee.External.Capstone.NativeDisassemblerHandle,Gee.External.Capstone.NativeDisassembleMode)">
            <summary>
                Set Disassemble Mode Option.
            </summary>
            <param name="hDisassembler">
                A disassembler handle.
            </param>
            <param name="disassembleMode">
                A hardware mode for the disassembler to use.
            </param>
            <exception cref="T:Gee.External.Capstone.CapstoneException">
                Thrown if the disassemble mode option could not be set.
            </exception>
            <exception cref="T:System.ArgumentException">
                Thrown if the disassemble mode is invalid.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler handle is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.NativeCapstone.SetDisassemblerOption(Gee.External.Capstone.NativeDisassemblerHandle,Gee.External.Capstone.NativeDisassemblerOptionType,Gee.External.Capstone.NativeDisassemblerOptionValue)">
            <summary>
                Set a Disassembler Option.
            </summary>
            <param name="hDisassembler">
                A disassembler handle.
            </param>
            <param name="optionType">
                A type of option to set.
            </param>
            <param name="optionValue">
                A value to set the option to.
            </param>
            <exception cref="T:Gee.External.Capstone.CapstoneException">
                Thrown if the option could not be set.
            </exception>
            <exception cref="T:System.ArgumentException">
                Thrown if the disassembler handle is invalid, or if the option is invalid.
            </exception>
            <exception cref="T:System.NotSupportedException">
                Thrown if the option is equal to <see cref="F:Gee.External.Capstone.NativeDisassemblerOptionType.SetSkipDataConfig" />.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler handle is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.NativeCapstone.SetInstructionMnemonicOption(Gee.External.Capstone.NativeDisassemblerHandle,Gee.External.Capstone.NativeInstructionMnemonicOptionValue@)">
            <summary>
                Set Disassembler Instruction Mnemonic Option.
            </summary>
            <param name="hDisassembler">
                A disassembler handle.
            </param>
            <param name="optionValue">
                A value to set the instruction mnemonic option to.
            </param>
            <exception cref="T:Gee.External.Capstone.CapstoneException">
                Thrown if the instruction mnemonic option could not be set.
            </exception>
            <exception cref="T:System.ArgumentException">
                Thrown if the disassembler handle is invalid.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler handle is disposed.
            </exception>
        </member>
        <member name="T:Gee.External.Capstone.NativeCapstoneImport">
            <summary>
                Native Capstone Import.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.NativeCapstoneImport.CloseDisassembler(System.IntPtr@)">
            <summary>
                Close a Disassembler
            </summary>
            <param name="pDissembler">
                A pointer to a disassembler.
            </param>
            <returns>
                A result code indicating the result of the operation.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.NativeCapstoneImport.CreateDisassembler(Gee.External.Capstone.DisassembleArchitecture,Gee.External.Capstone.NativeDisassembleMode,System.IntPtr@)">
            <summary>
                Create a Disassembler.
            </summary>
            <param name="disassembleArchitecture">
                The hardware architecture for the disassembler to use.
            </param>
            <param name="disassembleMode">
                The hardware mode for the disassembler to use.
            </param>
            <param name="pDisassembler">
                A pointer that will be updated to reference the disassembler.
            </param>
            <returns>
                A result code indicating the result of the operation.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.NativeCapstoneImport.CreateInstruction(Gee.External.Capstone.NativeDisassemblerHandle)">
            <summary>
                Create an Instruction..
            </summary>
            <param name="hDisassembler">
                A disassembler handle.
            </param>
            <returns>
                A pointer to the instruction.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler handle is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.NativeCapstoneImport.Disassemble(Gee.External.Capstone.NativeDisassemblerHandle,System.IntPtr,System.IntPtr,System.Int64,System.IntPtr,System.IntPtr@)">
            <summary>
                Disassemble Binary Code.
            </summary>
            <param name="hDisassembler">
                A disassembler handle.
            </param>
            <param name="pCode">
                A pointer to a buffer indicating the binary code to disassemble.
            </param>
            <param name="codeSize">
                A platform dependent integer indicating the size, in bytes, of the binary code buffer.
            </param>
            <param name="startingAddress">
                The address of the first instruction in the binary code buffer.
            </param>
            <param name="count">
                The maximum number of instructions in the binary code buffer to disassemble. A <c>0</c> indicates all
                instructions in the binary code buffer should be disassembled.
            </param>
            <param name="pInstructions">
                A pointer that will be updated to reference the disassembled instructions.
            </param>
            <returns>
                A platform dependent integer indicating the number of disassembled instructions if the binary code was
                disassembled successfully. An <c>IntPtr.Zero</c> otherwise.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler handle is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.NativeCapstoneImport.FreeInstructions(System.IntPtr,System.IntPtr)">
            <summary>
                Free Memory Allocated For Disassembled Instructions.
            </summary>
            <param name="pInstructions">
                A pointer to disassembled instructions.
            </param>
            <param name="count">
                The number of disassembled instructions.
            </param>
        </member>
        <member name="M:Gee.External.Capstone.NativeCapstoneImport.GetAccessedRegisters(Gee.External.Capstone.NativeDisassemblerHandle,Gee.External.Capstone.NativeInstructionHandle,System.Int16[],System.Byte@,System.Int16[],System.Byte@)">
            <summary>
                Get an Instruction's Accessed Registers.
            </summary>
            <param name="hDisassembler">
                A disassembler handle.
            </param>
            <param name="hInstruction">
                An instruction handle.
            </param>
            <param name="readRegisters">
                An array that will be updated to indicate the instruction's read registers.
            </param>
            <param name="readRegistersCount">
                An 8-bit integer that will be updated to indicate the number of read registers.
            </param>
            <param name="writtenRegisters">
                An array that will be updated to indicate the instruction's written registers.
            </param>
            <param name="writtenRegistersCount">
                An 8-bit integer that will be updated to indicate the number of written registers.
            </param>
            <returns>
                A result code indicating the result of the operation.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler handle is disposed, or if the instruction handle is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.NativeCapstoneImport.GetInstructionGroupName(Gee.External.Capstone.NativeDisassemblerHandle,System.Int32)">
            <summary>
                Get an Instruction Group's Name.
            </summary>
            <param name="hDisassembler">
                A disassembler handle.
            </param>
            <param name="instructionGroupId">
                An instruction group's unique identifier.
            </param>
            <returns>
                A pointer to an ASCII string indicating the instruction group's name.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler handle is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.NativeCapstoneImport.GetLastErrorCode(Gee.External.Capstone.NativeDisassemblerHandle)">
            <summary>
                Get Last Error Code.
            </summary>
            <param name="hDisassembler">
                A disassembler handle.
            </param>
            <returns>
                The error code of the last generated error.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler handle is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.NativeCapstoneImport.GetRegisterName(Gee.External.Capstone.NativeDisassemblerHandle,System.Int32)">
            <summary>
                Get a Register's Name.
            </summary>
            <param name="hDisassembler">
                A disassembler handle.
            </param>
            <param name="registerId">
                A register's unique identifier.
            </param>
            <returns>
                A pointer to an ASCII string indicating the register's name.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler handle is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.NativeCapstoneImport.GetVersion(System.Int32@,System.Int32@)">
            <summary>
                Get Capstone Library's Version.
            </summary>
            <param name="majorVersion">
                A 32-bit integer that will be updated to indicate the Capstone library's major version.
            </param>
            <param name="minorVersion">
                A 32-bit integer that will be updated to indicate the Capstone library's minor version.
            </param>
            <returns>
                A 32-bit integer indicating the Capstone library's major and minor version.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.NativeCapstoneImport.Iterate(Gee.External.Capstone.NativeDisassemblerHandle,System.IntPtr@,System.IntPtr@,System.Int64@,Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Disassemble Binary Code Iteratively.
            </summary>
            <param name="hDisassembler">
                A disassembler handle.
            </param>
            <param name="pCode">
                A pointer to a buffer indicating the binary code to disassemble.
            </param>
            <param name="codeSize">
                A platform dependent integer indicating the size, in bytes, of the binary code buffer.
            </param>
            <param name="address">
                The address of the first instruction in the binary code buffer.
            </param>
            <param name="hInstruction">
                An instruction handle.
            </param>
            <returns>
                A boolean true if an instruction was disassembled successfully. A boolean false otherwise.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler handle is disposed, or if the instruction handle is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.NativeCapstoneImport.LoadLibrary(System.String)">
            <summary>
                Load a Library.
            </summary>
            <param name="libraryFilePath">
                The absolute file path of the library to load.
            </param>
            <returns>
                 A pointer to the loaded library. An <c>IntPtr.Zero</c> indicates the library was not loaded.
            </returns>
            <see href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms684175(v=vs.85).aspx"/>
        </member>
        <member name="M:Gee.External.Capstone.NativeCapstoneImport.Query(Gee.External.Capstone.NativeQueryOption)">
            <summary>
                Query an Option.
            </summary>
            <param name="queryOption">
                An option to query.
            </param>
            <returns>
                A boolean true if the option is supported. A boolean false otherwise.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.NativeCapstoneImport.SetDisassemblerOption(Gee.External.Capstone.NativeDisassemblerHandle,Gee.External.Capstone.NativeDisassemblerOptionType,System.IntPtr)">
            <summary>
                Set a Disassembler Option.
            </summary>
            <param name="hDisassembler">
                A disassembler handle.
            </param>
            <param name="optionType">
                A type of option to set.
            </param>
            <param name="optionValue">
                A platform dependent integer indicating the value to set the option to.
            </param>
            <returns>
                A result code indicating the result of the operation.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler handle is disposed.
            </exception>
        </member>
        <member name="T:Gee.External.Capstone.NativeCapstoneResultCode">
            <summary>
                Native Capstone Result Code.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeCapstoneResultCode.Ok">
            <summary>
                Indicates an operation completed successfully.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeCapstoneResultCode.OutOfMemory">
            <summary>
                Indicates an operation failed because sufficient memory cannot be allocated to perform the operation.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.NativeDisassembleMode">
            <summary>
                Native Disassemble Mode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassembleMode.LittleEndian">
            <summary>
                Indicates binary code should be disassembled in little-endian mode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassembleMode.Arm">
            <summary>
                Indicates binary code should be disassembled in 32-bit ARM mode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassembleMode.Bit16">
            <summary>
                Indicates binary code should be disassembled in 16-bit mode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassembleMode.Bit32">
            <summary>
                Indicates binary code should be disassembled in 32-bit mode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassembleMode.Bit64">
            <summary>
                Indicates binary code should be disassembled in 64-bit mode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassembleMode.ArmThumb">
            <summary>
                Indicates binary code should be disassembled with support for the ARM Thumb and ARM Thumb-2
                instruction sets.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassembleMode.ArmCortexM">
            <summary>
                Indicates binary code should be disassembled with support for the ARM Cortex-M processor cores.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassembleMode.ArmV8">
            <summary>
                Indicates binary code should be disassembled with support for the ARMv8 instruction set.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassembleMode.MipsMicro">
            <summary>
                Indicates binary code should be disassembled with support for the microMIPS instruction set.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassembleMode.Mips3">
            <summary>
                Indicates binary code should be disassembled in MIPS3 mode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassembleMode.Mips32R6">
            <summary>
                Indicates binary code should be disassembled in MIPS32R6 mode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassembleMode.Mips2">
            <summary>
                Indicates binary code should be disassembled in MIPS2 mode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassembleMode.SparcV9">
            Mips II ISA
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassembleMode.PowerPcQuadProcessingExtensions">
            <summary>
                Indicates binary code should be disassembled with support for the PowerPC Quad Processing
                Extensions instruction sets.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassembleMode.M68K000">
            <summary>
                Indicates binary code should be disassembled with support for the M68K000 instruction set.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassembleMode.M68K010">
            <summary>
                Indicates binary code should be disassembled with support for the M68K010 instruction set.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassembleMode.M68K020">
            <summary>
                Indicates binary code should be disassembled with support for the M68K020 instruction set.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassembleMode.M68K030">
            <summary>
                Indicates binary code should be disassembled with support for the M68K030 instruction set.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassembleMode.M68K040">
            <summary>
                Indicates binary code should be disassembled with support for the M68K040 instruction set.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassembleMode.M68K060">
            <summary>
                Indicates binary code should be disassembled with support for the M68K060 instruction set.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassembleMode.BigEndian">
            <summary>
                Indicates binary code should be disassembled in big-endian mode.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.NativeDisassemblerHandle">
            <summary>
                Native Disassembler Handle.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.NativeDisassemblerHandle.#ctor(System.IntPtr)">
            <summary>
                Create a Native Disassembler Handle.
            </summary>
            <param name="pDisassembler">
                A pointer to a disassembler.
            </param>
        </member>
        <member name="M:Gee.External.Capstone.NativeDisassemblerHandle.ReleaseHandle">
            <summary>
                Release Handle.
            </summary>
            <returns>
                A boolean true if the handle was released. A boolean false otherwise.
            </returns>
        </member>
        <member name="T:Gee.External.Capstone.NativeDisassemblerOptionType">
            <summary>
                Native Disassembler Option Type.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassemblerOptionType.None">
            <summary>
                Indicates no option should be set.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassemblerOptionType.SetSyntax">
            <summary>
                Represents an option to set the syntax of the assembly code generated by a disassembler.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassemblerOptionType.SetInstructionDetails">
            <summary>
                Represents an option to set whether a disassembler should generate details when disassembling
                instructions.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassemblerOptionType.SetDisassembleMode">
            <summary>
                Represents an option to set a disassembler's disassemble mode.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.NativeDisassemblerOptionValue">
            <summary>
                Native Disassembler Option Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassemblerOptionValue.Disable">
            <summary>
                Indicates an option should be disabled.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassemblerOptionValue.Enable">
            <summary>
                Indicates an option should be enabled.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassemblerOptionValue.UseDefaultSyntax">
            <summary>
                Indicates a disassembler should use its default syntax for generated assembly code.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeDisassemblerOptionValue.UseIntelSyntax">
            <summary>
                Indicates a disassembler should use Intel syntax for generated assembly code.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Gee.External.Capstone.NativeDisassemblerOptionValue.UseAttSyntax" -->
        <member name="F:Gee.External.Capstone.NativeDisassemblerOptionValue.UseMasmSyntax">
            <summary>
                Indicates a disassembler should use MASM syntax for generated assembly code.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.NativeInstruction">
            <summary>
                Native Disassembled Instruction.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeInstruction.Id">
            <summary>
                Instruction's Unique Identifier.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeInstruction.Address">
            <summary>
                Instruction's Address (EIP).
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeInstruction.Size">
            <summary>
                Instruction's Size.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeInstruction.Bytes">
            <summary>
                Instruction's Machine Bytes.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeInstruction.Mnemonic">
            <summary>
                Instruction's Mnemonic.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeInstruction.Operand">
            <summary>
                Instruction's Operand Text.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeInstruction.Details">
            <summary>
                Instruction's Details.
            </summary>
            <remarks>
                Represents a pointer to the instruction's details in unmanaged memory. A <c>IntPtr.Zero</c> indicates
                the instruction was disassembled without details.
            </remarks>
        </member>
        <member name="T:Gee.External.Capstone.NativeInstructionDetail">
            <summary>
                Native Disassembled Instruction Details.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeInstructionDetail.ImplicitlyReadRegisters">
            <summary>
                Implicitly Read Registers.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeInstructionDetail.ImplicitlyReadRegisterCount">
            <summary>
                Implicitly Read Registers' Count.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeInstructionDetail.ImplicitlyWrittenRegisters">
            <summary>
                Implicitly Written Registers.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeInstructionDetail.ImplicitlyWrittenRegisterCount">
            <summary>
                Implicitly Written Registers' Count.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeInstructionDetail.Groups">
            <summary>
                Instruction's Groups.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeInstructionDetail.GroupCount">
            <summary>
                Instruction's Groups' Count.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.NativeInstructionHandle">
            <summary>
                Native Instruction Handle.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.NativeInstructionHandle.#ctor(System.IntPtr)">
            <summary>
                Create an Instruction Handle.
            </summary>
            <param name="pInstruction">
                A pointer to an instruction.
            </param>
        </member>
        <member name="M:Gee.External.Capstone.NativeInstructionHandle.ReleaseHandle">
            <summary>
                Release Handle.
            </summary>
            <returns>
                A boolean true if the handle was released. A boolean false otherwise.
            </returns>
        </member>
        <member name="T:Gee.External.Capstone.NativeInstructionMnemonicOptionValue">
            <summary>
                Native Disassembled Instruction Mnemonic Option Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeInstructionMnemonicOptionValue.InstructionId">
            <summary>
                Instruction Unique Identifier.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeInstructionMnemonicOptionValue.InstructionMnemonic">
            <summary>
                Instruction Mnemonic.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.NativeQueryOption">
            <summary>
                Native Query Option.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeQueryOption.QueryArmArchitecture">
            <summary>
                Query ARM Architecture.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeQueryOption.QueryArm64Architecture">
            <summary>
                Query ARM64 Architecture.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeQueryOption.QueryMipsArchitecture">
            <summary>
               Query MIPS Architecture.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeQueryOption.QueryX86Architecture">
            <summary>
                Query X86 Architecture.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeQueryOption.QueryPowerPcArchitecture">
            <summary>
                Query PowerPC Architecture.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeQueryOption.QuerySparcArchitecture">
            <summary>
                Query Sparc Architecture.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeQueryOption.QuerySystemZArchitecture">
            <summary>
                Query SystemZ Architecture.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeQueryOption.QueryXCoreArchitecture">
            <summary>
                Query XCore Architecture.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeQueryOption.QueryM68KArchitecture">
            <summary>
                Query 68K Architecture.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeQueryOption.QueryTms320C64XArchitecture">
            <summary>
                Query TMS320C64x Architecture.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeQueryOption.QueryM680XArchitecture">
            <summary>
                Query 680X Architecture.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeQueryOption.QueryEvmArchitecture">
            <summary>
                Query Ethereum EVM Architecture.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeQueryOption.QueryAllArchitectures">
            <summary>
                Query All Architectures.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeQueryOption.QueryDietMode">
            <summary>
                Query Diet Mode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeQueryOption.QueryX86ReduceMode">
            <summary>
                Query X86 Reduce Mode.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.NativeSkipDataOptionValue">
            <summary>
                Native Skip Data Option Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.NativeSkipDataOptionValue.InstructionMnemonic">
            <summary>
                Instruction Mnemonic.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.OperandAccessType">
            <summary>
                Operand Access Type.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.OperandAccessType.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, operand access type.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.PowerPc.CapstonePowerPcDisassembler">
            <summary>
                Capstone PowerPC Disassembler.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.PowerPc.CapstonePowerPcDisassembler.#ctor(Gee.External.Capstone.PowerPc.PowerPcDisassembleMode)">
            <summary>
                Create a Capstone PowerPC Disassembler.
            </summary>
            <param name="disassembleMode">
                The hardware mode for the disassembler to use.
            </param>
            <exception cref="T:Gee.External.Capstone.CapstoneException">
                Thrown if a disassembler could not be created.
            </exception>
            <exception cref="T:System.OutOfMemoryException">
                Thrown if sufficient memory cannot be allocated to perform the operation as a rare indication that the
                system is under heavy load.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.PowerPc.CapstonePowerPcDisassembler.CreateInstruction(Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Create an Instruction.
            </summary>
            <param name="hInstruction">
                An instruction handle.
            </param>
            <returns>
                A PowerPC instruction.
            </returns>
        </member>
        <member name="T:Gee.External.Capstone.PowerPc.NativePowerPcConditionRegisterOperandValue">
            <summary>
                Native PowerPC Condition Register Operand Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.PowerPc.NativePowerPcConditionRegisterOperandValue.Scale">
            <summary>
                Scale.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.PowerPc.NativePowerPcConditionRegisterOperandValue.Register">
            <summary>
                Register.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.PowerPc.NativePowerPcConditionRegisterOperandValue.BranchCode">
            <summary>
                Branch Code.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.PowerPc.NativePowerPcInstructionDetail">
            <summary>
                Native PowerPC Instruction Detail.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.PowerPc.NativePowerPcInstructionDetail.BranchCode">
            <summary>
                Branch Code.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.PowerPc.NativePowerPcInstructionDetail.BranchHint">
            <summary>
                Branch Hint.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.PowerPc.NativePowerPcInstructionDetail.UpdateCr0">
            <summary>
                Update CR0 Flag.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.PowerPc.NativePowerPcInstructionDetail.OperandCount">
            <summary>
                Instruction's Operands' Count.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.PowerPc.NativePowerPcInstructionDetail.Operands">
            <summary>
                Instruction's Operands.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.PowerPc.NativePowerPcMemoryOperandValue">
            <summary>
                Native PowerPC Memory Operand Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.PowerPc.NativePowerPcMemoryOperandValue.Base">
            <summary>
                Base Register.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.PowerPc.NativePowerPcMemoryOperandValue.Displacement">
            <summary>
                Displacement Value.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.PowerPc.NativePowerPcOperand">
            <summary>
                Native PowerPC Operand.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.PowerPc.NativePowerPcOperand.Type">
            <summary>
                Operand's Type.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.PowerPc.NativePowerPcOperand.Value">
            <summary>
                Operand's Value.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.PowerPc.NativePowerPcOperandValue">
            <summary>
                Native PowerPC Operand Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.PowerPc.NativePowerPcOperandValue.Register">
            <summary>
                Register Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.PowerPc.NativePowerPcOperandValue.Immediate">
            <summary>
                Immediate Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.PowerPc.NativePowerPcOperandValue.Memory">
            <summary>
                Memory Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.PowerPc.NativePowerPcOperandValue.ConditionRegister">
            <summary>
                Condition Register Value.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.PowerPc.PowerPcBranchCode">
            <summary>
                PowerPC Branch Code.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.PowerPc.PowerPcBranchCode.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, branch code.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.PowerPc.PowerPcBranchHint">
            <summary>
                PowerPC Branch Hint.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.PowerPc.PowerPcBranchHint.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, branch hint.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.PowerPc.PowerPcConditionRegisterOperandValue">
            <summary>
                PowerPC Condition Register Operand Value.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.PowerPc.PowerPcConditionRegisterOperandValue.BranchCode">
            <summary>
                Get Branch Code.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.PowerPc.PowerPcConditionRegisterOperandValue.Register">
            <summary>
                Get Register.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.PowerPc.PowerPcConditionRegisterOperandValue.Scale">
            <summary>
                Get Scale.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.PowerPc.PowerPcConditionRegisterOperandValue.#ctor(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.PowerPc.NativePowerPcConditionRegisterOperandValue@)">
            <summary>
                Create a PowerPC Condition Register Operand Value.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="nativeConditionRegisterOperandValue">
                A native PowerPC condition register operand value.
            </param>
        </member>
        <member name="T:Gee.External.Capstone.PowerPc.PowerPcDisassembleMode">
            <summary>
                PowerPC Disassemble Mode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.PowerPc.PowerPcDisassembleMode.BigEndian">
            <summary>
                Indicates binary code should be disassembled in big-endian mode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.PowerPc.PowerPcDisassembleMode.Bit32">
            <summary>
                Indicates binary code should be disassembled in 32-bit mode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.PowerPc.PowerPcDisassembleMode.Bit64">
            <summary>
                Indicates binary code should be disassembled in 64-bit mode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.PowerPc.PowerPcDisassembleMode.LittleEndian">
            <summary>
                Indicates binary code should be disassembled in little-endian mode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.PowerPc.PowerPcDisassembleMode.QuadProcessingExtensions">
            <summary>
                Indicates binary code should be disassembled with support for the PowerPC Quad Processing
                Extensions instruction sets.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.PowerPc.PowerPcInstruction">
            <summary>
                PowerPC Instruction.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.PowerPc.PowerPcInstruction.Create(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Create a PowerPC Instruction.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="hInstruction">
                An instruction handle.
            </param>
            <returns>
                A PowerPC instruction.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.PowerPc.PowerPcInstruction.#ctor(Gee.External.Capstone.PowerPc.PowerPcInstructionBuilder)">
            <summary>
                Create a PowerPC Instruction.
            </summary>
            <param name="builder">
                A builder to initialize the object with.
            </param>
        </member>
        <member name="T:Gee.External.Capstone.PowerPc.PowerPcInstructionBuilder">
            <summary>
                PowerPC Instruction Builder.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.PowerPc.PowerPcInstructionBuilder.Create">
            <summary>
                Create a PowerPC Instruction.
            </summary>
            <returns>
                A PowerPC instruction.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.PowerPc.PowerPcInstructionBuilder.CreateDetails(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Create Instruction's Details.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="hInstruction">
                An instruction handle.
            </param>
            <returns>
                The instruction's details.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.PowerPc.PowerPcInstructionBuilder.CreateDisassembleMode(Gee.External.Capstone.NativeDisassembleMode)">
            <summary>
                Create Disassemble Mode.
            </summary>
            <param name="nativeDisassembleMode">
                A native disassemble mode.
            </param>
            <returns>
                A disassemble mode.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.PowerPc.PowerPcInstructionBuilder.CreateId(System.Int32)">
            <summary>
                Create Instruction's Unique Identifier.
            </summary>
            <param name="id">
                An instruction's unique identifier.
            </param>
            <returns>
                The instruction's unique identifier.
            </returns>
        </member>
        <member name="T:Gee.External.Capstone.PowerPc.PowerPcInstructionDetail">
            <summary>
                PowerPC Instruction Detail.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.PowerPc.PowerPcInstructionDetail.BranchCode">
            <summary>
                Get Branch Code.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.PowerPc.PowerPcInstructionDetail.BranchHint">
            <summary>
                Get Hint.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.PowerPc.PowerPcInstructionDetail.Operands">
            <summary>
                Get Instruction's Operands.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.PowerPc.PowerPcInstructionDetail.UpdateCr0">
            <summary>
                Get Update CR0 Flag.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.PowerPc.PowerPcInstructionDetail.Create(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Create a PowerPC Instruction Detail.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="hInstruction">
                An instruction handle.
            </param>
            <returns>
                A PowerPC instruction detail.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.PowerPc.PowerPcInstructionDetail.#ctor(Gee.External.Capstone.PowerPc.PowerPcInstructionDetailBuilder)">
            <summary>
                Create a PowerPC Instruction Detail.
            </summary>
            <param name="builder">
                A builder to initialize the object with.
            </param>
        </member>
        <member name="T:Gee.External.Capstone.PowerPc.PowerPcInstructionDetailBuilder">
            <summary>
                PowerPC Instruction Detail Builder.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.PowerPc.PowerPcInstructionDetailBuilder.BranchCode">
            <summary>
                Get and Set Branch Code.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.PowerPc.PowerPcInstructionDetailBuilder.BranchHint">
            <summary>
                Get and Set Branch Hint.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.PowerPc.PowerPcInstructionDetailBuilder.Operands">
            <summary>
                Get and Set Instruction's Operands.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.PowerPc.PowerPcInstructionDetailBuilder.UpdateCr0">
            <summary>
                Get and Set Update CR0 Flag.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.PowerPc.PowerPcInstructionDetailBuilder.Build(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Build an Instruction Detail.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="hInstruction">
                An instruction handle.
            </param>
        </member>
        <member name="M:Gee.External.Capstone.PowerPc.PowerPcInstructionDetailBuilder.Create">
            <summary>
                Create a PowerPC Instruction Detail.
            </summary>
            <returns>
                A PowerPC instruction detail.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.PowerPc.PowerPcInstructionDetailBuilder.CreateDisassembleMode(Gee.External.Capstone.NativeDisassembleMode)">
            <summary>
                Create Disassemble Mode.
            </summary>
            <param name="nativeDisassembleMode">
                A native disassemble mode.
            </param>
            <returns>
                A disassemble mode.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.PowerPc.PowerPcInstructionDetailBuilder.CreateInstructionGroup(Gee.External.Capstone.CapstoneDisassembler,System.Byte)">
            <summary>
                Create an Instruction Group.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="instructionGroupId">
                An instruction group's unique identifier.
            </param>
            <returns>
                A PowerPC instruction group.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.PowerPc.PowerPcInstructionDetailBuilder.CreateRegister(Gee.External.Capstone.CapstoneDisassembler,System.Int16)">
            <summary>
                Create a Register.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="registerId">
                A register's unique identifier.
            </param>
            <returns>
                A PowerPC register.
            </returns>
        </member>
        <member name="T:Gee.External.Capstone.PowerPc.PowerPcInstructionGroup">
            <summary>
                PowerPC Instruction Group.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.PowerPc.PowerPcInstructionGroup.Create(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.PowerPc.PowerPcInstructionGroupId)">
            <summary>
                Create a PowerPC Instruction Group.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="id">
                The instruction group's unique identifier.
            </param>
            <returns>
                A PowerPC instruction group.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.PowerPc.PowerPcInstructionGroup.#ctor(Gee.External.Capstone.PowerPc.PowerPcInstructionGroupId,System.String)">
            <summary>
                Create a PowerPC Instruction Group.
            </summary>
            <param name="id">
                The instruction group's unique identifier.
            </param>
            <param name="name">
                The instruction group's name.
            </param>
        </member>
        <member name="T:Gee.External.Capstone.PowerPc.PowerPcInstructionGroupId">
            <summary>
                PowerPC Instruction Group Unique Identifier.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.PowerPc.PowerPcInstructionGroupId.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, instruction group.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.PowerPc.PowerPcInstructionId">
            <summary>
                PowerPC Instruction Unique Identifier.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.PowerPc.PowerPcInstructionId.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, instruction.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.PowerPc.PowerPcMemoryOperandValue">
            <summary>
                PowerPC Memory Operand Value.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.PowerPc.PowerPcMemoryOperandValue.Base">
            <summary>
                Get Base Register.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.PowerPc.PowerPcMemoryOperandValue.Displacement">
            <summary>
                Get Displacement Value.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.PowerPc.PowerPcMemoryOperandValue.#ctor(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.PowerPc.NativePowerPcMemoryOperandValue@)">
            <summary>
                Create a PowerPC Memory Operand Value.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="nativeMemoryOperandValue">
                A native PowerPC memory operand value.
            </param>
        </member>
        <member name="T:Gee.External.Capstone.PowerPc.PowerPcOperand">
            <summary>
                PowerPC Operand.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.PowerPc.PowerPcOperand._conditionRegister">
            <summary>
                Condition Register Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.PowerPc.PowerPcOperand._immediate">
            <summary>
                Immediate Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.PowerPc.PowerPcOperand._memory">
            <summary>
                Memory Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.PowerPc.PowerPcOperand._register">
            <summary>
                Register Value.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.PowerPc.PowerPcOperand.ConditionRegister">
            <summary>
                Get Condition Register Value.
            </summary>
            <remarks>
                Represents the operand's condition register value if, and only if, the operand's type is
                <see cref="F:Gee.External.Capstone.PowerPc.PowerPcOperandType.ConditionRegister" />. To determine the operand's type, call
                <see cref="P:Gee.External.Capstone.PowerPc.PowerPcOperand.Type" />.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the operand's type is not <see cref="F:Gee.External.Capstone.PowerPc.PowerPcOperandType.ConditionRegister" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.PowerPc.PowerPcOperand.Immediate">
            <summary>
                Get Immediate Value.
            </summary>
            <remarks>
                Represents the operand's immediate value if, and only if, the operand's type is
                <see cref="F:Gee.External.Capstone.PowerPc.PowerPcOperandType.Immediate" />. To determine the operand's type, call
                <see cref="P:Gee.External.Capstone.PowerPc.PowerPcOperand.Type" />.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the operand's type is not <see cref="F:Gee.External.Capstone.PowerPc.PowerPcOperandType.Immediate" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.PowerPc.PowerPcOperand.Memory">
            <summary>
                Get Memory Value.
            </summary>
            <remarks>
                Represents the operand's memory value if, and only if, the operand's type is
                <see cref="F:Gee.External.Capstone.PowerPc.PowerPcOperandType.Memory" />. To determine the operand's type, call <see cref="P:Gee.External.Capstone.PowerPc.PowerPcOperand.Type" />.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the operand's type is not <see cref="F:Gee.External.Capstone.PowerPc.PowerPcOperandType.Memory" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.PowerPc.PowerPcOperand.Register">
            <summary>
                Get Register Value.
            </summary>
            <remarks>
                Represents the operand's register value if, and only if, the operand's type is
                <see cref="F:Gee.External.Capstone.PowerPc.PowerPcOperandType.Register" />. To determine the operand's type, call <see cref="P:Gee.External.Capstone.PowerPc.PowerPcOperand.Type" />.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the operand's type is not <see cref="F:Gee.External.Capstone.PowerPc.PowerPcOperandType.Register" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.PowerPc.PowerPcOperand.Type">
            <summary>
                Get Operand's Type.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.PowerPc.PowerPcOperand.Create(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.PowerPc.NativePowerPcInstructionDetail@)">
            <summary>
                Create PowerPC Operands.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="nativeInstructionDetail">
                A native PowerPC instruction detail.
            </param>
            <returns>
                An array of PowerPC operands.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.PowerPc.PowerPcOperand.#ctor(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.PowerPc.NativePowerPcOperand@)">
            <summary>
                Create a PowerPC Operand.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="nativeOperand">
                A native PowerPC operand.
            </param>
        </member>
        <member name="T:Gee.External.Capstone.PowerPc.PowerPcOperandType">
            <summary>
                PowerPC Operand Type.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.PowerPc.PowerPcOperandType.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, operand type.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.PowerPc.PowerPcOperandType.Register">
            <summary>
                Indicates a register operand.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.PowerPc.PowerPcOperandType.Immediate">
            <summary>
                Indicates an immediate operand.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.PowerPc.PowerPcOperandType.Memory">
            <summary>
                Indicates a memory operand.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.PowerPc.PowerPcOperandType.ConditionRegister">
            <summary>
                Indicates a condition register operand.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.PowerPc.PowerPcRegister">
            <summary>
                PowerPC Register.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.PowerPc.PowerPcRegister.TryCreate(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.PowerPc.PowerPcRegisterId)">
            <summary>
                Create a PowerPC Register.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="id">
                The register's unique identifier.
            </param>
            <returns>
                A PowerPC register. A null reference if the register's unique identifier is equal to
                <see cref="F:Gee.External.Capstone.PowerPc.PowerPcRegisterId.Invalid" />.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.PowerPc.PowerPcRegister.#ctor(Gee.External.Capstone.PowerPc.PowerPcRegisterId,System.String)">
            <summary>
                Create a PowerPC Register.
            </summary>
            <param name="id">
                The register's unique identifier.
            </param>
            <param name="name">
                The register's name.
            </param>
        </member>
        <member name="T:Gee.External.Capstone.PowerPc.PowerPcRegisterId">
            <summary>
                PowerPC Register Unique Identifier.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.PowerPc.PowerPcRegisterId.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, register.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.Register`1">
            <summary>
                Register.
            </summary>
            <typeparam name="TId">
                The type of the register's unique identifier.
            </typeparam>
        </member>
        <member name="F:Gee.External.Capstone.Register`1._name">
            <summary>
                Register's Name.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Register`1.Id">
            <summary>
                Get Register's Unique Identifier.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.Register`1.IsDietModeEnabled">
            <summary>
                Determine if Diet Mode is Enabled.
            </summary>
            <remarks>
                Indicates if Diet Mode is enabled. A boolean true indicates it is enabled. A boolean false otherwise.
            </remarks>
        </member>
        <member name="P:Gee.External.Capstone.Register`1.Name">
            <summary>
                Get Register's Name.
            </summary>
            <remarks>
                Represents the register's name if, and only if, Diet Mode is disabled. To determine if Diet Mode is
                disabled, call <see cref="P:Gee.External.Capstone.Register`1.IsDietModeEnabled" />.
            </remarks>
            <exception cref="T:System.NotSupportedException">
                Thrown if Diet Mode is enabled.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.Register`1.#ctor(`0,System.String)">
            <summary>
                Create a Register.
            </summary>
            <param name="id">
                The register's unique identifier.
            </param>
            <param name="name">
                The register's name.
            </param>
        </member>
        <member name="M:Gee.External.Capstone.Register`1.Equals(System.Object)">
            <summary>
                Determine if This Object is Equal to Another Object.
            </summary>
            <param name="object">
                An object to compare to. Should not be a null reference.
            </param>
            <returns>
                A boolean true if this object is equal to the object. A boolean false otherwise.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.Register`1.GetHashCode">
            <summary>
                Get Object's Hash Code.
            </summary>
            <returns>
                The object's hash code.
            </returns>
        </member>
        <member name="T:Gee.External.Capstone.SafeHandleExtension">
            <summary>
                Safe Handle Extension.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.SafeHandleExtension.DangerousAddRefAndGetHandle(System.Runtime.InteropServices.SafeHandle)">
            <summary>
                Add a Reference to and Get a Handle.
            </summary>
            <remarks>
                <para>
                    Convenient method to add a reference to a handle before retrieving its wrapped pointer. If a
                    reference cannot be added to the handle, an exception is thrown. This follows Microsoft's
                    recommended best practice to add a reference to the handle before retrieving its wrapped pointer
                    to minimize the risk of handle recycle attacks. You, however, are responsible for releasing the
                    reference to the handle after you are done with it, using <c>SafeHandle.DangerousRelease()</c>,
                    otherwise you risk a memory leak.
                </para>
                <para>
                    This method is the equivalent to calling both <c>SafeHandle.DangerousAddRef()</c> and
                    <c>SafeHandle.DangerousGetHandle()</c>, except an exception is thrown if the operation fails. This
                    is for convenience if, and only if, you want to treat the failure of this operation as
                    exceptional! If you do not want to treat the failure of this operation as exceptional and you
                    instead have a non-exceptional back-off routine, do not call this method and perform your back-off
                    routine in an exception handler! You're better off simply calling both
                    <c>SafeHandle.DangerousAddRef()</c> and <c>SafeHandle.DangerousGetHandle()</c> yourself.
                </para>
            </remarks>
            <param name="this">
                A handle.
            </param>
            <returns>
                The handle's wrapped pointer.
            </returns>
            <exception cref="T:System.ArgumentException">
                Thrown if the handle is closed, or if the handle is invalid.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if the handle is a null reference.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                Thrown if a reference to the handle could not be added.
            </exception>
        </member>
        <member name="T:Gee.External.Capstone.X86.CapstoneX86Disassembler">
            <summary>
                Capstone X86 Disassembler.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.CapstoneX86Disassembler.IsReduceModeEnabled">
            <summary>
                Determine if Reduce Mode is Enabled.
            </summary>
            <remarks>
                Indicates if Reduce Mode is enabled. A boolean true indicates it is enabled. A boolean false
                otherwise.
            </remarks>
        </member>
        <member name="M:Gee.External.Capstone.X86.CapstoneX86Disassembler.#ctor(Gee.External.Capstone.X86.X86DisassembleMode)">
            <summary>
                Create a Capstone X86 Disassembler.
            </summary>
            <param name="disassembleMode">
                The hardware mode for the disassembler to use.
            </param>
            <exception cref="T:Gee.External.Capstone.CapstoneException">
                Thrown if a disassembler could not be created.
            </exception>
            <exception cref="T:System.OutOfMemoryException">
                Thrown if sufficient memory cannot be allocated to perform the operation as a rare indication that the
                system is under heavy load.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.X86.CapstoneX86Disassembler.CreateInstruction(Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Create an Instruction.
            </summary>
            <param name="hInstruction">
                An instruction handle.
            </param>
            <returns>
                An X86 instruction.
            </returns>
        </member>
        <member name="T:Gee.External.Capstone.X86.NativeX86Encoding">
            <summary>
                Native X86 Encoding.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86Encoding.ModRmOffset">
            <summary>
                ModR/M Offset.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86Encoding.DisplacementOffset">
            <summary>
                Displacement Offset.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86Encoding.DisplacementSize">
            <summary>
                Displacement Size.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86Encoding.ImmediateOffset">
            <summary>
                Immediate Offset.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86Encoding.ImmediateSize">
            <summary>
                Immediate Size.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.X86.NativeX86Flag">
            <summary>
                Native X86 Flag.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86Flag.EFlags">
            <summary>
                EFLAGS.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86Flag.FpuFlags">
            <summary>
                FPU Flags.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.X86.NativeX86InstructionDetail">
            <summary>
                Native X86 Instruction Detail.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86InstructionDetail.Prefix">
            <summary>
                Instruction's Prefix.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86InstructionDetail.Opcode">
            <summary>
                Instruction's Opcode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86InstructionDetail.Rex">
            <summary>
                REX Prefix.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86InstructionDetail.AddressSize">
            <summary>
                Address Size.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86InstructionDetail.ModRm">
            <summary>
                ModR/M.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86InstructionDetail.Sib">
            <summary>
                SIB Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86InstructionDetail.Displacement">
            <summary>
                Displacement Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86InstructionDetail.SibIndex">
            <summary>
                SIB Index.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86InstructionDetail.SibScale">
            <summary>
                SIB Scale.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86InstructionDetail.SibBase">
            <summary>
                SIB Base.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86InstructionDetail.XopConditionCode">
            <summary>
                XOP Condition Code.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86InstructionDetail.SseConditionCode">
            <summary>
                SSE Condition Code.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86InstructionDetail.AvxConditionCode">
            <summary>
                AVX Condition Code.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86InstructionDetail.AvxSuppressAllExceptions">
            <summary>
                AVX Suppress All Exceptions Flag.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86InstructionDetail.AvxRoundingMode">
            <summary>
                AVX Rounding Mode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86InstructionDetail.Flag">
            <summary>
                Flag.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86InstructionDetail.OperandCount">
            <summary>
                Instruction's Operands' Count.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86InstructionDetail.Operands">
            <summary>
                Instruction's Operands.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86InstructionDetail.Encoding">
            <summary>
                Encoding.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.X86.NativeX86MemoryOperandValue">
            <summary>
                Native X86 Memory Operand Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86MemoryOperandValue.Segment">
            <summary>
                Segment Register.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86MemoryOperandValue.Base">
            <summary>
                Base Register.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86MemoryOperandValue.Index">
            <summary>
                Index Register.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86MemoryOperandValue.Scale">
            <summary>
                Index Register's Scale.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86MemoryOperandValue.Displacement">
            <summary>
                Displacement Value.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.X86.NativeX86Operand">
            <summary>
                Native X86 Operand.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86Operand.Type">
            <summary>
                Operand's Type.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86Operand.Value">
            <summary>
                Operand's Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86Operand.Size">
            <summary>
                Operand's Size.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86Operand.AccessType">
            <summary>
                Operand's Access Type.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86Operand.AvxBroadcast">
            <summary>
                AVX Broadcast.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86Operand.AvxZeroOpMask">
            <summary>
                AVX Zero Opmask.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.X86.NativeX86OperandValue">
            <summary>
                Native X86 Operand Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86OperandValue.Register">
            <summary>
                Register Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86OperandValue.Immediate">
            <summary>
                Immediate Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.NativeX86OperandValue.Memory">
            <summary>
                Memory Value.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.X86.X86AvxBroadcast">
            <summary>
                X86 AVX Broadcast.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.X86AvxBroadcast.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, AVX broadcast.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.X86.X86AvxConditionCode">
            <summary>
                X86 AVX Condition Code.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.X86AvxConditionCode.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, AVX condition code.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.X86.X86AvxRoundingMode">
            <summary>
                X86 AVX Rounding Mode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.X86AvxRoundingMode.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, AVX rounding mode.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.X86.X86DisassembleMode">
            <summary>
                X86 Disassemble Mode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.X86DisassembleMode.Bit16">
            <summary>
                Indicates binary code should be disassembled in 16-bit mode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.X86DisassembleMode.Bit32">
            <summary>
                Indicates binary code should be disassembled in 32-bit mode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.X86DisassembleMode.Bit64">
            <summary>
                Indicates binary code should be disassembled in 64-bit mode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.X86DisassembleMode.LittleEndian">
            <summary>
                Indicates binary code should be disassembled in little-endian mode.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.X86.X86Encoding">
            <summary>
                X86 Encoding.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86Encoding.DisplacementOffset">
            <summary>
                Get Displacement Offset.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86Encoding.DisplacementSize">
            <summary>
                Get Displacement Size.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86Encoding.ImmediateOffset">
            <summary>
                Get Immediate Offset.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86Encoding.ImmediateSize">
            <summary>
                Get Immediate Size.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86Encoding.ModRmOffset">
            <summary>
                Get ModR/M Offset.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.X86.X86Encoding.#ctor(Gee.External.Capstone.X86.NativeX86Encoding@)">
            <summary>
                Create an X86 Encoding.
            </summary>
            <param name="nativeEncoding">
                A native X86 encoding.
            </param>
        </member>
        <member name="T:Gee.External.Capstone.X86.X86Instruction">
            <summary>
                X86 Instruction.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.X86.X86Instruction.Create(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Create an X86 Instruction.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="hInstruction">
                An instruction handle.
            </param>
            <returns>
                An X86 instruction.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.X86.X86Instruction.#ctor(Gee.External.Capstone.X86.X86InstructionBuilder)">
            <summary>
                Create an X86 Instruction.
            </summary>
            <param name="builder">
                A builder to initialize the object with.
            </param>
        </member>
        <member name="T:Gee.External.Capstone.X86.X86InstructionBuilder">
            <summary>
                X86 Instruction Builder.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.X86.X86InstructionBuilder.Create">
            <summary>
                Create an X86 Instruction.
            </summary>
            <returns>
                An X86 instruction.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.X86.X86InstructionBuilder.CreateDetails(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Create Instruction's Details.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="hInstruction">
                An instruction handle.
            </param>
            <returns>
                The instruction's details.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.X86.X86InstructionBuilder.CreateDisassembleMode(Gee.External.Capstone.NativeDisassembleMode)">
            <summary>
                Create Disassemble Mode.
            </summary>
            <param name="nativeDisassembleMode">
                A native disassemble mode.
            </param>
            <returns>
                A disassemble mode.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.X86.X86InstructionBuilder.CreateId(System.Int32)">
            <summary>
                Create Instruction's Unique Identifier.
            </summary>
            <param name="id">
                An instruction's unique identifier.
            </param>
            <returns>
                The instruction's unique identifier.
            </returns>
        </member>
        <member name="T:Gee.External.Capstone.X86.X86InstructionDetail">
            <summary>
                X86 Instruction Detail.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetail.AddressSize">
            <summary>
                Get Address Size.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetail.AvxConditionCode">
            <summary>
                Get AVX Condition Code.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetail.AvxRoundingMode">
            <summary>
                Get AVX Rounding Mode.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetail.AvxSuppressAllExceptions">
            <summary>
                Get AVX Suppress All Exceptions Flag.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetail.Displacement">
            <summary>
                Get Displacement Value.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetail.EFlags">
            <summary>
                Get EFlags.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetail.Encoding">
            <summary>
                Get Encoding.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetail.FpuFlags">
            <summary>
                Get FPU Flags.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetail.ModRm">
            <summary>
                Get ModR/M.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetail.Opcode">
            <summary>
                Get Instruction's Opcode.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetail.Operands">
            <summary>
                Get Instruction's Operands.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetail.Prefix">
            <summary>
                Get Instruction's Prefix.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetail.Rex">
            <summary>
                Get REX Prefix.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetail.Sib">
            <summary>
                Get SIB Value.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetail.SibBase">
            <summary>
                Get SIB Base.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetail.SibIndex">
            <summary>
                Get SIB Index.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetail.SibScale">
            <summary>
                Get SIB Scale.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetail.SseConditionCode">
            <summary>
                Get SSE Condition Code.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetail.XopConditionCode">
            <summary>
                Get XOP Condition Code.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.X86.X86InstructionDetail.Create(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Create an X86 Instruction Detail.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="hInstruction">
                An instruction handle.
            </param>
            <returns>
                An X86 instruction detail.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.X86.X86InstructionDetail.#ctor(Gee.External.Capstone.X86.X86InstructionDetailBuilder)">
            <summary>
                Create an X86 Instruction Detail.
            </summary>
            <param name="builder">
                A builder to initialize the object with.
            </param>
        </member>
        <member name="T:Gee.External.Capstone.X86.X86InstructionDetailBuilder">
            <summary>
                X86 Instruction Detail Builder.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetailBuilder.AddressSize">
            <summary>
                Get and Set Address Size.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetailBuilder.AvxConditionCode">
            <summary>
                Get and Set AVX Condition Code.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetailBuilder.AvxRoundingMode">
            <summary>
                Get and Set AVX Rounding Mode.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetailBuilder.AvxSuppressAllExceptions">
            <summary>
                Get and Set AVX Suppress All Exceptions Flag.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetailBuilder.Displacement">
            <summary>
                Get and Set Displacement Value.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetailBuilder.EFlags">
            <summary>
                Get and Set EFlags.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetailBuilder.Encoding">
            <summary>
                Get and Set Encoding.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetailBuilder.FpuFlags">
            <summary>
                Get and Set FPU Flags.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetailBuilder.ModRm">
            <summary>
                Get and Set ModR/M.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetailBuilder.Opcode">
            <summary>
                Get and Set Instruction's Opcode.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetailBuilder.Operands">
            <summary>
                Get and Set Instruction's Operands.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetailBuilder.Prefix">
            <summary>
                Get and Set Instruction's Prefix.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetailBuilder.Rex">
            <summary>
                Get and Set REX Prefix.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetailBuilder.Sib">
            <summary>
                Get and Set SIB Value.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetailBuilder.SibBase">
            <summary>
                Get and Set SIB Base.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetailBuilder.SibIndex">
            <summary>
                Get and Set SIB Index.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetailBuilder.SibScale">
            <summary>
                Get and Set SIB Scale.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetailBuilder.SseConditionCode">
            <summary>
                Get and Set SSE Condition Code.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86InstructionDetailBuilder.XopConditionCode">
            <summary>
                Get and Set XOP Condition Code.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.X86.X86InstructionDetailBuilder.Build(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Build an Instruction Detail.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="hInstruction">
                An instruction handle.
            </param>
        </member>
        <member name="M:Gee.External.Capstone.X86.X86InstructionDetailBuilder.Create">
            <summary>
                Create an X86 Instruction Detail.
            </summary>
            <returns>
                An X86 instruction detail.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.X86.X86InstructionDetailBuilder.CreateDisassembleMode(Gee.External.Capstone.NativeDisassembleMode)">
            <summary>
                Create Disassemble Mode.
            </summary>
            <param name="nativeDisassembleMode">
                A native disassemble mode.
            </param>
            <returns>
                A disassemble mode.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.X86.X86InstructionDetailBuilder.CreateInstructionGroup(Gee.External.Capstone.CapstoneDisassembler,System.Byte)">
            <summary>
                Create an Instruction Group.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="instructionGroupId">
                An instruction group's unique identifier.
            </param>
            <returns>
                An X86 instruction group.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.X86.X86InstructionDetailBuilder.CreateRegister(Gee.External.Capstone.CapstoneDisassembler,System.Int16)">
            <summary>
                Create a Register.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="registerId">
                A register's unique identifier.
            </param>
            <returns>
                An X86 register.
            </returns>
        </member>
        <member name="T:Gee.External.Capstone.X86.X86InstructionGroup">
            <summary>
                X86 Instruction Group.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.X86.X86InstructionGroup.Create(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.X86.X86InstructionGroupId)">
            <summary>
                Create an X86 Instruction Group.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="id">
                The instruction group's unique identifier.
            </param>
            <returns>
                An X86 instruction group.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.X86.X86InstructionGroup.#ctor(Gee.External.Capstone.X86.X86InstructionGroupId,System.String)">
            <summary>
                Create an X86 Instruction Group.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.X86.X86InstructionGroupId">
            <summary>
                X86 Instruction Group Unique Identifier.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.X86InstructionGroupId.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, instruction group.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.X86.X86InstructionId">
            <summary>
                X86 Instruction Unique Identifier.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.X86InstructionId.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, instruction.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.X86.X86MemoryOperandValue">
            <summary>
                X86 Memory Operand Value.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86MemoryOperandValue.Base">
            <summary>
                Get Base Register.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86MemoryOperandValue.Displacement">
            <summary>
                Get Displacement Value.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86MemoryOperandValue.Index">
            <summary>
                Get Index Register.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86MemoryOperandValue.Scale">
            <summary>
                Get Index Register's Scale.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86MemoryOperandValue.Segment">
            <summary>
                Get Segment Register.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.X86.X86MemoryOperandValue.#ctor(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.X86.NativeX86MemoryOperandValue@)">
            <summary>
                Create an X86 Memory Operand Value.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="nativeMemoryOperandValue">
                A native X86 memory operand value.
            </param>
        </member>
        <member name="T:Gee.External.Capstone.X86.X86Operand">
            <summary>
                X86 Operand.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.X86Operand._accessType">
            <summary>
                Operand's Access Type.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.X86Operand._immediate">
            <summary>
                Immediate Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.X86Operand._memory">
            <summary>
                Memory Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.X86Operand._register">
            <summary>
                Register Value.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86Operand.AccessType">
            <summary>
                Get Operand's Access Type.
            </summary>
            <remarks>
                Represents the operand's access type if, and only if, Diet Mode is disabled. To determine if Diet Mode
                is disabled, call <see cref="P:Gee.External.Capstone.X86.X86Operand.IsDietModeEnabled" />.
            </remarks>
            <exception cref="T:System.NotSupportedException">
                Thrown if Diet Mode is enabled.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86Operand.AvxBroadcast">
            <summary>
                Get AVX Broadcast.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86Operand.AvxZeroOpMask">
            <summary>
                Get AVX Zero Opmask.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86Operand.Immediate">
            <summary>
                Get Immediate Value.
            </summary>
            <remarks>
                Represents the operand's immediate value if, and only if, the operand's type is
                <see cref="F:Gee.External.Capstone.X86.X86OperandType.Immediate" />. To determine the operand's type, call <see cref="P:Gee.External.Capstone.X86.X86Operand.Type" />.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the operand's type is not <see cref="F:Gee.External.Capstone.X86.X86OperandType.Immediate" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86Operand.IsDietModeEnabled">
            <summary>
                Determine if Diet Mode is Enabled.
            </summary>
            <remarks>
                Indicates if Diet Mode is enabled. A boolean true indicates it is enabled. A boolean false otherwise.
            </remarks>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86Operand.Memory">
            <summary>
                Get Memory Value.
            </summary>
            <remarks>
                Represents the operand's memory value if, and only if, the operand's type is
                <see cref="F:Gee.External.Capstone.X86.X86OperandType.Memory" />. To determine the operand's type, call <see cref="P:Gee.External.Capstone.X86.X86Operand.Type" />.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the operand's type is not <see cref="F:Gee.External.Capstone.X86.X86OperandType.Memory" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86Operand.Register">
            <summary>
                Get Register Value.
            </summary>
            <remarks>
                Represents the operand's register value if, and only if, the operand's type is
                <see cref="F:Gee.External.Capstone.X86.X86OperandType.Register" />. To determine the operand's type, call <see cref="P:Gee.External.Capstone.X86.X86Operand.Type" />.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the operand's type is not <see cref="F:Gee.External.Capstone.X86.X86OperandType.Register" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86Operand.Size">
            <summary>
                Get Operand's Size.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.X86.X86Operand.Type">
            <summary>
                Get Operand's Type.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.X86.X86Operand.Create(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.X86.NativeX86InstructionDetail@)">
            <summary>
                Create X86 Operands.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="nativeInstructionDetail">
                A native X86 instruction detail.
            </param>
            <returns>
                An array of X86 operands.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.X86.X86Operand.#ctor(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.X86.NativeX86Operand@)">
            <summary>
                Create an X86 Operand.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="nativeOperand">
                A native X86 operand.
            </param>
        </member>
        <member name="T:Gee.External.Capstone.X86.X86OperandType">
            <summary>
                X86 Operand Type.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.X86OperandType.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, operand type.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.X86OperandType.Register">
            <summary>
                Indicates a register operand.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.X86OperandType.Immediate">
            <summary>
                Indicates an immediate operand.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.X86OperandType.Memory">
            <summary>
                Indicates a memory operand.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.X86.X86Prefix">
            <summary>
                X86 Prefix.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.X86Prefix.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, prefix.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.X86.X86Register">
            <summary>
                X86 Register.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.X86.X86Register.TryCreate(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.X86.X86RegisterId)">
            <summary>
                Create an X86 Register.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="id">
                The register's unique identifier.
            </param>
            <returns>
                An X86 register. A null reference if the register's unique identifier is equal to
                <see cref="F:Gee.External.Capstone.X86.X86RegisterId.Invalid" />.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.X86.X86Register.#ctor(Gee.External.Capstone.X86.X86RegisterId,System.String)">
            <summary>
                Create an X86 Register.
            </summary>
            <param name="id">
                The register's unique identifier.
            </param>
            <param name="name">
                The register's name.
            </param>
        </member>
        <member name="T:Gee.External.Capstone.X86.X86RegisterId">
            <summary>
                X86 Register Unique Identifier.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.X86RegisterId.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, register.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.X86.X86SseConditionCode">
            <summary>
                X86 SSE Condition Code.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.X86SseConditionCode.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, SSE condition code.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.X86.X86XopConditionCode">
            <summary>
                X86 XOP Condition Code.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.X86.X86XopConditionCode.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, XOP condition code.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.XCore.CapstoneXCoreDisassembler">
            <summary>
                Capstone XCore Disassembler.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.XCore.CapstoneXCoreDisassembler.#ctor(Gee.External.Capstone.XCore.XCoreDisassembleMode)">
            <summary>
                Create a Capstone XCore Disassembler.
            </summary>
            <param name="disassembleMode">
                The hardware mode for the disassembler to use.
            </param>
            <exception cref="T:Gee.External.Capstone.CapstoneException">
                Thrown if a disassembler could not be created.
            </exception>
            <exception cref="T:System.OutOfMemoryException">
                Thrown if sufficient memory cannot be allocated to perform the operation as a rare indication that the
                system is under heavy load.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.XCore.CapstoneXCoreDisassembler.CreateInstruction(Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Create an Instruction.
            </summary>
            <param name="hInstruction">
                An instruction handle.
            </param>
            <returns>
                An XCore instruction.
            </returns>
        </member>
        <member name="T:Gee.External.Capstone.XCore.NativeXCoreInstructionDetail">
            <summary>
                Native XCore Instruction Detail.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.XCore.NativeXCoreInstructionDetail.OperandCount">
            <summary>
                Instruction's Operands' Count.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.XCore.NativeXCoreInstructionDetail.Operands">
            <summary>
                Instruction's Operands.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.XCore.NativeXCoreMemoryOperandValue">
            <summary>
                Native XCore Memory Operand Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.XCore.NativeXCoreMemoryOperandValue.Base">
            <summary>
                Base Register.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.XCore.NativeXCoreMemoryOperandValue.Index">
            <summary>
                Index Register.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.XCore.NativeXCoreMemoryOperandValue.Displacement">
            <summary>
                Displacement Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.XCore.NativeXCoreMemoryOperandValue.Direct">
            <summary>
                Direct Value.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.XCore.NativeXCoreOperand">
            <summary>
                Native XCore Operand.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.XCore.NativeXCoreOperand.Type">
            <summary>
                Operand's Type.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.XCore.NativeXCoreOperand.Value">
            <summary>
                Operand's Value.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.XCore.NativeXCoreOperandValue">
            <summary>
                Native XCore Operand Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.XCore.NativeXCoreOperandValue.Register">
            <summary>
                Register Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.XCore.NativeXCoreOperandValue.Immediate">
            <summary>
                Immediate Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.XCore.NativeXCoreOperandValue.Memory">
            <summary>
                Memory Value.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.XCore.XCoreDisassembleMode">
            <summary>
                XCore Disassemble Mode.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.XCore.XCoreDisassembleMode.BigEndian">
            <summary>
                Indicates binary code should be disassembled in big-endian mode.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.XCore.XCoreInstruction">
            <summary>
                XCore Instruction.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.XCore.XCoreInstruction.Create(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Create an XCore Instruction.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="hInstruction">
                An instruction handle.
            </param>
            <returns>
                An XCore instruction.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.XCore.XCoreInstruction.#ctor(Gee.External.Capstone.XCore.XCoreInstructionBuilder)">
            <summary>
                Create an XCore Instruction.
            </summary>
            <param name="builder">
                A builder to initialize the object with.
            </param>
        </member>
        <member name="T:Gee.External.Capstone.XCore.XCoreInstructionBuilder">
            <summary>
                XCore Instruction Builder.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.XCore.XCoreInstructionBuilder.Create">
            <summary>
                Create an XCore Instruction.
            </summary>
            <returns>
                An XCore instruction.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.XCore.XCoreInstructionBuilder.CreateDetails(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Create Instruction's Details.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="hInstruction">
                An instruction handle.
            </param>
            <returns>
                The instruction's details.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.XCore.XCoreInstructionBuilder.CreateDisassembleMode(Gee.External.Capstone.NativeDisassembleMode)">
            <summary>
                Create Disassemble Mode.
            </summary>
            <param name="nativeDisassembleMode">
                A native disassemble mode.
            </param>
            <returns>
                A disassemble mode.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.XCore.XCoreInstructionBuilder.CreateId(System.Int32)">
            <summary>
                Create Instruction's Unique Identifier.
            </summary>
            <param name="id">
                An instruction's unique identifier.
            </param>
            <returns>
                The instruction's unique identifier.
            </returns>
        </member>
        <member name="T:Gee.External.Capstone.XCore.XCoreInstructionDetail">
            <summary>
                XCore Instruction Detail.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.XCore.XCoreInstructionDetail.Operands">
            <summary>
                Get Instruction's Operands.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.XCore.XCoreInstructionDetail.Create(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Create an XCore Instruction Detail.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="hInstruction">
                An instruction handle.
            </param>
            <returns>
                An XCore instruction detail.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.XCore.XCoreInstructionDetail.#ctor(Gee.External.Capstone.XCore.XCoreInstructionDetailBuilder)">
            <summary>
                Create an XCore Instruction Detail.
            </summary>
            <param name="builder">
                A builder to initialize the object with.
            </param>
        </member>
        <member name="T:Gee.External.Capstone.XCore.XCoreInstructionDetailBuilder">
            <summary>
                XCore Instruction Detail Builder.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.XCore.XCoreInstructionDetailBuilder.Operands">
            <summary>
                Get and Set Instruction's Operands.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.XCore.XCoreInstructionDetailBuilder.Build(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.NativeInstructionHandle)">
            <summary>
                Build an Instruction Detail.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="hInstruction">
                An instruction handle.
            </param>
        </member>
        <member name="M:Gee.External.Capstone.XCore.XCoreInstructionDetailBuilder.Create">
            <summary>
                Create an XCore Instruction Detail.
            </summary>
            <returns>
                An XCore instruction detail.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.XCore.XCoreInstructionDetailBuilder.CreateDisassembleMode(Gee.External.Capstone.NativeDisassembleMode)">
            <summary>
                Create Disassemble Mode.
            </summary>
            <param name="nativeDisassembleMode">
                A native disassemble mode.
            </param>
            <returns>
                A disassemble mode.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.XCore.XCoreInstructionDetailBuilder.CreateInstructionGroup(Gee.External.Capstone.CapstoneDisassembler,System.Byte)">
            <summary>
                Create an Instruction Group.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="instructionGroupId">
                An instruction group's unique identifier.
            </param>
            <returns>
                An instruction group.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.XCore.XCoreInstructionDetailBuilder.CreateRegister(Gee.External.Capstone.CapstoneDisassembler,System.Int16)">
            <summary>
                Create a Register.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="registerId">
                A register's unique identifier.
            </param>
            <returns>
                A register.
            </returns>
        </member>
        <member name="T:Gee.External.Capstone.XCore.XCoreInstructionGroup">
            <summary>
                XCore Instruction Group.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.XCore.XCoreInstructionGroup.Create(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.XCore.XCoreInstructionGroupId)">
            <summary>
                Create an XCore Instruction Group.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="id">
                The instruction group's unique identifier.
            </param>
            <returns>
                An XCore instruction group.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.XCore.XCoreInstructionGroup.#ctor(Gee.External.Capstone.XCore.XCoreInstructionGroupId,System.String)">
            <summary>
                Create an XCore Instruction Group.
            </summary>
            <param name="id">
                The instruction group's unique identifier.
            </param>
            <param name="name">
                The instruction group's name.
            </param>
        </member>
        <member name="T:Gee.External.Capstone.XCore.XCoreInstructionGroupId">
            <summary>
                XCore Instruction Group Unique Identifier.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.XCore.XCoreInstructionGroupId.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, instruction group.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.XCore.XCoreInstructionId">
            <summary>
                XCore Instruction Unique Identifier.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.XCore.XCoreInstructionId.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, instruction.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.XCore.XCoreMemoryOperandValue">
            <summary>
                XCore Memory Operand Value.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.XCore.XCoreMemoryOperandValue.Base">
            <summary>
                Get Base Register.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.XCore.XCoreMemoryOperandValue.Direct">
            <summary>
                Get Direct Value.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.XCore.XCoreMemoryOperandValue.Displacement">
            <summary>
                Get Displacement Value.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.XCore.XCoreMemoryOperandValue.Index">
            <summary>
                Get Index Register.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.XCore.XCoreMemoryOperandValue.#ctor(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.XCore.NativeXCoreMemoryOperandValue@)">
            <summary>
                Create an XCore Memory Operand Value.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="nativeMemoryOperandValue">
                A native XCore memory operand value.
            </param>
        </member>
        <member name="T:Gee.External.Capstone.XCore.XCoreOperand">
            <summary>
                XCore Operand.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.XCore.XCoreOperand._immediate">
            <summary>
                Immediate Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.XCore.XCoreOperand._memory">
            <summary>
                Memory Value.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.XCore.XCoreOperand._register">
            <summary>
                Register Value.
            </summary>
        </member>
        <member name="P:Gee.External.Capstone.XCore.XCoreOperand.Immediate">
            <summary>
                Get Immediate Value.
            </summary>
            <remarks>
                Represents the operand's immediate value if, and only if, the operand's type is
                <see cref="F:Gee.External.Capstone.XCore.XCoreOperandType.Immediate" />. To determine the operand's type, call <see cref="P:Gee.External.Capstone.XCore.XCoreOperand.Type" />.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the operand's type is not <see cref="F:Gee.External.Capstone.XCore.XCoreOperandType.Immediate" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.XCore.XCoreOperand.Memory">
            <summary>
                Get Memory Value.
            </summary>
            <remarks>
                Represents the operand's memory value if, and only if, the operand's type is
                <see cref="F:Gee.External.Capstone.XCore.XCoreOperandType.Memory" />. To determine the operand's type, call <see cref="P:Gee.External.Capstone.XCore.XCoreOperand.Type" />.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the operand's type is not <see cref="F:Gee.External.Capstone.XCore.XCoreOperandType.Memory" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.XCore.XCoreOperand.Register">
            <summary>
                Get Register Value.
            </summary>
            <remarks>
                Represents the operand's register value if, and only if, the operand's type is
                <see cref="F:Gee.External.Capstone.XCore.XCoreOperandType.Register" />. To determine the operand's type, call <see cref="P:Gee.External.Capstone.XCore.XCoreOperand.Type" />.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the operand's type is not <see cref="F:Gee.External.Capstone.XCore.XCoreOperandType.Register" />.
            </exception>
        </member>
        <member name="P:Gee.External.Capstone.XCore.XCoreOperand.Type">
            <summary>
                Get Operand's Type.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.XCore.XCoreOperand.Create(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.XCore.NativeXCoreInstructionDetail@)">
            <summary>
                Create XCore Operands.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="nativeInstructionDetail">
                A native XCore instruction detail.
            </param>
            <returns>
                An array of XCore operands.
            </returns>
        </member>
        <member name="M:Gee.External.Capstone.XCore.XCoreOperand.#ctor(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.XCore.NativeXCoreOperand@)">
            <summary>
                Create an XCore Operand.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="nativeOperand">
                A native XCore operand.
            </param>
        </member>
        <member name="T:Gee.External.Capstone.XCore.XCoreOperandType">
            <summary>
                XCore Operand Type.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.XCore.XCoreOperandType.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, operand type.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.XCore.XCoreOperandType.Register">
            <summary>
                Indicates a register operand.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.XCore.XCoreOperandType.Immediate">
            <summary>
                Indicates an immediate operand.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.XCore.XCoreOperandType.Memory">
            <summary>
                Indicates a memory operand.
            </summary>
        </member>
        <member name="T:Gee.External.Capstone.XCore.XCoreRegister">
            <summary>
                XCore Register.
            </summary>
        </member>
        <member name="M:Gee.External.Capstone.XCore.XCoreRegister.TryCreate(Gee.External.Capstone.CapstoneDisassembler,Gee.External.Capstone.XCore.XCoreRegisterId)">
            <summary>
                Create an XCore Register.
            </summary>
            <param name="disassembler">
                A disassembler.
            </param>
            <param name="id">
                The register's unique identifier.
            </param>
            <returns>
                An XCore register. A null reference if the register's unique identifier is equal to
                <see cref="F:Gee.External.Capstone.XCore.XCoreRegisterId.Invalid" />.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the disassembler is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Capstone.XCore.XCoreRegister.#ctor(Gee.External.Capstone.XCore.XCoreRegisterId,System.String)">
            <summary>
                Create a XCore Register.
            </summary>
            <param name="id">
                The register's unique identifier.
            </param>
            <param name="name">
                The register's name.
            </param>
        </member>
        <member name="T:Gee.External.Capstone.XCore.XCoreRegisterId">
            <summary>
                XCore Register Unique Identifier.
            </summary>
        </member>
        <member name="F:Gee.External.Capstone.XCore.XCoreRegisterId.Invalid">
            <summary>
                Indicates an invalid, or an uninitialized, register.
            </summary>
        </member>
    </members>
</doc>
